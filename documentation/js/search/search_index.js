var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessContorlService.html",[0,0.713,1,1.802]],["body/injectables/AccessContorlService.html",[0,0.922,1,2.33,2,1.382,3,0.205,4,0.23,5,0.182,6,4.767,7,2.516,8,0.452,9,1.448,10,2.784,11,4.559,12,4.767,13,1.531,14,4.638,15,4.044,16,4.559,17,1.975,18,1.072,19,4.638,20,3.958,21,2.329,22,3.324,23,1.62,24,0.022,25,1.296,26,0.841,27,1.296,28,1.302,29,1.531,30,2.276,31,3.324,32,3.959,33,3.324,34,2.516,35,3.958,36,3.176,37,2.33,38,3.324,39,2.909,40,3.511,41,0.287,42,0.517,43,2.276,44,1.926,45,3.176,46,3.176,47,0.205,48,0.01,49,2.837,50,2.837,51,3.511,52,2.837,53,1.908,54,3.958,55,3.958,56,1.229,57,2.837,58,2.837,59,3.958,60,2.837,61,2.837,62,2.837,63,4.559,64,2.837,65,1.448,66,1.789,67,1.789,68,0.014,69,0.014]],["title/modules/AdminModule.html",[70,0.948,71,2.078]],["body/modules/AdminModule.html",[3,0.259,4,0.289,5,0.229,24,0.022,41,0.416,42,0.65,47,0.259,48,0.012,68,0.016,69,0.016,70,1.586,71,4.102,72,1.739,73,1.968,74,2.423,75,2.423,76,1.968,77,2.423,78,2.423,79,3.569,80,3.569,81,3.384,82,3.625,83,3.384,84,3.136,85,2.423,86,2.101,87,4.182,88,2.392,89,4.11,90,4.11,91,2.547,92,4.182,93,3.569,94,4.182,95,4.182,96,3.569,97,4.182,98,3.569]],["title/controllers/AdminTodosController.html",[90,2.456,99,1.405]],["body/controllers/AdminTodosController.html",[3,0.126,4,0.141,5,0.111,8,0.276,13,1.061,18,0.925,21,0.752,23,1.832,24,0.022,25,1.466,26,0.764,27,1.466,28,0.797,29,1.732,41,0.379,42,0.316,47,0.126,48,0.006,53,1.629,56,0.752,65,1.638,68,0.009,69,0.009,88,0.898,90,2.202,99,0.797,100,4.689,101,1.735,102,1.276,103,2.033,104,2.753,105,3.214,106,1.615,107,1.862,108,2.016,109,2.016,110,1.731,111,3.214,112,1.647,113,2.033,114,2.428,115,2.842,116,1.735,117,2.824,118,1.541,119,1.735,120,4.33,121,3.261,122,4.199,123,1.539,124,3.763,125,2.033,126,1.735,127,2.842,128,1.735,129,1.876,130,2.202,131,2.033,132,3.429,133,1.393,134,1.735,135,2.73,136,3.679,137,2.033,138,1.393,139,1.735,140,1.539,141,2.033,142,1.276,143,3.3,144,1.735,145,1.393,146,2.033,147,1.862,148,4.385,149,1.276,150,0.71,151,2.016,152,1.393,153,1.276,154,1.276,155,1.539,156,1.393,157,2.016,158,1.178,159,1.539,160,2.73,161,1.731,162,0.71,163,0.957,164,1.276,165,1.539,166,1.178,167,1.276,168,1.735,169,2.146,170,2.033,171,1.539,172,1.735,173,1.393,174,1.178,175,2.033,176,1.178,177,1.022,178,2.276,179,1.735,180,1.178,181,2.033,182,3.429,183,3.403,184,1.393,185,1.539,186,3.095,187,1.735,188,1.735,189,3.103,190,1.735,191,1.735,192,1.539,193,1.735,194,3.986,195,1.539,196,1.393,197,1.735,198,2.842,199,1.735,200,1.539,201,1.539,202,1.735,203,1.735]],["title/controllers/AdminUsersController.html",[89,2.456,99,1.405]],["body/controllers/AdminUsersController.html",[3,0.123,4,0.138,5,0.109,8,0.271,10,1.317,13,1.046,17,0.738,18,0.917,21,0.738,23,1.817,24,0.022,25,1.454,26,0.757,27,1.454,28,0.782,29,1.718,41,0.383,42,0.31,47,0.123,48,0.006,53,1.614,56,0.738,65,1.625,68,0.009,69,0.009,88,0.882,89,2.169,99,0.782,102,1.252,104,2.74,106,1.591,107,1.835,108,1.987,109,1.987,110,1.705,112,1.639,114,2.41,115,2.812,118,1.526,119,1.703,120,4.31,121,3.253,123,1.51,124,3.735,126,1.703,128,1.703,130,2.169,132,3.393,133,1.367,134,1.703,135,2.697,136,3.656,138,1.367,139,1.703,140,1.51,142,1.252,144,1.703,145,1.367,147,1.835,148,4.366,149,1.252,150,0.697,151,1.987,152,1.367,153,1.252,154,1.252,155,1.51,156,1.367,157,1.987,158,1.156,161,1.705,162,0.697,163,0.939,164,1.252,166,1.156,167,1.252,173,1.367,174,1.156,177,1.591,178,2.615,180,1.156,182,3.393,183,3.388,184,1.367,185,1.51,186,3.067,187,1.703,189,3.07,190,1.703,192,1.51,193,1.703,195,1.51,196,1.367,197,1.703,198,2.812,200,1.51,201,1.51,202,1.703,204,4.655,205,1.51,206,1.995,207,3.167,208,3.167,209,1.995,210,1.703,211,2.449,212,2.203,213,1.995,214,3.07,215,1.637,216,1.995,217,1.995,218,1.995,219,3.046,220,1.995,221,1.978,222,1.995,223,1.252,224,2.281,225,1.51,226,1.252,227,1.367,228,1.853,229,1.51,230,1.703,231,1.995,232,1.995,233,1.703,234,1.703,235,1.51,236,3.938,237,1.703,238,1.995]],["title/modules/AppConfigModule.html",[70,0.948,239,2.25]],["body/modules/AppConfigModule.html",[3,0.34,4,0.296,5,0.234,24,0.021,41,0.375,42,0.666,47,0.265,48,0.012,66,2.307,68,0.016,69,0.016,70,1.453,72,1.781,91,2.016,239,3.449,240,4.285,241,3.657,242,4.693,243,3.243,244,2.688,245,4.285,246,4.285,247,4.285,248,3.657,249,3.657,250,4.285,251,4.285,252,6.071,253,4.162,254,4.285,255,3.243,256,3.657,257,4.285,258,4.285,259,4.285,260,4.285,261,4.285,262,4.285,263,4.285,264,4.285,265,4.285,266,4.285,267,4.285,268,3.243,269,4.285,270,4.285,271,5.498,272,4.285,273,4.285,274,4.285,275,4.285,276,4.285,277,4.285,278,4.285,279,4.285,280,4.285,281,4.285,282,5.498,283,4.285,284,4.285,285,4.285,286,4.285]],["title/modules/AppModule.html",[70,0.948,287,2.25]],["body/modules/AppModule.html",[3,0.196,4,0.219,5,0.173,13,1.045,18,0.558,23,1.106,24,0.022,25,0.884,26,0.461,27,0.884,29,1.045,30,2.168,41,0.424,42,0.492,47,0.196,48,0.009,68,0.013,69,0.013,70,1.375,71,3.592,72,1.316,73,1.489,74,1.834,75,1.834,76,1.489,77,2.596,78,1.834,81,3.115,82,3.338,83,3.115,84,2.596,85,1.834,86,1.59,91,2.109,239,3.889,287,4.459,288,2.701,289,2.701,290,3.889,291,3.592,292,3.165,293,3.165,294,4.481,295,5.657,296,3.165,297,3.165,298,3.825,299,4.481,300,3.165,301,2.701,302,3.165,303,4.481,304,1.986,305,3.165,306,4.481,307,2.168,308,3.165,309,2.701,310,3.165,311,3.165,312,2.168,313,3.165,314,3.165,315,2.701,316,2.701,317,3.165,318,3.165,319,3.165,320,3.165,321,3.165,322,3.165,323,3.165,324,3.165,325,3.165,326,4.481,327,3.165,328,3.165]],["title/controllers/AuthController.html",[99,1.405,329,2.456]],["body/controllers/AuthController.html",[3,0.132,4,0.148,5,0.117,8,0.29,10,1.389,13,1.103,17,0.79,18,0.891,23,1.765,24,0.022,25,1.412,26,0.678,27,1.412,29,1.668,41,0.39,42,0.332,47,0.132,48,0.006,53,1.359,56,1.236,65,1.577,68,0.01,69,0.01,88,0.944,99,0.837,102,1.34,104,2.89,110,1.799,115,3.169,118,1.577,120,4.252,121,3.229,124,1.463,130,1.463,135,1.463,136,1.34,140,1.617,145,1.463,147,2.697,148,4.32,149,1.34,150,0.746,151,2.582,152,2.819,153,1.34,154,1.34,156,1.463,157,1.34,158,1.238,161,1.799,162,0.746,163,1.005,174,2.385,177,1.073,178,1.073,180,1.936,183,3.342,184,2.289,186,2.096,189,2.819,196,1.463,201,1.617,211,2.634,212,2.011,215,0.888,219,3.119,221,2.068,223,1.34,224,1.936,226,1.34,227,1.463,228,1.937,229,1.617,233,1.823,234,1.823,235,1.617,329,2.289,330,1.823,331,2.136,332,3.342,333,2.53,334,2.136,335,2.136,336,4.945,337,2.136,338,3.484,339,2.136,340,2.136,341,2.136,342,3.342,343,2.136,344,2.136,345,2.136,346,2.136,347,2.136,348,2.136,349,2.136,350,2.136,351,3.342,352,2.136,353,1.823,354,2.136,355,2.136,356,3.342,357,1.34,358,1.617,359,2.136,360,1.463,361,2.136,362,1.936,363,1.617,364,1.34,365,2.136,366,2.136,367,2.136,368,2.136,369,3.973,370,2.136,371,4.116,372,2.136,373,2.136,374,3.342,375,2.136,376,1.823,377,1.005,378,3.342,379,1.34,380,1.823,381,1.823,382,1.823,383,2.136,384,2.136,385,2.136,386,2.136,387,2.136,388,2.136,389,1.823,390,2.136,391,2.136,392,2.136,393,2.136]],["title/injectables/AuthMiddleware.html",[0,0.713,307,2.456]],["body/injectables/AuthMiddleware.html",[0,1.038,2,1.645,3,0.245,4,0.274,5,0.216,8,0.538,13,1.723,18,0.698,23,1.382,24,0.022,25,1.105,26,0.576,27,1.105,29,1.306,30,2.71,41,0.361,42,0.615,47,0.245,48,0.011,53,1.929,56,1.93,68,0.015,69,0.015,136,2.482,153,2.482,154,2.482,180,3.024,186,3.275,307,3.575,338,3.344,357,2.482,364,2.482,394,3.377,395,3.575,396,4.455,397,4.986,398,5.302,399,4.255,400,5.302,401,3.956,402,4.455,403,3.956,404,3.956,405,2.71,406,5.22,407,3.956,408,3.956,409,3.956,410,5.842,411,3.956,412,3.956,413,3.956,414,3.956,415,3.956,416,3.956,417,3.956,418,3.956,419,2.482,420,3.956]],["title/modules/AuthModule.html",[70,0.948,81,1.802]],["body/modules/AuthModule.html",[1,3.484,3,0.208,4,0.233,5,0.184,24,0.022,41,0.421,42,0.524,47,0.208,48,0.01,68,0.014,69,0.014,70,1.423,72,1.402,73,1.587,74,1.954,75,1.954,76,1.587,77,3.119,78,3.119,81,3.57,83,3.179,84,2.714,85,1.954,86,1.694,88,2.07,91,2.533,98,2.878,104,1.49,221,3.484,243,4.075,244,2.115,329,3.687,358,2.553,419,2.115,421,2.878,422,3.372,423,2.878,424,2.878,425,3.969,426,3.969,427,3.372,428,4.403,429,2.553,430,3.372,431,3.372,432,2.553,433,3.372,434,3.372,435,4.685,436,1.954,437,3.372,438,2.878,439,3.372,440,2.878,441,3.372,442,3.372,443,3.372,444,2.878]],["title/injectables/AuthService.html",[0,0.713,221,1.802]],["body/injectables/AuthService.html",[0,0.785,2,1.105,3,0.164,4,0.184,5,0.145,8,0.361,10,1.641,13,1.303,17,1.46,18,0.919,23,1.821,24,0.022,25,1.456,26,0.759,27,1.456,29,1.555,41,0.392,42,0.413,47,0.164,48,0.008,53,2.13,65,1.739,68,0.012,69,0.012,104,2.802,110,2.125,112,1.245,114,1.174,115,2.954,142,2.477,161,2.125,162,0.928,177,1.984,178,2.798,198,2.477,211,2.746,212,1.555,215,1.105,219,3.342,221,1.984,223,1.667,224,2.287,226,1.667,227,1.82,228,2.746,229,2.012,235,2.012,237,2.268,333,2.988,362,3.227,363,2.012,377,1.251,379,1.667,380,2.268,381,4.02,382,2.268,399,2.704,432,2.012,445,2.268,446,3.948,447,2.658,448,6.042,449,2.658,450,3.948,451,2.658,452,2.658,453,3.948,454,2.658,455,2.012,456,2.012,457,2.012,458,2.658,459,3.948,460,3.948,461,3.948,462,2.658,463,2.658,464,2.988,465,3.369,466,3.369,467,3.369,468,3.369,469,3.369,470,3.369,471,2.366,472,3.948,473,2.658,474,3.369,475,2.658,476,3.948,477,2.658,478,2.658,479,3.948,480,2.658,481,2.658,482,2.658]],["title/entities/BaseEntity.html",[483,1.491,484,1.931]],["body/entities/BaseEntity.html",[3,0.279,4,0.313,5,0.247,8,0.615,9,1.776,18,1.098,24,0.021,26,0.906,41,0.279,47,0.279,48,0.013,68,0.017,69,0.017,112,1.504,114,2.75,118,1.943,162,1.579,483,2.365,484,3.351,485,2.62,486,3.859,487,6.225,488,6.225,489,4.474,490,6.225,491,4.521,492,5.689,493,4.521,494,6.225,495,4.521,496,5.689,497,4.521,498,1.88]],["title/classes/CreateTodoDto.html",[48,0.01,117,1.931]],["body/classes/CreateTodoDto.html",[3,0.206,4,0.23,5,0.182,8,0.453,9,1.45,18,1.073,24,0.022,26,0.886,37,2.907,41,0.358,47,0.206,48,0.015,56,1.232,68,0.014,69,0.014,112,1.743,117,2.501,118,1.9,121,2.723,150,1.164,159,4.771,183,2.879,489,3.182,499,1.568,500,2.282,501,4.049,502,4.38,503,4.049,504,4.38,505,3.332,506,3.332,507,3.517,508,3.965,509,3.332,510,3.332,511,3.182,512,3.182,513,3.332,514,3.332,515,3.332,516,3.332,517,3.332,518,3.332,519,4.646,520,3.526,521,3.965,522,2.282,523,3.517,524,3.099,525,4.646,526,2.844,527,2.844,528,1.794,529,3.517,530,2.844,531,2.844,532,3.817,533,1.93,534,3.353,535,2.844,536,2.844,537,2.914,538,2.844,539,2.844,540,2.844,541,2.282]],["title/classes/CreateUserDto.html",[48,0.01,211,1.687]],["body/classes/CreateUserDto.html",[3,0.189,4,0.212,5,0.167,8,0.416,9,1.366,18,1.081,21,1.618,24,0.022,26,0.892,27,1.222,37,2.962,41,0.344,47,0.189,48,0.015,68,0.013,69,0.013,112,1.801,118,1.914,150,1.069,166,1.773,211,2.059,212,1.445,223,3.96,377,2.403,379,3.204,471,2.566,499,1.44,504,4.641,512,2.997,520,3.657,522,2.096,523,4.641,524,3.552,526,2.612,527,2.612,528,1.648,532,3.846,533,1.773,534,3.552,535,2.612,536,4.756,537,3.204,541,2.096,542,1.92,543,3.866,544,3.866,545,2.749,546,3.061,547,3.061,548,3.061,549,3.061,550,3.061,551,3.061,552,3.061,553,3.061,554,3.061,555,3.061,556,3.061,557,3.061,558,3.734,559,4.376,560,2.612,561,4.376,562,2.612,563,2.317,564,2.612,565,2.612,566,3.061,567,3.061,568,2.612]],["title/modules/DatabaseConfigModule.html",[70,0.948,290,2.25]],["body/modules/DatabaseConfigModule.html",[3,0.275,4,0.308,5,0.243,24,0.022,26,0.648,41,0.382,42,0.692,47,0.275,48,0.013,66,3.032,68,0.017,69,0.017,70,1.488,72,1.85,91,2.65,104,1.966,241,3.797,243,4.263,244,2.791,249,3.797,268,3.368,290,3.533,377,2.094,428,4.916,438,3.797,444,3.797,471,2.235,569,4.449,570,3.368,571,5.631,572,2.578,573,4.449,574,4.449,575,4.449,576,4.449,577,4.449,578,4.449,579,4.449,580,4.449,581,4.449,582,4.449,583,5.631,584,4.806,585,4.449,586,3.797]],["title/controllers/HealthController.html",[99,1.405,587,2.456]],["body/controllers/HealthController.html",[3,0.233,4,0.26,5,0.206,8,0.512,10,2.532,13,1.667,17,1.392,18,0.664,21,1.392,24,0.022,28,1.475,29,1.243,41,0.404,42,0.585,47,0.233,48,0.011,65,1.175,68,0.015,69,0.015,88,1.663,99,1.475,102,2.361,118,1.175,147,2.926,149,2.361,150,1.315,158,2.181,163,1.771,164,2.361,166,2.181,167,2.361,173,2.578,174,2.181,177,3.06,587,3.458,588,3.212,589,4.31,590,6.09,591,3.764,592,3.764,593,5.05,594,5.05,595,5.05,596,5.05,597,5.05,598,2.849,599,3.764,600,3.212,601,3.764,602,3.764,603,3.764,604,3.764,605,3.764,606,3.764,607,3.764,608,3.764,609,3.764,610,3.764,611,6.68,612,3.764,613,3.764,614,3.764,615,3.764]],["title/modules/HealthModule.html",[70,0.948,291,2.078]],["body/modules/HealthModule.html",[3,0.301,4,0.337,5,0.266,24,0.022,41,0.398,42,0.757,47,0.301,48,0.014,68,0.018,69,0.018,70,1.574,72,2.024,88,2.632,91,2.291,291,3.451,584,4.156,587,4.408,598,3.686,616,4.869,617,4.869,618,4.869,619,4.869,620,4.869,621,4.156,622,4.869,623,4.156]],["title/interfaces/IsAuthorizedParams.html",[32,2.456,44,2.078]],["body/interfaces/IsAuthorizedParams.html",[0,1.021,1,1.938,3,0.238,4,0.267,5,0.211,6,2.92,7,2.92,8,0.525,9,1.603,10,2.399,11,3.292,12,4.656,15,2.92,16,3.292,17,1.426,20,3.292,21,2.524,24,0.022,26,0.747,32,3.951,35,3.292,39,2.42,40,2.92,41,0.317,42,0.6,43,2.642,44,2.235,45,4.386,46,4.386,47,0.238,48,0.011,49,3.292,50,3.292,51,3.886,52,3.292,53,2.03,54,4.381,55,4.381,56,1.426,57,3.292,58,3.292,59,4.381,60,3.292,61,3.292,62,3.292,63,4.924,64,3.292,65,1.603,66,2.077,67,2.077,68,0.015,69,0.015,624,3.858]],["title/injectables/JwtGuard.html",[0,0.713,163,1.687]],["body/injectables/JwtGuard.html",[0,1.234,2,2.168,3,0.322,4,0.361,5,0.285,24,0.021,41,0.384,42,0.811,47,0.322,48,0.015,68,0.018,69,0.018,163,2.922,436,3.022,498,2.581,625,4.451,626,6.209,627,4.451]],["title/injectables/JwtStrategy.html",[0,0.713,425,2.25]],["body/injectables/JwtStrategy.html",[0,1.091,2,1.776,3,0.264,4,0.295,5,0.233,8,0.581,13,1.812,17,1.58,18,0.967,23,1.917,24,0.022,25,1.533,26,0.799,27,1.533,29,1.41,41,0.395,42,0.664,47,0.264,48,0.012,65,1.334,67,2.3,68,0.016,69,0.016,176,2.475,244,2.68,425,3.442,428,5.126,436,2.475,440,3.646,498,2.281,628,3.646,629,4.683,630,4.683,631,4.272,632,4.272,633,5.487,634,4.272,635,5.487,636,4.272,637,3.646,638,2.926,639,3.234,640,3.646,641,3.646,642,4.272,643,4.272,644,4.272,645,4.272]],["title/injectables/LocalGuard.html",[0,0.713,360,2.456]],["body/injectables/LocalGuard.html",[0,1.234,2,2.168,3,0.322,4,0.361,5,0.285,24,0.021,41,0.384,42,0.811,47,0.322,48,0.015,68,0.018,69,0.018,360,4.252,436,3.022,498,2.581,627,4.451,646,4.451,647,6.209]],["title/injectables/LocalStrategy.html",[0,0.713,426,2.25]],["body/injectables/LocalStrategy.html",[0,1.048,2,1.669,3,0.248,4,0.278,5,0.219,8,0.546,13,1.74,17,1.484,18,0.929,23,1.84,24,0.022,25,1.472,26,0.767,27,1.472,29,1.325,41,0.401,42,0.624,47,0.248,48,0.012,53,1.325,56,1.484,65,1.253,68,0.016,69,0.016,112,1.76,176,2.325,180,2.325,212,1.942,221,3.346,358,3.038,362,3.053,363,3.038,377,2.48,426,3.306,436,2.325,471,3.139,498,2.191,629,4.497,630,4.497,637,3.425,638,2.749,640,3.425,641,3.425,648,3.425,649,4.013,650,4.013,651,5.269,652,4.013,653,5.269,654,3.425,655,4.013]],["title/classes/LoginDto.html",[48,0.01,362,2.078]],["body/classes/LoginDto.html",[3,0.27,4,0.302,5,0.239,8,0.594,9,1.737,18,0.981,24,0.022,26,0.81,37,2.193,41,0.379,47,0.27,48,0.018,68,0.016,69,0.016,112,1.705,118,1.737,150,1.525,362,3.224,377,2.882,471,3.241,499,2.054,504,4.212,520,3.549,523,4.636,524,3.549,528,2.35,532,3.49,533,2.529,534,3.224,537,2.739,563,3.304,656,3.726,657,4.365,658,4.365,659,4.365,660,4.365]],["title/classes/QueryTodoDto.html",[48,0.01,127,2.25]],["body/classes/QueryTodoDto.html",[3,0.203,4,0.227,5,0.179,8,0.447,9,1.436,18,1.014,24,0.022,26,0.837,27,1.836,37,2.889,41,0.355,47,0.203,48,0.015,56,1.215,67,3.539,68,0.014,69,0.014,112,1.658,118,1.795,121,2.706,127,2.885,150,1.147,165,4.582,183,2.858,253,4.353,489,3.15,499,1.546,500,2.25,501,4.018,502,4.353,507,3.482,508,3.926,511,3.15,512,3.15,520,3.507,521,3.926,522,2.25,524,3.075,528,1.768,529,3.482,530,2.803,531,2.803,532,3.798,533,1.903,534,3.808,537,2.885,538,2.803,539,2.803,540,2.803,541,2.25,661,4.908,662,3.285,663,3.285,664,3.285,665,3.285,666,3.285,667,3.285,668,3.285,669,3.285,670,5.167]],["title/classes/QueryUserDto.html",[48,0.01,214,2.456]],["body/classes/QueryUserDto.html",[3,0.19,4,0.213,5,0.168,8,0.419,9,1.373,18,1.042,21,1.626,24,0.022,26,0.86,27,1.865,37,2.969,41,0.346,47,0.19,48,0.015,67,3.594,68,0.013,69,0.013,112,1.764,118,1.845,150,1.076,166,1.785,212,1.451,214,3.011,225,4.651,253,4.473,377,2.412,379,3.215,499,1.45,512,3.011,520,3.56,522,2.11,524,3.424,528,1.659,532,3.855,533,1.785,534,3.868,537,3.215,541,2.11,542,1.933,543,3.88,544,3.88,545,2.759,558,3.752,560,2.63,562,2.63,563,2.332,564,2.63,565,2.63,568,2.63,661,5.044,670,5.244,671,3.081,672,3.081,673,3.081,674,3.081,675,3.081,676,3.081,677,3.081,678,3.081,679,3.081,680,3.081]],["title/injectables/RequestLoggerMiddleware.html",[0,0.713,312,2.456]],["body/injectables/RequestLoggerMiddleware.html",[0,1.026,2,1.617,3,0.24,4,0.269,5,0.213,8,0.529,13,1.704,17,1.438,18,0.91,23,1.803,24,0.022,25,1.442,26,0.751,27,1.442,29,1.284,30,2.664,41,0.319,42,0.605,47,0.24,48,0.011,53,1.284,68,0.015,69,0.015,176,2.254,298,5.634,312,3.535,338,3.322,357,2.44,364,2.44,395,3.535,396,4.406,397,4.945,398,5.267,399,4.226,400,5.267,402,4.406,405,2.664,681,4.945,682,3.32,683,3.89,684,3.89,685,3.89,686,3.89,687,3.89,688,5.162,689,5.162,690,5.162,691,3.89,692,6.422,693,3.89,694,3.89,695,3.89,696,3.89,697,3.89,698,3.89,699,3.89]],["title/guards/RoleGuard.html",[700,2.715,701,2.25]],["body/guards/RoleGuard.html",[0,0.962,1,2.982,3,0.219,4,0.245,5,0.193,8,0.481,10,2.012,13,1.598,17,1.789,18,0.853,21,1.789,23,1.69,24,0.022,25,1.352,26,0.704,27,1.352,29,1.167,34,3.663,39,2.217,41,0.397,42,0.549,43,2.421,45,2.421,46,2.421,47,0.299,48,0.014,53,2.052,65,1.511,66,1.903,67,1.903,68,0.014,69,0.014,114,1.562,198,3.036,212,1.167,304,2.217,338,2.605,405,2.421,419,2.217,429,2.676,545,2.971,701,3.036,702,3.535,703,2.676,704,5.065,705,3.535,706,5.478,707,4.71,708,3.535,709,4.13,710,5.065,711,3.535,712,3.535,713,3.314,714,4.71,715,2.676,716,2.421,717,3.017,718,2.421,719,4.13,720,3.017,721,3.017,722,3.017,723,3.017,724,3.017,725,2.421]],["title/entities/Roles.html",[28,1.405,483,1.491]],["body/entities/Roles.html",[3,0.276,4,0.309,5,0.244,8,0.607,9,1.762,18,0.995,24,0.022,25,1.729,26,0.821,28,2.211,41,0.383,47,0.276,48,0.013,68,0.017,69,0.017,112,1.491,118,1.762,162,1.559,212,1.863,215,2.892,483,2.346,484,3.038,485,2.586,498,1.856,725,3.865,726,3.809,727,3.809,728,4.463,729,3.379,730,4.463,731,3.865,732,4.271,733,3.379,734,3.057,735,4.463,736,3.809]],["title/entities/TodoStatus.html",[483,1.491,737,2.25]],["body/entities/TodoStatus.html",[3,0.262,4,0.293,5,0.231,8,0.576,9,1.703,18,1.064,24,0.022,25,1.686,26,0.879,41,0.373,47,0.262,48,0.012,68,0.016,69,0.016,112,1.685,118,1.885,121,2.84,122,3.422,129,3.234,162,1.478,483,2.268,484,2.937,485,2.452,498,1.76,727,3.613,729,3.204,731,4.367,732,4.129,733,3.204,734,2.899,736,3.613,737,3.422,738,5.441,739,3.613,740,4.233,741,4.233,742,5.455,743,4.233,744,4.233]],["title/entities/Todos.html",[129,1.687,483,1.491]],["body/entities/Todos.html",[3,0.219,4,0.245,5,0.193,8,0.481,9,1.511,18,1.096,24,0.022,25,1.658,26,0.905,36,2.421,41,0.367,47,0.219,48,0.01,68,0.014,69,0.014,112,1.768,114,2.138,118,1.941,121,2.597,122,2.217,129,2.277,162,1.235,183,3.538,212,1.598,215,2.012,227,2.421,483,2.012,484,2.605,485,2.048,489,3.314,498,1.47,501,4.177,502,4.177,503,4.705,511,2.421,731,4.649,734,2.421,737,3.036,745,3.017,746,3.535,747,3.535,748,3.017,749,3.535,750,3.535,751,5.065,752,3.535,753,3.535,754,3.535,755,4.839,756,4.839,757,3.535,758,3.535,759,4.71,760,4.71,761,3.017,762,3.535,763,3.535]],["title/controllers/TodosController.html",[99,1.405,764,2.456]],["body/controllers/TodosController.html",[3,0.108,4,0.121,5,0.095,8,0.237,13,0.938,18,0.863,21,0.645,23,1.71,24,0.022,25,1.368,26,0.665,27,1.368,28,0.683,29,1.616,41,0.369,42,0.271,47,0.108,48,0.005,51,1.32,53,1.616,56,1.05,65,1.528,68,0.008,69,0.008,88,0.77,99,0.683,102,1.094,104,2.641,106,1.427,107,1.646,108,1.782,109,1.782,110,1.529,112,1.471,114,2.763,115,2.601,117,2.779,118,1.425,120,4.418,121,3.298,122,3.814,123,1.32,124,3.536,127,2.601,129,1.951,130,1.946,132,3.706,135,2.462,136,3.492,143,3.119,145,1.194,147,1.646,148,4.456,149,1.094,150,0.609,151,2.255,152,1.194,153,1.094,154,1.094,155,1.32,156,1.194,157,1.782,158,1.01,160,2.462,161,1.529,162,0.609,163,0.82,164,1.094,166,1.01,167,1.094,169,1.936,172,1.488,174,1.01,176,1.01,177,0.876,178,2.083,179,1.488,180,1.646,182,3.138,183,3.473,184,1.194,185,1.32,186,3.071,188,1.488,189,2.84,191,1.488,192,1.32,195,1.32,196,1.194,199,1.488,200,1.32,203,1.488,212,1.187,336,3.897,338,3.322,353,1.488,357,1.094,369,3.897,376,1.488,389,1.488,503,1.32,701,1.094,725,2.462,764,1.946,765,1.488,766,2.841,767,1.743,768,1.743,769,4.146,770,4.566,771,1.743,772,1.743,773,1.743,774,1.743,775,1.743,776,1.743,777,1.743,778,1.743,779,2.841,780,1.743,781,1.743,782,1.743,783,1.743,784,1.743,785,1.743,786,1.743,787,1.194,788,1.743,789,1.743,790,1.32,791,1.488,792,1.32,793,1.743,794,1.743,795,1.488,796,3.595,797,5.163,798,3.897,799,1.743,800,1.743,801,1.743,802,1.743,803,1.743,804,3.595,805,3.595,806,1.743,807,1.743]],["title/modules/TodosModule.html",[70,0.948,82,1.931]],["body/modules/TodosModule.html",[3,0.251,4,0.281,5,0.222,24,0.022,41,0.421,42,0.631,47,0.251,48,0.012,68,0.016,69,0.016,70,1.564,72,1.688,73,1.91,74,2.352,75,2.352,76,1.91,77,3.428,78,3.428,81,3.356,82,3.758,84,3.076,85,2.352,86,2.04,88,2.346,91,2.498,93,3.465,96,3.465,129,1.91,169,3.844,570,3.073,572,2.352,737,3.331,761,3.465,764,4.052,790,3.073,791,3.465,808,3.465,809,3.465,810,4.06,811,3.465,812,4.06,813,4.06,814,4.06]],["title/injectables/TodosService.html",[0,0.713,169,1.931]],["body/injectables/TodosService.html",[0,0.892,2,1.319,3,0.196,4,0.219,5,0.173,8,0.431,10,1.319,13,1.482,17,1.173,18,1.094,23,2.167,24,0.022,25,1.733,26,0.903,27,1.733,29,1.973,41,0.384,42,0.493,47,0.196,48,0.009,65,1.866,68,0.013,69,0.013,106,2.255,107,2.601,108,2.816,109,2.816,110,2.416,112,1.751,114,2.64,116,3.831,117,3.217,129,1.493,133,3.074,138,3.074,142,2.816,143,3.775,160,3.074,161,3.434,162,1.108,169,2.416,572,1.838,713,4.462,787,2.173,790,2.401,792,2.401,815,2.708,816,3.172,817,4.287,818,3.172,819,4.488,820,3.172,821,3.831,822,3.172,823,3.172,824,3.172,825,3.172,826,2.708,827,3.172,828,3.172,829,3.172,830,3.172,831,3.172,832,3.172]],["title/classes/TokenDto.html",[48,0.01,718,2.456]],["body/classes/TokenDto.html",[0,1,1,2.528,3,0.231,4,0.259,5,0.205,8,0.509,9,1.571,10,2.092,17,1.384,18,0.887,21,2.101,24,0.022,26,0.732,34,2.834,39,3.156,41,0.404,42,0.582,43,2.564,45,2.564,46,2.564,47,0.311,48,0.015,53,2.093,65,1.571,66,2.015,67,2.015,68,0.015,69,0.015,114,2.511,198,3.156,212,1.236,304,2.348,338,2.709,405,2.564,419,2.348,429,2.834,499,1.762,545,3.413,701,2.348,703,2.834,704,4.294,706,4.85,707,3.195,709,3.195,710,4.294,713,2.564,714,4.294,715,2.834,716,2.564,717,3.195,718,3.446,719,4.294,720,3.195,721,3.195,722,3.195,723,3.195,724,3.195,725,2.564,833,3.744,834,3.744]],["title/classes/UpdateTodoDto.html",[48,0.01,143,2.078]],["body/classes/UpdateTodoDto.html",[3,0.321,4,0.359,5,0.284,24,0.021,41,0.383,47,0.321,48,0.015,68,0.018,69,0.018,106,2.611,117,2.797,143,3.589,150,1.815,160,3.559,171,3.933,498,2.576,499,2.445,500,3.559,835,6.195,836,4.434]],["title/classes/UpdateUserDto.html",[48,0.01,219,1.931]],["body/classes/UpdateUserDto.html",[3,0.321,4,0.359,5,0.284,24,0.021,41,0.383,47,0.321,48,0.015,68,0.018,69,0.018,106,2.611,150,1.815,211,2.445,219,3.335,224,3.01,226,3.259,498,2.576,499,2.445,542,3.259,836,4.434,837,6.195]],["title/entities/Users.html",[215,1.491,483,1.491]],["body/entities/Users.html",[3,0.212,4,0.237,5,0.187,8,0.465,9,1.477,18,1.149,24,0.022,25,1.516,26,0.948,28,1.854,36,2.344,41,0.362,47,0.212,48,0.01,68,0.014,69,0.014,112,1.837,118,2.034,122,2.969,129,3.065,162,1.195,168,2.92,212,1.13,215,1.967,377,2.553,379,3.403,471,2.726,483,1.967,484,2.548,485,1.983,498,1.423,543,4.106,544,4.106,545,3.507,729,2.59,731,4.673,732,3.582,733,2.59,734,2.344,748,2.92,751,4.039,759,4.039,760,4.039,795,4.039,838,2.92,839,3.422,840,3.422,841,3.422,842,3.422,843,3.422,844,3.422,845,3.422,846,3.422,847,3.422,848,3.422,849,3.422,850,2.92,851,3.422,852,3.422,853,3.422]],["title/modules/UsersModule.html",[70,0.948,83,1.802]],["body/modules/UsersModule.html",[3,0.271,4,0.303,5,0.239,24,0.022,28,2.185,41,0.412,42,0.681,47,0.271,48,0.013,68,0.016,69,0.016,70,1.621,72,1.821,73,2.061,74,2.537,75,2.537,76,2.061,77,3.554,78,3.554,83,3.48,84,3.23,85,2.537,86,2.2,91,2.061,215,1.821,228,3.396,570,3.315,572,2.537,850,3.737,854,3.737,855,3.737,856,3.737,857,4.379,858,3.737,859,3.737,860,4.379]],["title/injectables/UsersService.html",[0,0.713,228,1.687]],["body/injectables/UsersService.html",[0,0.855,2,1.243,3,0.185,4,0.207,5,0.163,8,0.406,10,1.243,13,1.42,17,1.59,18,1.072,23,2.124,24,0.022,25,1.699,26,0.885,27,1.699,29,1.928,41,0.376,42,0.465,47,0.185,48,0.009,53,1.42,65,1.823,68,0.013,69,0.013,104,2.226,106,2.161,107,2.492,108,2.698,109,2.698,110,2.316,112,1.727,114,2.581,133,2.946,138,2.946,142,2.698,161,3.374,162,1.044,177,1.502,178,1.502,210,3.671,211,2.748,212,1.42,215,1.243,219,3.453,224,2.492,228,2.024,399,2.047,464,2.262,465,2.551,466,2.551,467,2.551,468,2.551,469,2.551,470,2.551,471,1.502,572,1.732,713,4.393,787,2.047,792,2.262,817,4.172,821,3.671,826,2.551,858,2.551,861,2.551,862,2.989,863,2.989,864,4.301,865,2.989,866,2.989,867,2.989,868,2.989,869,2.989,870,2.989,871,2.989,872,2.989,873,2.989,874,4.301,875,2.989,876,2.989]],["title/coverage.html",[877,4.171]],["body/coverage.html",[0,1.287,1,1.354,5,0.147,6,3.018,7,3.018,24,0.022,26,0.392,28,1.562,32,1.845,44,1.561,48,0.018,56,0.996,68,0.012,69,0.012,70,0.712,76,1.268,89,1.845,90,1.845,99,2.195,100,2.299,101,2.299,117,1.45,127,1.69,129,1.268,143,1.561,159,2.039,163,1.268,165,2.039,169,1.45,171,2.039,204,2.299,205,2.039,211,1.268,214,1.845,215,1.12,219,1.45,221,1.354,223,1.69,225,2.039,226,1.69,228,1.268,307,1.845,312,1.845,329,1.845,330,2.299,360,1.845,362,1.561,394,2.299,425,1.69,426,1.69,445,2.299,455,2.039,456,2.039,457,3.593,483,2.329,484,1.45,486,2.299,500,3.251,542,2.978,587,1.845,588,2.299,625,2.299,628,2.299,646,2.299,648,2.299,656,2.299,681,2.299,682,2.299,700,2.039,701,1.69,703,3.018,716,1.845,718,1.845,726,2.299,737,1.69,738,2.299,739,2.299,745,2.299,764,1.845,765,2.299,815,2.299,838,2.299,861,2.299,877,2.299,878,2.039,879,2.694,880,2.694,881,7.347,882,5.865,883,5.247,884,6.069,885,3.987,886,3.403,887,6.567,888,7.05,889,3.987,890,4.052,891,2.299,892,4.78,893,2.299,894,2.299,895,2.299,896,2.299,897,3.018,898,2.299,899,2.694,900,2.694]],["title/dependencies.html",[73,2.029,901,2.269]],["body/dependencies.html",[24,0.022,42,0.658,48,0.016,68,0.016,69,0.016,73,1.992,150,1.478,162,1.478,242,3.613,244,2.655,301,3.613,304,2.655,364,2.655,432,3.204,436,2.452,528,2.279,533,2.452,572,2.452,598,3.204,638,4.134,639,3.204,654,3.613,715,3.204,902,6.036,903,4.233,904,4.233,905,4.233,906,4.233,907,4.233,908,4.233,909,4.233,910,4.233,911,4.233,912,4.233,913,4.233,914,4.233,915,4.233,916,4.233,917,4.233,918,4.233,919,4.233,920,3.613,921,4.233,922,4.233,923,4.233,924,5.455,925,4.233,926,4.233,927,4.233,928,4.233,929,4.233,930,4.233,931,4.233,932,4.233,933,4.233,934,4.233,935,4.233,936,4.233]],["title/miscellaneous/enumerations.html",[937,1.737,938,3.679]],["body/miscellaneous/enumerations.html",[8,0.642,21,2.161,24,0.021,37,3.627,68,0.017,69,0.017,212,1.929,511,4.003,529,4.424,937,2.735,938,4.029,939,4.72,940,4.72,941,5.844,942,4.72,943,4.988,944,5.844,945,5.844,946,4.72,947,4.72,948,4.72,949,5.844,950,4.72,951,4.72,952,5.844,953,5.844]],["title/miscellaneous/functions.html",[937,1.737,954,3.679]],["body/miscellaneous/functions.html",[8,0.757,24,0.019,68,0.019,69,0.019,76,3.206,897,4.216,937,3.227,954,4.754,955,4.754]],["title/index.html",[8,0.408,956,2.559,957,2.559]],["body/index.html",[5,0.188,9,0.509,10,1.427,12,1.235,15,1.235,21,0.603,24,0.022,27,0.456,28,1.858,41,0.403,42,0.619,44,0.945,47,0.272,48,0.014,53,1.455,56,1.473,65,1.244,68,0.008,69,0.008,71,0.945,73,0.767,76,0.767,81,1.352,82,1.448,83,1.352,86,1.725,91,0.767,99,1.966,104,0.721,106,1.352,107,1.989,112,0.711,118,0.509,147,1.559,150,1.391,151,1.023,157,1.687,158,2.553,163,1.874,164,2.499,167,1.023,173,1.842,174,2.553,176,2.308,177,2.001,178,1.352,205,3.015,211,1.874,212,1.133,215,1.427,224,0.945,228,2.634,230,1.392,248,4.048,255,1.235,256,1.392,268,2.036,287,1.023,291,0.945,304,1.023,309,1.392,315,1.392,316,1.392,333,1.235,338,0.878,357,1.687,377,0.767,395,2.351,419,2.975,464,1.235,471,1.352,520,1.989,524,1.989,528,0.878,534,3.396,542,1.023,545,2.372,586,2.296,589,1.392,600,2.296,638,1.117,787,1.117,798,1.392,817,1.235,859,2.296,878,2.599,898,1.392,901,1.235,920,1.392,943,4.048,958,2.93,959,3.433,960,1.631,961,1.631,962,1.631,963,2.69,964,2.296,965,3.433,966,3.433,967,1.631,968,1.631,969,2.69,970,2.69,971,1.631,972,3.433,973,2.69,974,1.631,975,1.631,976,1.631,977,5.434,978,4.743,979,3.433,980,1.631,981,1.631,982,1.631,983,1.631,984,1.631,985,2.69,986,1.631,987,1.631,988,1.631,989,2.69,990,3.433,991,1.631,992,1.631,993,1.631,994,1.631,995,2.036,996,2.69,997,1.631,998,1.631,999,2.69,1000,2.296,1001,1.631,1002,1.631,1003,1.631,1004,1.631,1005,1.631,1006,1.631,1007,1.631,1008,1.631,1009,1.631,1010,1.631,1011,2.69,1012,1.631,1013,1.631,1014,1.631,1015,1.631,1016,1.631,1017,1.631,1018,2.69,1019,1.631,1020,3.433,1021,1.631,1022,3.433,1023,1.631,1024,1.631,1025,1.631,1026,1.631,1027,1.631,1028,2.69,1029,1.631,1030,1.631,1031,1.631,1032,1.631,1033,1.631,1034,1.631,1035,1.631,1036,2.93,1037,1.631,1038,1.631,1039,1.631,1040,1.631,1041,1.631,1042,5.243,1043,1.631,1044,1.631,1045,5.016,1046,1.631,1047,3.983,1048,1.631,1049,5.016,1050,1.631,1051,1.631,1052,2.69,1053,2.69,1054,3.399,1055,3.983,1056,3.983,1057,2.69,1058,2.69,1059,3.433,1060,2.69,1061,2.69,1062,1.631,1063,1.631,1064,1.631,1065,1.631,1066,1.631,1067,1.631,1068,1.631,1069,1.631,1070,1.631,1071,1.631,1072,1.392,1073,2.69,1074,1.631,1075,1.631,1076,1.631,1077,3.433,1078,1.631,1079,1.631,1080,1.631,1081,2.69,1082,1.631,1083,1.631,1084,1.631,1085,1.631,1086,1.631,1087,1.631,1088,1.631,1089,1.631,1090,2.69,1091,2.69,1092,2.69,1093,1.631,1094,2.69,1095,2.69,1096,1.631,1097,1.631,1098,1.631,1099,2.69,1100,1.631,1101,1.631,1102,1.631,1103,1.631,1104,1.631,1105,1.631,1106,1.631,1107,1.631,1108,1.631,1109,1.631,1110,1.631,1111,1.631,1112,1.631,1113,1.631,1114,1.631,1115,1.631,1116,1.392,1117,1.631,1118,1.631,1119,1.631,1120,1.631,1121,2.599,1122,1.631,1123,1.631,1124,1.631,1125,1.392,1126,1.631,1127,1.631,1128,1.631]],["title/license.html",[956,2.559,957,2.559,1121,2.269]],["body/license.html",[24,0.016,68,0.016,69,0.016,86,2.101,364,2.623,395,3.707,507,3.166,878,3.166,1000,3.569,1072,3.569,1116,3.569,1129,6.001,1130,3.569,1131,3.569,1132,3.569,1133,5.413,1134,4.182,1135,4.182,1136,4.182,1137,4.182,1138,4.182,1139,5.413,1140,7.019,1141,4.182,1142,4.182,1143,4.182,1144,6.001,1145,4.182,1146,5.413,1147,4.182,1148,4.182,1149,4.182,1150,4.182,1151,4.182,1152,4.182,1153,4.182,1154,4.182,1155,4.182,1156,5.413,1157,4.182,1158,4.182,1159,4.182,1160,4.182,1161,4.182,1162,4.182,1163,5.413,1164,5.413,1165,4.182,1166,4.182,1167,4.182,1168,4.182,1169,4.182,1170,4.182,1171,4.182,1172,4.182,1173,4.182,1174,4.182,1175,4.182,1176,4.182,1177,4.182,1178,4.182,1179,4.182,1180,4.182,1181,4.182,1182,4.182,1183,4.182,1184,4.182,1185,4.182,1186,4.182,1187,4.182,1188,4.182,1189,4.182,1190,4.182,1191,4.182,1192,4.182]],["title/modules.html",[72,2.032]],["body/modules.html",[24,0.018,68,0.018,69,0.018,71,2.882,72,2.068,81,2.499,82,2.677,83,2.499,239,3.12,287,3.12,290,3.12,291,2.882,1193,6.92,1194,6.92,1195,6.92,1196,7.183,1197,6.496,1198,6.496]],["title/overview.html",[1199,4.171]],["body/overview.html",[1,3.278,2,1.43,24,0.021,40,3.594,44,1.992,68,0.014,69,0.014,70,0.909,71,3.91,72,1.43,73,1.618,74,1.992,75,1.992,76,1.618,77,1.992,78,1.992,79,2.935,80,2.935,81,3.594,82,3.633,83,3.34,84,2.751,85,1.992,86,1.728,88,1.519,169,3.512,221,3.278,228,3.07,239,3.412,287,4.468,288,2.935,289,2.935,290,3.412,291,3.151,421,2.935,423,2.935,424,2.935,425,3.412,426,3.412,485,1.992,499,1.618,700,2.603,808,2.935,809,2.935,811,2.935,854,2.935,855,2.935,856,2.935,1199,2.935,1200,4.748,1201,4.748,1202,2.935]],["title/properties.html",[9,1.346,901,2.269]],["body/properties.html",[9,1.666,24,0.021,68,0.019,69,0.019,121,2.51,162,1.863,639,4.038,958,4.553,964,4.553,1036,4.553,1121,4.038,1125,4.553,1130,4.553,1131,4.553,1132,4.553,1203,5.335,1204,5.335,1205,5.335]],["title/miscellaneous/variables.html",[937,1.737,995,3.263]],["body/miscellaneous/variables.html",[3,0.282,8,0.441,21,1.2,24,0.022,26,0.877,28,1.788,36,4.623,37,3.392,39,2.037,53,1.506,56,1.95,65,1.424,66,2.456,68,0.013,69,0.013,70,1.206,104,2.016,112,1.512,178,2.65,255,2.457,455,3.453,456,3.453,457,2.457,474,4.883,545,2.839,621,2.771,623,2.771,716,3.124,886,2.771,890,4.883,891,3.893,892,2.771,893,4.501,894,3.893,895,3.893,896,4.501,897,2.457,937,1.881,955,2.771,995,2.457,1054,4.501,1202,2.771,1206,6.027,1207,5.274,1208,4.562,1209,4.562,1210,3.246,1211,5.721,1212,3.246,1213,3.246,1214,3.246,1215,3.246,1216,3.246,1217,3.246,1218,3.246,1219,3.246,1220,3.246,1221,3.246,1222,3.246,1223,3.246,1224,4.562,1225,3.246,1226,3.246,1227,3.246,1228,3.246,1229,3.246,1230,4.562,1231,4.562,1232,3.246,1233,3.246,1234,3.246,1235,4.562,1236,4.562,1237,3.246,1238,3.246,1239,3.246,1240,3.246]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["0.0.3",{"_index":1204,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":508,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["1",{"_index":40,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"overview.html":{}}}],["1.0.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1202,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["1024",{"_index":611,"title":{},"body":{"controllers/HealthController.html":{}}}],["150",{"_index":613,"title":{},"body":{"controllers/HealthController.html":{}}}],["17.13.3",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{}}}],["2024",{"_index":507,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"license.html":{}}}],["2048example",{"_index":1023,"title":{},"body":{"index.html":{}}}],["250",{"_index":610,"title":{},"body":{"controllers/HealthController.html":{}}}],["29",{"_index":538,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["29'})@isdatestring()@transform",{"_index":509,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["29'})@isoptional()@isdatestring()@transform",{"_index":664,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["3.13.0",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":615,"title":{},"body":{"controllers/HealthController.html":{}}}],["4.0.1",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":694,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["5",{"_index":1201,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":695,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["60000",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":412,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["7.1.0",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1200,"title":{},"body":{"overview.html":{}}}],["8.12.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":1162,"title":{},"body":{"license.html":{}}}],["access",{"_index":419,"title":{},"body":{"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["access_token",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontorlservice",{"_index":1,"title":{"injectables/AccessContorlService.html":{}},"body":{"injectables/AccessContorlService.html":{},"modules/AuthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{},"overview.html":{}}}],["accesscontrolservice",{"_index":707,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["accessible",{"_index":1046,"title":{},"body":{"index.html":{}}}],["action",{"_index":1186,"title":{},"body":{"license.html":{}}}],["add",{"_index":999,"title":{},"body":{"index.html":{}}}],["addbearerauth",{"_index":1086,"title":{},"body":{"index.html":{}}}],["admin",{"_index":943,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin/admin.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["admin/todos",{"_index":103,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["admin/users",{"_index":206,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["admindocument",{"_index":1095,"title":{},"body":{"index.html":{}}}],["adminmodule",{"_index":71,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["adminswaggerconfig",{"_index":1094,"title":{},"body":{"index.html":{}}}],["admintodoscontroller",{"_index":90,"title":{"controllers/AdminTodosController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"coverage.html":{}}}],["adminuserscontroller",{"_index":89,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["agent",{"_index":689,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["align",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":967,"title":{},"body":{"index.html":{}}}],["already",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["and/or",{"_index":1154,"title":{},"body":{"license.html":{}}}],["api",{"_index":1036,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apibearerauth",{"_index":147,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["apibody",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["apihideproperty",{"_index":519,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["apihideproperty()@isuuid",{"_index":517,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["apiproperty",{"_index":520,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"index.html":{}}}],["apiproperty({example",{"_index":504,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["apiproperty({required",{"_index":661,"title":{},"body":{"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["apiresponse",{"_index":148,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["apitags",{"_index":149,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{}}}],["apitags('auth",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('health",{"_index":599,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('todos",{"_index":172,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["apitags('users",{"_index":230,"title":{},"body":{"controllers/AdminUsersController.html":{},"index.html":{}}}],["app",{"_index":248,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["app.git",{"_index":988,"title":{},"body":{"index.html":{}}}],["app.listen(3000",{"_index":1097,"title":{},"body":{"index.html":{}}}],["app.module",{"_index":1078,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":239,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["applied",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":287,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["arguments",{"_index":1068,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1190,"title":{},"body":{"license.html":{}}}],["array",{"_index":35,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["associated",{"_index":1141,"title":{},"body":{"license.html":{}}}],["async",{"_index":104,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseConfigModule.html":{},"controllers/TodosController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["aurora",{"_index":275,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["auth",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["auth/entities/roles.entity",{"_index":850,"title":{},"body":{"entities/Users.html":{},"modules/UsersModule.html":{}}}],["authcontroller",{"_index":329,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":1051,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":964,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authguard",{"_index":627,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/LocalGuard.html":{}}}],["authguard('jwt",{"_index":626,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('local",{"_index":647,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["authheader",{"_index":406,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authheader.indexof('bearer",{"_index":409,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authheader.substring(bearerindex",{"_index":411,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authmiddleware",{"_index":307,"title":{"injectables/AuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["authmodule",{"_index":81,"title":{"modules/AuthModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1205,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":965,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1179,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":221,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":581,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["available",{"_index":1198,"title":{},"body":{"modules.html":{}}}],["await",{"_index":178,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":496,"title":{},"body":{"entities/BaseEntity.html":{}}}],["based",{"_index":1061,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":484,"title":{"entities/BaseEntity.html":{}},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"coverage.html":{}}}],["bcrypt",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["bearerindex",{"_index":408,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["bere",{"_index":1132,"title":{},"body":{"license.html":{},"properties.html":{}}}],["body",{"_index":151,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["bogdan",{"_index":1131,"title":{},"body":{"license.html":{},"properties.html":{}}}],["boolean",{"_index":34,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["bootstrap",{"_index":76,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["bootstrap();an",{"_index":1098,"title":{},"body":{"index.html":{}}}],["both",{"_index":1053,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1196,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1193,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1089,"title":{},"body":{"index.html":{}}}],["buildroles",{"_index":14,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["buildroles(roles",{"_index":20,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["cache",{"_index":286,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["canactivate",{"_index":704,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["canactivate(context",{"_index":709,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["cancelled",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cascade",{"_index":763,"title":{},"body":{"entities/Todos.html":{}}}],["cascade'})@joincolumn({name",{"_index":757,"title":{},"body":{"entities/Todos.html":{}}}],["case",{"_index":1057,"title":{},"body":{"index.html":{}}}],["catch",{"_index":416,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["cd",{"_index":1019,"title":{},"body":{"index.html":{}}}],["certain",{"_index":1064,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1014,"title":{},"body":{"index.html":{}}}],["certificate.pemexample",{"_index":1030,"title":{},"body":{"index.html":{}}}],["change",{"_index":1074,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1136,"title":{},"body":{"license.html":{}}}],["check",{"_index":590,"title":{},"body":{"controllers/HealthController.html":{}}}],["checks",{"_index":600,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["checktodoexists",{"_index":105,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["checktodoexists(id",{"_index":111,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["checkuserexists",{"_index":207,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["checkuserexists(id",{"_index":208,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["claim",{"_index":1182,"title":{},"body":{"license.html":{}}}],["class",{"_index":48,"title":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":499,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clone",{"_index":985,"title":{},"body":{"index.html":{}}}],["cluster_adminmodule",{"_index":79,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":80,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_todosmodule",{"_index":808,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_exports",{"_index":811,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_imports",{"_index":810,"title":{},"body":{"modules/TodosModule.html":{}}}],["cluster_todosmodule_providers",{"_index":809,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":854,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":856,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":855,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cockroachdb",{"_index":273,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["code",{"_index":1084,"title":{},"body":{"index.html":{}}}],["colorize",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":731,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["column()@manytoone(undefined",{"_index":754,"title":{},"body":{"entities/Todos.html":{}}}],["column()@unique(['email",{"_index":839,"title":{},"body":{"entities/Users.html":{}}}],["column()@unique(['name",{"_index":727,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{}}}],["column()@unique(['username",{"_index":848,"title":{},"body":{"entities/Users.html":{}}}],["column({default",{"_index":748,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["combine",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combine(timestamp",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combine.log",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["command",{"_index":1109,"title":{},"body":{"index.html":{}}}],["compare(plaintextpassword",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["completed",{"_index":949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compodoc",{"_index":979,"title":{},"body":{"index.html":{}}}],["compression",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":1161,"title":{},"body":{"license.html":{}}}],["config.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["config.module.ts",{"_index":241,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["config/app",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":243,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["configmodule.forroot",{"_index":245,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":576,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_name",{"_index":580,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_password",{"_index":579,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_port",{"_index":577,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_type",{"_index":574,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_user",{"_index":578,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('jwt_secret",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":583,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configuration",{"_index":972,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":969,"title":{},"body":{"index.html":{}}}],["configure",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["conflict",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["connection",{"_index":1191,"title":{},"body":{"license.html":{}}}],["const",{"_index":53,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(todos",{"_index":827,"title":{},"body":{"injectables/TodosService.html":{}}}],["constructor(authservice",{"_index":649,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":631,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(logger",{"_index":683,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["constructor(private",{"_index":176,"title":{},"body":{"controllers/AdminTodosController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["constructor(reflector",{"_index":705,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(todosrepository",{"_index":816,"title":{},"body":{"injectables/TodosService.html":{}}}],["constructor(usersrepository",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(authmiddleware",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestloggermiddleware).forroutes",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":712,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.getclass",{"_index":722,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["context.gethandler",{"_index":721,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["context.switchtohttp().getrequest",{"_index":723,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["contract",{"_index":1187,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1111,"title":{},"body":{"index.html":{}}}],["control",{"_index":1062,"title":{},"body":{"index.html":{}}}],["control.service",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["control.service.ts",{"_index":7,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["control.service.ts:11",{"_index":38,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:12",{"_index":19,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:19",{"_index":22,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:28",{"_index":33,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["controller",{"_index":99,"title":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{}},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"coverage.html":{},"index.html":{}}}],["controller('admin/todos",{"_index":175,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["controller('admin/users",{"_index":231,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":601,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('todos",{"_index":793,"title":{},"body":{"controllers/TodosController.html":{}}}],["controller('users",{"_index":1055,"title":{},"body":{"index.html":{}}}],["controllers",{"_index":88,"title":{},"body":{"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"overview.html":{}}}],["cookie",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":1156,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1139,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1129,"title":{},"body":{"license.html":{}}}],["cors",{"_index":976,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":877,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":106,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(@body",{"_index":187,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["create(@req",{"_index":799,"title":{},"body":{"controllers/TodosController.html":{}}}],["create(createtododto",{"_index":116,"title":{},"body":{"controllers/AdminTodosController.html":{},"injectables/TodosService.html":{}}}],["create(createuserdto",{"_index":210,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["create(request",{"_index":767,"title":{},"body":{"controllers/TodosController.html":{}}}],["created",{"_index":185,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["created'})@apiresponse({status",{"_index":123,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["created_at",{"_index":487,"title":{},"body":{"entities/BaseEntity.html":{}}}],["createdatecolumn",{"_index":490,"title":{},"body":{"entities/BaseEntity.html":{}}}],["createlogger(instancelogger",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtododto",{"_index":117,"title":{"classes/CreateTodoDto.html":{}},"body":{"controllers/AdminTodosController.html":{},"classes/CreateTodoDto.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["createtododto.user_id",{"_index":800,"title":{},"body":{"controllers/TodosController.html":{}}}],["createuser(@body",{"_index":1106,"title":{},"body":{"index.html":{}}}],["createuserdto",{"_index":211,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["createuserdto.username",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["csr.pem",{"_index":1028,"title":{},"body":{"index.html":{}}}],["csr.pemexample",{"_index":1026,"title":{},"body":{"index.html":{}}}],["currentrole",{"_index":45,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["damages",{"_index":1183,"title":{},"body":{"license.html":{}}}],["darius",{"_index":1130,"title":{},"body":{"license.html":{},"properties.html":{}}}],["database",{"_index":268,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{},"index.html":{}}}],["databaseconfigmodule",{"_index":290,"title":{"modules/DatabaseConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":489,"title":{},"body":{"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/Todos.html":{}}}],["date(value",{"_index":539,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["db",{"_index":602,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_host",{"_index":277,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_host=localhost",{"_index":1006,"title":{},"body":{"index.html":{}}}],["db_name",{"_index":285,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_name=your_database",{"_index":1010,"title":{},"body":{"index.html":{}}}],["db_password",{"_index":283,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_password=your_password",{"_index":1009,"title":{},"body":{"index.html":{}}}],["db_port",{"_index":279,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_port=5432",{"_index":1007,"title":{},"body":{"index.html":{}}}],["db_type",{"_index":269,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_type=postgres",{"_index":1005,"title":{},"body":{"index.html":{}}}],["db_user",{"_index":281,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_user=your_username",{"_index":1008,"title":{},"body":{"index.html":{}}}],["dd",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":1143,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1192,"title":{},"body":{"license.html":{}}}],["debug",{"_index":265,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["declarations",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1049,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":118,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"entities/Users.html":{},"index.html":{}}}],["decorators/roles.decorator",{"_index":717,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["default",{"_index":36,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/Todos.html":{},"entities/Users.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":257,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["default('info",{"_index":267,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["default('postgres",{"_index":276,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["defined",{"_index":18,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":152,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["delete(':id",{"_index":200,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["delete(':id')@apiresponse({status",{"_index":139,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["delete(':id')@roles(roleenum.user",{"_index":782,"title":{},"body":{"controllers/TodosController.html":{}}}],["delete('me",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('me')@useguards(jwtguard)@apibearerauth()@apiresponse({status",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(@req",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(request",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleted",{"_index":201,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{}}}],["deleted'})@apiresponse({status",{"_index":140,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{}}}],["dependencies",{"_index":73,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":121,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"properties.html":{}}}],["description'})@isoptional()@isstring()@transform",{"_index":662,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["description'})@isstring()@transform",{"_index":505,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["development",{"_index":584,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{}}}],["devlogger",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["directory",{"_index":998,"title":{},"body":{"index.html":{}}}],["disable",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["disk",{"_index":603,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":593,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":1152,"title":{},"body":{"license.html":{}}}],["doccontributing",{"_index":1110,"title":{},"body":{"index.html":{}}}],["document",{"_index":1090,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":878,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documentbuilder",{"_index":1077,"title":{},"body":{"index.html":{}}}],["doe",{"_index":562,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["doe'})@isnotempty()@isstring()@minlength(2)@maxlength(20)@transform",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isoptional()@isstring()@transform",{"_index":675,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["don't",{"_index":1102,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":787,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["dto/login.dto",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["dto/query",{"_index":788,"title":{},"body":{"controllers/TodosController.html":{}}}],["dto/update",{"_index":792,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["due_date",{"_index":501,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/Todos.html":{}}}],["e",{"_index":417,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["email",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{},"entities/Users.html":{}}}],["encrypt",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["encrypt(createuserdto.password",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["encrypt(updateuserdto.password",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["end",{"_index":1099,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1044,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1040,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":1050,"title":{},"body":{"index.html":{}}}],["entities",{"_index":485,"title":{},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/todo",{"_index":813,"title":{},"body":{"modules/TodosModule.html":{}}}],["entities/todo.entity",{"_index":790,"title":{},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{}}}],["entities/users.entity",{"_index":858,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":483,"title":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"coverage.html":{}}}],["enum",{"_index":512,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["enumerations",{"_index":938,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/roles.enum",{"_index":43,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["enums/todo",{"_index":530,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["env",{"_index":996,"title":{},"body":{"index.html":{}}}],["environment",{"_index":994,"title":{},"body":{"index.html":{}}}],["error",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.log",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorlogstyle",{"_index":620,"title":{},"body":{"modules/HealthModule.html":{}}}],["errors",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eslint",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["eslint/no",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["event",{"_index":1178,"title":{},"body":{"license.html":{}}}],["example",{"_index":534,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":710,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["exists",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":442,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":47,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["exports",{"_index":78,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":498,"title":{},"body":{"entities/BaseEntity.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{}}}],["extractjwt",{"_index":636,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":643,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":67,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["features",{"_index":971,"title":{},"body":{"index.html":{}}}],["feel",{"_index":1115,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1142,"title":{},"body":{"license.html":{}}}],["findall",{"_index":107,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["findall(@query",{"_index":190,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["findall(@req",{"_index":802,"title":{},"body":{"controllers/TodosController.html":{}}}],["findall(query",{"_index":126,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["findall(request",{"_index":772,"title":{},"body":{"controllers/TodosController.html":{}}}],["findall(where",{"_index":821,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":108,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":193,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["findone(@req",{"_index":803,"title":{},"body":{"controllers/TodosController.html":{}}}],["findone(id",{"_index":133,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["findone(request",{"_index":776,"title":{},"body":{"controllers/TodosController.html":{}}}],["findoptionswhere",{"_index":161,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["first_name",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{},"entities/Users.html":{}}}],["fitness",{"_index":1174,"title":{},"body":{"license.html":{}}}],["following",{"_index":1000,"title":{},"body":{"index.html":{},"license.html":{}}}],["forbidden",{"_index":124,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["forbidden'})@apiresponse({status",{"_index":135,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["forget",{"_index":1103,"title":{},"body":{"index.html":{}}}],["format",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":136,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["found'})@apiresponse({status",{"_index":130,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["founduser",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["founduser[0",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["foundusers",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["foundusers[0",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["framework",{"_index":962,"title":{},"body":{"index.html":{}}}],["free",{"_index":1116,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":1039,"title":{},"body":{"index.html":{}}}],["function",{"_index":898,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["functions",{"_index":954,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1159,"title":{},"body":{"license.html":{}}}],["general",{"_index":968,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1011,"title":{},"body":{"index.html":{}}}],["genrsa",{"_index":1021,"title":{},"body":{"index.html":{}}}],["gensalt(salt_rounds",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":192,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["get(':id')@apiresponse({status",{"_index":134,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["get(':id')@roles(roleenum.user",{"_index":777,"title":{},"body":{"controllers/TodosController.html":{}}}],["get('me",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me')@useguards(jwtguard)@apibearerauth()@apiresponse({status",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apiresponse({status",{"_index":128,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["get()@healthcheck",{"_index":591,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@roles(roleenum.user",{"_index":773,"title":{},"body":{"controllers/TodosController.html":{}}}],["getting",{"_index":956,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettodoownership",{"_index":766,"title":{},"body":{"controllers/TodosController.html":{}}}],["gettodoownership(request",{"_index":779,"title":{},"body":{"controllers/TodosController.html":{}}}],["git",{"_index":986,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1135,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1197,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":700,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":702,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt.guard",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local.guard",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["guest",{"_index":945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hash(plaintextpassword",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":589,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["health.controller",{"_index":617,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":594,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":595,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":587,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":291,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["helmet",{"_index":920,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helpers",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["helpers.ts",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":1134,"title":{},"body":{"license.html":{}}}],["hh:mm:ss",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hierarchies",{"_index":11,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy",{"_index":54,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(currentrole",{"_index":62,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(requiredrole",{"_index":64,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.set(role",{"_index":58,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["higher",{"_index":1070,"title":{},"body":{"index.html":{}}}],["hold",{"_index":951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["holders",{"_index":1180,"title":{},"body":{"license.html":{}}}],["host",{"_index":575,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["http",{"_index":263,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["http://localhost:3000/api",{"_index":1037,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/api/admin",{"_index":1043,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":153,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["httpexception('access",{"_index":420,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["httpexception('forbidden",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["httpexception('invalid",{"_index":418,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["httpexception('not",{"_index":794,"title":{},"body":{"controllers/TodosController.html":{}}}],["httpexception('todo",{"_index":181,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["httpexception('user",{"_index":233,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{}}}],["https",{"_index":1015,"title":{},"body":{"index.html":{}}}],["https://github.com/beredarius/nestjs",{"_index":987,"title":{},"body":{"index.html":{}}}],["https://opensource.org/licenses/mit",{"_index":1088,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":154,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["httpstatus.conflict",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.created",{"_index":184,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["httpstatus.forbidden",{"_index":186,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["httpstatus.not_found",{"_index":182,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["httpstatus.ok",{"_index":189,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["httpstatus.unauthorized",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["id",{"_index":114,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"guards/RoleGuard.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":644,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":405,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["implied",{"_index":1170,"title":{},"body":{"license.html":{}}}],["import",{"_index":41,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["imports",{"_index":91,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["improvements",{"_index":1114,"title":{},"body":{"index.html":{}}}],["in'})@apiresponse({status",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["in_progress",{"_index":947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["include",{"_index":1092,"title":{},"body":{"index.html":{}}}],["included",{"_index":1165,"title":{},"body":{"license.html":{}}}],["including",{"_index":1146,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["info.level",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info.message",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info.timestamp",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["information",{"_index":1128,"title":{},"body":{"index.html":{}}}],["inject",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":826,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(users",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":989,"title":{},"body":{"index.html":{}}}],["installation",{"_index":984,"title":{},"body":{"index.html":{}}}],["instance",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["instancelogger",{"_index":895,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":44,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["interfaces",{"_index":624,"title":{},"body":{"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized",{"_index":16,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized(undefined",{"_index":31,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["isauthorizedparams",{"_index":32,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["isdatestring",{"_index":521,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["isemail",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["isenum",{"_index":522,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["isenum(roleenum",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["isenum(todostatusenum",{"_index":540,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["isnotempty",{"_index":523,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isoptional",{"_index":670,"title":{},"body":{"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["ispasswordmatching",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":524,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"index.html":{}}}],["isstrongpassword",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issue",{"_index":1118,"title":{},"body":{"index.html":{}}}],["isuuid",{"_index":525,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["jest",{"_index":981,"title":{},"body":{"index.html":{}}}],["john",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["john'})@isnotempty()@isstring()@minlength(2)@maxlength(20)@transform",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isoptional()@isstring()@transform",{"_index":673,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["john.doe",{"_index":1101,"title":{},"body":{"index.html":{}}}],["john.doe@email.com",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["john.doe@email.com'})@isnotempty()@isstring()@isemail()@transform",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@email.com'})@isoptional()@isstring()@isemail()@transform",{"_index":671,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["johndoe",{"_index":563,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryUserDto.html":{}}}],["johndoe'})@isnotempty()@isstring()@minlength(5)@maxlength(20)@transform",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe'})@isoptional()@isstring()@transform",{"_index":679,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["johndoe'})@isstring()@isnotempty()@transform",{"_index":659,"title":{},"body":{"classes/LoginDto.html":{}}}],["joi",{"_index":242,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["joi.number().default(5432",{"_index":280,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().port().default(3000",{"_index":250,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":247,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string",{"_index":252,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required",{"_index":284,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('localhost",{"_index":278,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('postgres",{"_index":282,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('secret",{"_index":259,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joincolumn",{"_index":759,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["json",{"_index":623,"title":{},"body":{"modules/HealthModule.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":404,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["jwt",{"_index":639,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"properties.html":{}}}],["jwt_secret",{"_index":258,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_secret=your_secret",{"_index":1003,"title":{},"body":{"index.html":{}}}],["jwtfromrequest",{"_index":642,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":163,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/JwtGuard.html":{},"controllers/TodosController.html":{},"coverage.html":{},"index.html":{}}}],["jwtmodule",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":425,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1025,"title":{},"body":{"index.html":{}}}],["key.pem",{"_index":1022,"title":{},"body":{"index.html":{}}}],["kind",{"_index":1169,"title":{},"body":{"license.html":{}}}],["know",{"_index":1105,"title":{},"body":{"index.html":{}}}],["last_name",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{},"entities/Users.html":{}}}],["legend",{"_index":74,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["lets",{"_index":1104,"title":{},"body":{"index.html":{}}}],["level",{"_index":1054,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["liability",{"_index":1184,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1181,"title":{},"body":{"license.html":{}}}],["license",{"_index":1121,"title":{"license.html":{}},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1123,"title":{},"body":{"index.html":{}}}],["limit",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["limitation",{"_index":1147,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1171,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":975,"title":{},"body":{"index.html":{}}}],["line",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["linting",{"_index":982,"title":{},"body":{"index.html":{}}}],["local",{"_index":654,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localguard",{"_index":360,"title":{"injectables/LocalGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":426,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log_level",{"_index":260,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["log_level=debug",{"_index":1004,"title":{},"body":{"index.html":{}}}],["logged",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["logger.log('authmiddleware",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.log('requestloggermiddleware",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":682,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:5",{"_index":684,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["logger.middleware.ts:8",{"_index":685,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["logging",{"_index":586,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"index.html":{}}}],["login",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":362,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.username",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@apiresponse({status",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["look",{"_index":1100,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":1073,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":760,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["map",{"_index":55,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["mariadb",{"_index":272,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["matching",{"_index":69,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["matchpassword(founduser.password",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxlength",{"_index":526,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":536,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["me(@req",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(request",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["memory",{"_index":604,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":596,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":1173,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1150,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1058,"title":{},"body":{"index.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["middleware/auth.middleware",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/request",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":527,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":535,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":937,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1125,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mkdir",{"_index":1017,"title":{},"body":{"index.html":{}}}],["mm",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["moderator",{"_index":944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["modify",{"_index":1149,"title":{},"body":{"license.html":{}}}],["module",{"_index":70,"title":{"modules/AdminModule.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":72,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":274,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["more",{"_index":1127,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":271,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["name",{"_index":25,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":993,"title":{},"body":{"index.html":{}}}],["nest",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["nestfactory",{"_index":1079,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":1080,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":958,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":244,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/jwt",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":150,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"controllers/TodosController.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/terminus",{"_index":598,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":572,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":402,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["new",{"_index":56,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateTodoDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LocalStrategy.html":{},"classes/QueryTodoDto.html":{},"controllers/TodosController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":399,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/RequestLoggerMiddleware.html":{},"injectables/UsersService.html":{}}}],["nextfunction",{"_index":400,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["node.js",{"_index":961,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":251,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["node_env=development",{"_index":1002,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1177,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1163,"title":{},"body":{"license.html":{}}}],["null",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":39,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":714,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["obtaining",{"_index":1138,"title":{},"body":{"license.html":{}}}],["on_hold",{"_index":950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ondelete",{"_index":756,"title":{},"body":{"entities/Todos.html":{}}}],["one",{"_index":1069,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":732,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["onetomany(undefined",{"_index":729,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["open",{"_index":1117,"title":{},"body":{"index.html":{}}}],["openssl",{"_index":1020,"title":{},"body":{"index.html":{}}}],["optional",{"_index":27,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["order",{"_index":1047,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1189,"title":{},"body":{"license.html":{}}}],["out",{"_index":86,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overdue",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overview",{"_index":1199,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":901,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["param",{"_index":155,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["param('id",{"_index":804,"title":{},"body":{"controllers/TodosController.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":836,"title":{},"body":{"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createtododto",{"_index":835,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["partialtype(createuserdto",{"_index":837,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":1175,"title":{},"body":{"license.html":{}}}],["passport",{"_index":638,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":640,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":629,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password'})@isstring()@isnotempty",{"_index":657,"title":{},"body":{"classes/LoginDto.html":{}}}],["password123",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123@'})@isnotempty()@isstring()@minlength(8)@maxlength(20)@isstrongpassword",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":156,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["patch(':id",{"_index":195,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["patch(':id')@apiresponse({status",{"_index":144,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["patch(':id')@roles(roleenum.user",{"_index":785,"title":{},"body":{"controllers/TodosController.html":{}}}],["patch('me",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('me')@useguards(jwtguard)@apibearerauth()@apiresponse({status",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":608,"title":{},"body":{"controllers/HealthController.html":{}}}],["payload",{"_index":635,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":511,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/Todos.html":{},"miscellaneous/enumerations.html":{}}}],["pending'})@manytoone(undefined",{"_index":749,"title":{},"body":{"entities/Todos.html":{}}}],["permission",{"_index":1133,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1157,"title":{},"body":{"license.html":{}}}],["person",{"_index":1137,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1158,"title":{},"body":{"license.html":{}}}],["pg",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["plaintextpassword",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":249,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["port=3000",{"_index":1001,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1167,"title":{},"body":{"license.html":{}}}],["post",{"_index":157,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["post('login",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(localguard)@apibody({type",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apiresponse({status",{"_index":119,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["post()@roles(roleenum.user",{"_index":768,"title":{},"body":{"controllers/TodosController.html":{}}}],["powerful",{"_index":960,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":102,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{}}}],["prettier",{"_index":983,"title":{},"body":{"index.html":{}}}],["pretty",{"_index":622,"title":{},"body":{"modules/HealthModule.html":{}}}],["primarygeneratedcolumn",{"_index":497,"title":{},"body":{"entities/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":492,"title":{},"body":{"entities/BaseEntity.html":{}}}],["printf(info",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["priority",{"_index":12,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"index.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["process.env.jwt_secret",{"_index":415,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["process.env.log_level",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":621,"title":{},"body":{"modules/HealthModule.html":{},"miscellaneous/variables.html":{}}}],["prodlogger",{"_index":896,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":255,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["project",{"_index":1122,"title":{},"body":{"index.html":{}}}],["promise",{"_index":713,"title":{},"body":{"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"index.html":{},"properties.html":{}}}],["protect",{"_index":1048,"title":{},"body":{"index.html":{}}}],["protected",{"_index":1045,"title":{},"body":{"index.html":{}}}],["provide",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1072,"title":{},"body":{"index.html":{},"license.html":{}}}],["providers",{"_index":77,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":963,"title":{},"body":{"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"index.html":{}}}],["publish",{"_index":1151,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1120,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1176,"title":{},"body":{"license.html":{}}}],["query",{"_index":132,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{}}}],["querytododto",{"_index":127,"title":{"classes/QueryTodoDto.html":{}},"body":{"controllers/AdminTodosController.html":{},"classes/QueryTodoDto.html":{},"controllers/TodosController.html":{},"coverage.html":{}}}],["queryuserdto",{"_index":214,"title":{"classes/QueryUserDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/QueryUserDto.html":{},"coverage.html":{}}}],["rate",{"_index":974,"title":{},"body":{"index.html":{}}}],["rbac",{"_index":973,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":177,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["recommended",{"_index":1016,"title":{},"body":{"index.html":{}}}],["referencedcolumnname",{"_index":751,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["reflect",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":706,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["register",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["register(@req",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(createuserdto",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(request",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered'})@apiresponse({status",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["regular/admin",{"_index":1075,"title":{},"body":{"index.html":{}}}],["remove",{"_index":109,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":202,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["remove(@req",{"_index":807,"title":{},"body":{"controllers/TodosController.html":{}}}],["remove(id",{"_index":138,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["remove(request",{"_index":781,"title":{},"body":{"controllers/TodosController.html":{}}}],["removed",{"_index":806,"title":{},"body":{"controllers/TodosController.html":{}}}],["removed'})@apiresponse({status",{"_index":783,"title":{},"body":{"controllers/TodosController.html":{}}}],["repository",{"_index":817,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["req.get('user",{"_index":688,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.headers.authorization",{"_index":407,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["req.ip",{"_index":690,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.method",{"_index":697,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.originalurl",{"_index":687,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.url",{"_index":698,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["request",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["request.user",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestloggermiddleware",{"_index":312,"title":{"injectables/RequestLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["required",{"_index":253,"title":{},"body":{"modules/AppConfigModule.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["requiredpriority",{"_index":63,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredrole",{"_index":46,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["requiredroles",{"_index":719,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["res",{"_index":397,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["res.on('finish",{"_index":691,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["res.statuscode",{"_index":693,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["res.statusmessage",{"_index":699,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["reset",{"_index":85,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":398,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["restrict",{"_index":1063,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1145,"title":{},"body":{"license.html":{}}}],["result",{"_index":198,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["results",{"_index":68,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":65,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":1148,"title":{},"body":{"license.html":{}}}],["rm",{"_index":1031,"title":{},"body":{"index.html":{}}}],["role",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role.users",{"_index":853,"title":{},"body":{"entities/Users.html":{}}}],["role.users)@joincolumn({name",{"_index":845,"title":{},"body":{"entities/Users.html":{}}}],["role_key",{"_index":716,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleenum",{"_index":21,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/QueryUserDto.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roleenum.admin",{"_index":51,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/TodosController.html":{}}}],["roleenum.moderator",{"_index":797,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.moderator)@apiresponse({status",{"_index":769,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.moderator)@useguards(roleguard)@apiresponse({status",{"_index":774,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.user",{"_index":50,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["roleenum})@isenum(roleenum)@transform",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["roleenum})@isoptional()@isenum(roleenum)@transform",{"_index":677,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["roleguard",{"_index":701,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["roles",{"_index":28,"title":{"entities/Roles.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/HealthController.html":{},"entities/Roles.html":{},"controllers/TodosController.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles(roleenum.admin",{"_index":173,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["roles(roleenum.user",{"_index":798,"title":{},"body":{"controllers/TodosController.html":{},"index.html":{}}}],["roles.foreach(role",{"_index":57,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["root",{"_index":997,"title":{},"body":{"index.html":{}}}],["route",{"_index":1042,"title":{},"body":{"index.html":{}}}],["routes",{"_index":977,"title":{},"body":{"index.html":{}}}],["run",{"_index":1108,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":715,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"dependencies.html":{}}}],["salt",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt_rounds",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":1071,"title":{},"body":{"index.html":{}}}],["secret",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":645,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretsexample",{"_index":1018,"title":{},"body":{"index.html":{}}}],["security",{"_index":970,"title":{},"body":{"index.html":{}}}],["see",{"_index":1126,"title":{},"body":{"index.html":{}}}],["self",{"_index":1012,"title":{},"body":{"index.html":{}}}],["sell",{"_index":1155,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1041,"title":{},"body":{"index.html":{}}}],["server",{"_index":1033,"title":{},"body":{"index.html":{}}}],["set",{"_index":991,"title":{},"body":{"index.html":{}}}],["setdescription('starter",{"_index":1083,"title":{},"body":{"index.html":{}}}],["setlicense('mit",{"_index":1087,"title":{},"body":{"index.html":{}}}],["setmetadata(role_key",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('todo",{"_index":1082,"title":{},"body":{"index.html":{}}}],["setversion('1.0",{"_index":1085,"title":{},"body":{"index.html":{}}}],["sha256",{"_index":1024,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1164,"title":{},"body":{"license.html":{}}}],["signed",{"_index":1013,"title":{},"body":{"index.html":{}}}],["signkey",{"_index":1029,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{}}}],["silly",{"_index":266,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["software",{"_index":1140,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AdminModule.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specified",{"_index":1060,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":955,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../password",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../todo",{"_index":940,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../winston.logger.ts",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/admin/admin.module.ts",{"_index":87,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/todos/admin",{"_index":100,"title":{},"body":{"controllers/AdminTodosController.html":{},"coverage.html":{}}}],["src/admin/users/admin",{"_index":204,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:39",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:74",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:98",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":96,"title":{},"body":{"modules/AdminModule.html":{},"modules/TodosModule.html":{}}}],["src/auth/auth.module.ts",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":222,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["src/auth/auth.service.ts",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":167,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":656,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":660,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":658,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/roles.entity.ts",{"_index":726,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/auth/entities/roles.entity.ts:12",{"_index":730,"title":{},"body":{"entities/Roles.html":{}}}],["src/auth/entities/roles.entity.ts:9",{"_index":728,"title":{},"body":{"entities/Roles.html":{}}}],["src/auth/enums/roles.enum",{"_index":166,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/QueryUserDto.html":{},"controllers/TodosController.html":{}}}],["src/auth/enums/roles.enum.ts",{"_index":942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guards/jwt.guard",{"_index":164,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":625,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local.guard.ts",{"_index":646,"title":{},"body":{"injectables/LocalGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":789,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":703,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:10",{"_index":834,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":708,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/roles.guard.ts:20",{"_index":711,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":833,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":628,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":634,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":632,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":648,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:13",{"_index":652,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":650,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/app",{"_index":240,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/config/database",{"_index":569,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["src/config/entities/base.entity",{"_index":734,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["src/config/entities/base.entity.ts",{"_index":486,"title":{},"body":{"entities/BaseEntity.html":{},"coverage.html":{}}}],["src/config/entities/base.entity.ts:12",{"_index":493,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/config/entities/base.entity.ts:15",{"_index":491,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/config/entities/base.entity.ts:18",{"_index":495,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/health/health.controller.ts",{"_index":588,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:29",{"_index":592,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":616,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/lib/password",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logger/winston.logger.ts",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":897,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/auth.middleware.ts",{"_index":394,"title":{},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["src/middleware/auth.middleware.ts:7",{"_index":401,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/middleware/request",{"_index":681,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["src/todos/dto/create",{"_index":159,"title":{},"body":{"controllers/AdminTodosController.html":{},"classes/CreateTodoDto.html":{},"coverage.html":{}}}],["src/todos/dto/query",{"_index":165,"title":{},"body":{"controllers/AdminTodosController.html":{},"classes/QueryTodoDto.html":{},"coverage.html":{}}}],["src/todos/dto/update",{"_index":171,"title":{},"body":{"controllers/AdminTodosController.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["src/todos/entities/todo",{"_index":738,"title":{},"body":{"entities/TodoStatus.html":{},"coverage.html":{}}}],["src/todos/entities/todo.entity",{"_index":168,"title":{},"body":{"controllers/AdminTodosController.html":{},"entities/Users.html":{}}}],["src/todos/entities/todo.entity.ts",{"_index":745,"title":{},"body":{"entities/Todos.html":{},"coverage.html":{}}}],["src/todos/entities/todo.entity.ts:12",{"_index":746,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:15",{"_index":747,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:20",{"_index":752,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:25",{"_index":758,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:9",{"_index":753,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/enums/todo",{"_index":946,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/todos/todos.controller.ts",{"_index":765,"title":{},"body":{"controllers/TodosController.html":{},"coverage.html":{}}}],["src/todos/todos.controller.ts:100",{"_index":786,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:112",{"_index":784,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:34",{"_index":780,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:55",{"_index":771,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:71",{"_index":775,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:88",{"_index":778,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.module",{"_index":97,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/todos/todos.module.ts",{"_index":812,"title":{},"body":{"modules/TodosModule.html":{}}}],["src/todos/todos.service",{"_index":170,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["src/todos/todos.service.ts",{"_index":815,"title":{},"body":{"injectables/TodosService.html":{},"coverage.html":{}}}],["src/todos/todos.service.ts:12",{"_index":820,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:16",{"_index":822,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:20",{"_index":823,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:24",{"_index":825,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:28",{"_index":824,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:9",{"_index":818,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/users/dto/create",{"_index":223,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/query",{"_index":225,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/QueryUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":226,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":227,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Todos.html":{}}}],["src/users/entities/users.entity.ts",{"_index":838,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:12",{"_index":842,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:16",{"_index":849,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:20",{"_index":840,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":843,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:28",{"_index":846,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":847,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:9",{"_index":841,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.module",{"_index":98,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":857,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":229,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":585,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["stack",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1032,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1034,"title":{},"body":{"index.html":{}}}],["started",{"_index":957,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":959,"title":{},"body":{"index.html":{}}}],["statements",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":183,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{}}}],["status.entity",{"_index":761,"title":{},"body":{"entities/Todos.html":{},"modules/TodosModule.html":{}}}],["status.entity.ts",{"_index":739,"title":{},"body":{"entities/TodoStatus.html":{},"coverage.html":{}}}],["status.entity.ts:12",{"_index":740,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.entity.ts:15",{"_index":743,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.entity.ts:9",{"_index":741,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.enum",{"_index":531,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{}}}],["status.enum.ts",{"_index":941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status.todos",{"_index":762,"title":{},"body":{"entities/Todos.html":{}}}],["status.todos)@joincolumn({name",{"_index":750,"title":{},"body":{"entities/Todos.html":{}}}],["statuscode",{"_index":692,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["strategies/jwt.strategy",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":637,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":112,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1160,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1153,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1119,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":1166,"title":{},"body":{"license.html":{}}}],["suggestions",{"_index":1113,"title":{},"body":{"index.html":{}}}],["super",{"_index":641,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1194,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1195,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":978,"title":{},"body":{"index.html":{}}}],["swaggerconfig",{"_index":1081,"title":{},"body":{"index.html":{}}}],["swaggermodule",{"_index":1076,"title":{},"body":{"index.html":{}}}],["swaggermodule.createdocument(app",{"_index":1091,"title":{},"body":{"index.html":{}}}],["swaggermodule.setup('api",{"_index":1093,"title":{},"body":{"index.html":{}}}],["swaggermodule.setup('api/admin",{"_index":1096,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":582,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["table",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":1067,"title":{},"body":{"index.html":{}}}],["terminusmodule",{"_index":618,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminusmodule.forroot",{"_index":619,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":256,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["testing",{"_index":980,"title":{},"body":{"index.html":{}}}],["this.accesscontrolservice.isauthorized",{"_index":724,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["this.authservice.register(createuserdto",{"_index":234,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{}}}],["this.authservice.update(request.user.id",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":655,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.buildroles([roleenum.guest",{"_index":49,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.buildroles([roleenum.moderator",{"_index":52,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.checktodoexists(id",{"_index":194,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["this.checkuserexists(id",{"_index":236,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.db.pingcheck('database",{"_index":606,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage('storage",{"_index":607,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.gettodoownership(request",{"_index":805,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.health.check",{"_index":605,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.hierarchies",{"_index":61,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.hierarchies.push(hierarchy",{"_index":60,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.jwtservice.sign(result",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(user",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":696,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["this.logger.log(`[${req.method",{"_index":686,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":612,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":614,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.priority",{"_index":59,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":720,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["this.todosrepository.delete(id",{"_index":832,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.find",{"_index":829,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.findone",{"_index":830,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.save",{"_index":831,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.save(createtododto",{"_index":828,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosservice.create(createtododto",{"_index":188,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["this.todosservice.findall(where",{"_index":191,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["this.todosservice.findone(id",{"_index":179,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["this.todosservice.remove(id",{"_index":203,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["this.todosservice.update(id",{"_index":199,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{}}}],["this.usersrepository.delete(id",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(createuserdto",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(user",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1107,"title":{},"body":{"index.html":{}}}],["this.usersservice.findall",{"_index":1059,"title":{},"body":{"index.html":{}}}],["this.usersservice.findall(where",{"_index":235,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.findone(id",{"_index":232,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.remove(id",{"_index":238,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.remove(request.user.id",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.update(id",{"_index":237,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{}}}],["threshold",{"_index":609,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttlerguard",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":180,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/LocalStrategy.html":{},"controllers/TodosController.html":{}}}],["timestamp",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":502,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"entities/Todos.html":{}}}],["title'})@isnotempty()@isstring()@minlength(5)@maxlength(20)@transform",{"_index":515,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["title'})@isoptional()@isstring()@transform",{"_index":668,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["todo",{"_index":122,"title":{},"body":{"controllers/AdminTodosController.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"entities/Users.html":{}}}],["todo.dto",{"_index":160,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{}}}],["todo.dto.ts",{"_index":500,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["todo.dto.ts:11",{"_index":669,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["todo.dto.ts:17",{"_index":663,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["todo.dto.ts:21",{"_index":516,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:23",{"_index":665,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["todo.dto.ts:26",{"_index":506,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:31",{"_index":510,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:33",{"_index":667,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["todo.dto.ts:39",{"_index":514,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:43",{"_index":518,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.entity",{"_index":744,"title":{},"body":{"entities/TodoStatus.html":{}}}],["todo.status",{"_index":742,"title":{},"body":{"entities/TodoStatus.html":{}}}],["todo.user_id",{"_index":795,"title":{},"body":{"controllers/TodosController.html":{},"entities/Users.html":{}}}],["todos",{"_index":129,"title":{"entities/Todos.html":{}},"body":{"controllers/AdminTodosController.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"coverage.html":{}}}],["todos.controller",{"_index":93,"title":{},"body":{"modules/AdminModule.html":{},"modules/TodosModule.html":{}}}],["todos.controller.ts",{"_index":101,"title":{},"body":{"controllers/AdminTodosController.html":{},"coverage.html":{}}}],["todos.controller.ts:33",{"_index":113,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.controller.ts:46",{"_index":125,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.controller.ts:53",{"_index":131,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.controller.ts:63",{"_index":137,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.controller.ts:73",{"_index":146,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.controller.ts:85",{"_index":141,"title":{},"body":{"controllers/AdminTodosController.html":{}}}],["todos.service",{"_index":791,"title":{},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{}}}],["todos/admin",{"_index":92,"title":{},"body":{"modules/AdminModule.html":{}}}],["todos/todos.module",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["todoscontroller",{"_index":764,"title":{"controllers/TodosController.html":{}},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{},"coverage.html":{}}}],["todosmodule",{"_index":82,"title":{"modules/TodosModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/TodosModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["todosrepository",{"_index":819,"title":{},"body":{"injectables/TodosService.html":{}}}],["todosservice",{"_index":169,"title":{"injectables/TodosService.html":{}},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"coverage.html":{},"overview.html":{}}}],["todostatus",{"_index":737,"title":{"entities/TodoStatus.html":{}},"body":{"entities/TodoStatus.html":{},"entities/Todos.html":{},"modules/TodosModule.html":{},"coverage.html":{}}}],["todostatusenum",{"_index":529,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/QueryTodoDto.html":{},"miscellaneous/enumerations.html":{}}}],["todostatusenum})@isenum(todostatusenum)@transform",{"_index":513,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todostatusenum})@isoptional()@isenum(todostatusenum)@transform",{"_index":666,"title":{},"body":{"classes/QueryTodoDto.html":{}}}],["together",{"_index":1066,"title":{},"body":{"index.html":{}}}],["token",{"_index":410,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["tokendto",{"_index":718,"title":{"classes/TokenDto.html":{}},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["tort",{"_index":1188,"title":{},"body":{"license.html":{}}}],["transform",{"_index":532,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["transformer",{"_index":533,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"dependencies.html":{}}}],["transports",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.console",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.file",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":66,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":413,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["ttl",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":26,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":162,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"properties.html":{}}}],["typeormhealthindicator",{"_index":597,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":570,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([todos",{"_index":814,"title":{},"body":{"modules/TodosModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":860,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":573,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["typeormmoduleoptions",{"_index":571,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["typescript",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["ui",{"_index":1038,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":770,"title":{},"body":{"controllers/TodosController.html":{}}}],["unauthorizedexception",{"_index":653,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":120,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["under",{"_index":1124,"title":{},"body":{"index.html":{}}}],["unique",{"_index":733,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["unique(['email",{"_index":852,"title":{},"body":{"entities/Users.html":{}}}],["unique(['name",{"_index":736,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{}}}],["unique(['username",{"_index":851,"title":{},"body":{"entities/Users.html":{}}}],["unknown",{"_index":115,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{}}}],["unused",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":992,"title":{},"body":{"index.html":{}}}],["update",{"_index":110,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":197,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{}}}],["update(@req",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["update(id",{"_index":142,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["update(request",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["updated",{"_index":196,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["updated'})@apiresponse({status",{"_index":145,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["updated_at",{"_index":488,"title":{},"body":{"entities/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":494,"title":{},"body":{"entities/BaseEntity.html":{}}}],["updateduser",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatetododto",{"_index":143,"title":{"classes/UpdateTodoDto.html":{}},"body":{"controllers/AdminTodosController.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":219,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.password",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdtocopy",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdtocopy.password",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["usage",{"_index":1035,"title":{},"body":{"index.html":{}}}],["use",{"_index":395,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":396,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["useclass",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":1052,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["useguards",{"_index":158,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["useguards(jwtguard",{"_index":174,"title":{},"body":{"controllers/AdminTodosController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"index.html":{}}}],["useguards(localguard",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard",{"_index":801,"title":{},"body":{"controllers/TodosController.html":{}}}],["user",{"_index":212,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/QueryUserDto.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user's",{"_index":1065,"title":{},"body":{"index.html":{}}}],["user'})@manytoone(undefined",{"_index":844,"title":{},"body":{"entities/Users.html":{}}}],["user.dto",{"_index":224,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["user.dto.ts",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"index.html":{}}}],["user.dto.ts:11",{"_index":674,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["user.dto.ts:17",{"_index":676,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["user.dto.ts:21",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":680,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["user.dto.ts:29",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":672,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["user.dto.ts:36",{"_index":678,"title":{},"body":{"classes/QueryUserDto.html":{}}}],["user.dto.ts:37",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:57",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":796,"title":{},"body":{"controllers/TodosController.html":{}}}],["user.role",{"_index":725,"title":{},"body":{"guards/RoleGuard.html":{},"entities/Roles.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{}}}],["user.todos",{"_index":755,"title":{},"body":{"entities/Todos.html":{}}}],["user_id",{"_index":503,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{}}}],["username",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/QueryUserDto.html":{},"entities/Users.html":{},"index.html":{}}}],["users",{"_index":215,"title":{"entities/Users.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["users.controller",{"_index":95,"title":{},"body":{"modules/AdminModule.html":{}}}],["users.controller.ts",{"_index":205,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{},"index.html":{}}}],["users.controller.ts:37",{"_index":209,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:50",{"_index":213,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:57",{"_index":216,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:67",{"_index":217,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:77",{"_index":220,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:89",{"_index":218,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.service",{"_index":859,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["users/admin",{"_index":94,"title":{},"body":{"modules/AdminModule.html":{}}}],["users/entities/users.entity",{"_index":735,"title":{},"body":{"entities/Roles.html":{}}}],["users/users.module",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["userscontroller",{"_index":1056,"title":{},"body":{"index.html":{}}}],["usersmodule",{"_index":83,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":228,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["using",{"_index":966,"title":{},"body":{"index.html":{}}}],["valid('development",{"_index":254,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["valid('error",{"_index":261,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["valid('postgres",{"_index":270,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validate",{"_index":630,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":633,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":651,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationschema",{"_index":246,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":528,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"dependencies.html":{},"index.html":{}}}],["value",{"_index":37,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":537,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["value.trim().tolowercase",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/QueryUserDto.html":{}}}],["value.trim().touppercase",{"_index":541,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/QueryTodoDto.html":{},"classes/QueryUserDto.html":{}}}],["variable",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":995,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["verbose",{"_index":264,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["verify",{"_index":403,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["verify(token",{"_index":414,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["version",{"_index":1203,"title":{},"body":{"properties.html":{}}}],["void",{"_index":30,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["warn",{"_index":262,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["warranties",{"_index":1172,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1168,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":1112,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1185,"title":{},"body":{"license.html":{}}}],["winston",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":1144,"title":{},"body":{"license.html":{}}}],["x509",{"_index":1027,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":990,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":84,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessContorlService.html":{"url":"injectables/AccessContorlService.html","title":"injectable - AccessContorlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessContorlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hierarchies\n                            \n                            \n                                    Private\n                                priority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildRoles\n                            \n                            \n                                    Public\n                                isAuthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-control.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildRoles(roles: RoleEnum[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/access-control.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                            RoleEnum[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthorized\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthorized(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/access-control.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hierarchies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-control.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-control.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RoleEnum } from './enums/roles.enum';\n\ninterface IsAuthorizedParams {\n  currentRole: RoleEnum;\n  requiredRole: RoleEnum;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority: number = 1;\n\n  constructor() {\n    this.buildRoles([RoleEnum.GUEST, RoleEnum.USER, RoleEnum.ADMIN]);\n    this.buildRoles([RoleEnum.MODERATOR, RoleEnum.ADMIN]);\n  }\n\n  private buildRoles(roles: RoleEnum[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach(role => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n      if (priority && requiredPriority && priority >= requiredPriority) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAuthModule->AdminModule\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAdminModule -->\n\nTodosModule->AdminModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AdminUsersController\n                        \n                        \n                            AdminTodosController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AdminTodosController } from './todos/admin-todos.controller';\nimport { AdminUsersController } from './users/admin-users.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { TodosModule } from 'src/todos/todos.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [AuthModule, UsersModule, TodosModule],\n  controllers: [AdminUsersController, AdminTodosController],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminTodosController.html":{"url":"controllers/AdminTodosController.html","title":"controller - AdminTodosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminTodosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/todos/admin-todos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkTodoExists\n                            \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkTodoExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTodoExists(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTodoDto: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: undefined, description: 'Todo created'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: QueryTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: undefined, description: 'Todos found'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            QueryTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiResponse({status: undefined, description: 'Todo found'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Todo not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiResponse({status: undefined, description: 'Todo deleted'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Todo not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiResponse({status: undefined, description: 'Todo updated'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Todo not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/todos/admin-todos.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodoDto\n                                            \n                                                            UpdateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateTodoDto } from 'src/todos/dto/create-todo.dto';\nimport { FindOptionsWhere } from 'typeorm';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { QueryTodoDto } from 'src/todos/dto/query-todo.dto';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Todos } from 'src/todos/entities/todo.entity';\nimport { TodosService } from 'src/todos/todos.service';\nimport { UpdateTodoDto } from 'src/todos/dto/update-todo.dto';\n\n@ApiTags('Todos')\n@Roles(RoleEnum.ADMIN)\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@Controller('admin/todos')\nexport class AdminTodosController {\n  constructor(private readonly todosService: TodosService) {}\n\n  async checkTodoExists(id: string) {\n    const todo = await this.todosService.findOne(id);\n\n    if (!todo) {\n      throw new HttpException('Todo not found', HttpStatus.NOT_FOUND);\n    }\n\n    return todo;\n  }\n\n  @Post()\n  @ApiResponse({ status: HttpStatus.CREATED, description: 'Todo created' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  create(@Body() createTodoDto: CreateTodoDto) {\n    return this.todosService.create(createTodoDto);\n  }\n\n  @Get()\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todos found' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  findAll(@Query() query: QueryTodoDto) {\n    const where: FindOptionsWhere = query;\n\n    return this.todosService.findAll(where);\n  }\n\n  @Get(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo found' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Todo not found' })\n  async findOne(@Param('id') id: string) {\n    const todo = await this.checkTodoExists(id);\n\n    return todo;\n  }\n\n  @Patch(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo updated' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Todo not found' })\n  async update(@Param('id') id: string, @Body() updateTodoDto: UpdateTodoDto) {\n    await this.checkTodoExists(id);\n\n    const result = this.todosService.update(id, updateTodoDto);\n\n    return result;\n  }\n\n  @Delete(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo deleted' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Todo not found' })\n  async remove(@Param('id') id: string) {\n    await this.checkTodoExists(id);\n\n    const result = this.todosService.remove(id);\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/users/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkUserExists\n                            \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkUserExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUserExists(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: undefined, description: 'User created'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: QueryUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: undefined, description: 'Users found'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            QueryUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiResponse({status: undefined, description: 'User found'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiResponse({status: undefined, description: 'User deleted'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiResponse({status: undefined, description: 'User updated'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/users/admin-users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from 'src/auth/auth.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { FindOptionsWhere } from 'typeorm';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { QueryUserDto } from 'src/users/dto/query-user.dto';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { UpdateUserDto } from 'src/users/dto/update-user.dto';\nimport { Users } from 'src/users/entities/users.entity';\nimport { UsersService } from 'src/users/users.service';\n\n@ApiTags('Users')\n@Roles(RoleEnum.ADMIN)\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\n@Controller('admin/users')\nexport class AdminUsersController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async checkUserExists(id: string) {\n    const user = await this.usersService.findOne(id);\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  @Post()\n  @ApiResponse({ status: HttpStatus.CREATED, description: 'User created' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.authService.register(createUserDto);\n  }\n\n  @Get()\n  @ApiResponse({ status: HttpStatus.OK, description: 'Users found' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  findAll(@Query() query: QueryUserDto) {\n    const where: FindOptionsWhere = query;\n\n    return this.usersService.findAll(where);\n  }\n\n  @Get(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'User found' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async findOne(@Param('id') id: string) {\n    const user = await this.checkUserExists(id);\n\n    return user;\n  }\n\n  @Patch(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'User updated' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    await this.checkUserExists(id);\n\n    const result = await this.usersService.update(id, updateUserDto);\n\n    return result;\n  }\n\n  @Delete(':id')\n  @ApiResponse({ status: HttpStatus.OK, description: 'User deleted' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'User not found' })\n  async remove(@Param('id') id: string) {\n    await this.checkUserExists(id);\n\n    const result = await this.usersService.remove(id);\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/app-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        // APP\n        PORT: Joi.number().port().default(3000),\n        NODE_ENV: Joi.string()\n          .required()\n          .valid('development', 'production', 'test')\n          .default('development'),\n        JWT_SECRET: Joi.string().required().default('secret'),\n        LOG_LEVEL: Joi.string()\n          .valid('error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly')\n          .default('info'),\n\n        // DATABASE\n        DB_TYPE: Joi.string()\n          .required()\n          .valid('postgres', 'mysql', 'mariadb', 'cockroachdb', 'mongodb', 'aurora-mysql')\n          .default('postgres'),\n        DB_HOST: Joi.string().required().default('localhost'),\n        DB_PORT: Joi.number().default(5432),\n        DB_USER: Joi.string().required().default('postgres'),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required().default('postgres'),\n      }),\n      cache: true,\n    }),\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseConfigModule\n\nDatabaseConfigModule\n\nAppModule -->\n\nDatabaseConfigModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AppConfigModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseConfigModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, MiddlewareConsumer, Module } from '@nestjs/common';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { AdminModule } from './admin/admin.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppConfigModule } from './config/app-config.module';\nimport { AuthMiddleware } from './middleware/auth.middleware';\nimport { AuthModule } from './auth/auth.module';\nimport { DatabaseConfigModule } from './config/database-config.module';\nimport { HealthModule } from './health/health.module';\nimport { RequestLoggerMiddleware } from './middleware/request-logger.middleware';\nimport { TodosModule } from './todos/todos.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([\n      {\n        ttl: 60000,\n        limit: 1000,\n      },\n    ]),\n    AppConfigModule,\n    DatabaseConfigModule,\n    AuthModule,\n    UsersModule,\n    TodosModule,\n    HealthModule,\n    AdminModule,\n  ],\n  providers: [\n    Logger,\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(RequestLoggerMiddleware).forRoutes('*');\n    Logger.log('RequestLoggerMiddleware applied');\n\n    consumer.apply(AuthMiddleware);\n    Logger.log('AuthMiddleware applied');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                me\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('me')@UseGuards(JwtGuard)@ApiBearerAuth()@ApiResponse({status: undefined, description: 'User deleted'})@ApiResponse({status: undefined, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(LocalGuard)@ApiBody({type: LoginDto})@ApiResponse({status: undefined, description: 'User logged in'})@ApiResponse({status: undefined, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@UseGuards(JwtGuard)@ApiBearerAuth()@ApiResponse({status: undefined, description: 'User found'})@ApiResponse({status: undefined, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(request, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: undefined, description: 'User registered'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Conflict'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('me')@UseGuards(JwtGuard)@ApiBearerAuth()@ApiResponse({status: undefined, description: 'User updated'})@ApiResponse({status: undefined, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiBody, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { FindOptionsWhere } from 'typeorm';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { LocalGuard } from './guards/local.guard';\nimport { LoginDto } from './dto/login.dto';\nimport { Request } from 'express';\nimport { UpdateUserDto } from 'src/users/dto/update-user.dto';\nimport { Users } from 'src/users/entities/users.entity';\nimport { UsersService } from 'src/users/users.service';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly usersService: UsersService,\n    private authService: AuthService,\n  ) {}\n\n  @Post('login')\n  @UseGuards(LocalGuard)\n  @ApiBody({ type: LoginDto })\n  @ApiResponse({ status: HttpStatus.CREATED, description: 'User logged in' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  async login(@Req() request) {\n    return request.user;\n  }\n\n  @Post('register')\n  @ApiResponse({ status: HttpStatus.CREATED, description: 'User registered' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.CONFLICT, description: 'Conflict' })\n  async register(@Req() request, @Body() createUserDto: CreateUserDto) {\n    if (request.user) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n\n    const where: FindOptionsWhere[] = [\n      { username: createUserDto.username },\n      { email: createUserDto.username },\n    ];\n\n    const foundUsers = await this.usersService.findAll(where);\n    const foundUser = foundUsers[0];\n\n    if (foundUser[0]) {\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\n    }\n\n    return this.authService.register(createUserDto);\n  }\n\n  @Get('me')\n  @UseGuards(JwtGuard)\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User found',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  async me(@Req() request: Request) {\n    return request.user;\n  }\n\n  @Patch('me')\n  @UseGuards(JwtGuard)\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User updated',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  async update(@Req() request, @Body() updateUserDto: UpdateUserDto) {\n    return this.authService.update(request.user.id, updateUserDto);\n  }\n\n  @Delete('me')\n  @UseGuards(JwtGuard)\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'User deleted',\n  })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  async delete(@Req() request) {\n    return this.usersService.remove(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middleware/auth.middleware.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader) {\n      const bearerIndex = authHeader.indexOf('Bearer');\n      const token = authHeader.substring(bearerIndex + 7);\n\n      try {\n        verify(token, process.env.JWT_SECRET);\n      } catch (e) {\n        throw new HttpException('Invalid access token', HttpStatus.FORBIDDEN);\n      }\n\n      next();\n    } else {\n      throw new HttpException('Access token not found', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessContorlService \n\nAccessContorlService \n\nAccessContorlService  -->\n\nAuthModule->AccessContorlService \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAccessContorlService\n\nAccessContorlService\n\nAuthModule -->\n\nAccessContorlService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessContorlService\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccessContorlService\n                        \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AccessContorlService } from './access-control.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    ConfigModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '1h' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, AccessContorlService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, AccessContorlService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { encrypt, matchPassword } from 'src/lib/password-helpers';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { FindOptionsWhere } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\nimport { UpdateUserDto } from 'src/users/dto/update-user.dto';\nimport { Users } from 'src/users/entities/users.entity';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto) {\n    const where: FindOptionsWhere[] = [\n      {\n        username: loginDto.username,\n      },\n      { email: loginDto.username },\n    ];\n\n    const foundUsers = await this.usersService.findAll(where);\n    const foundUser = foundUsers[0];\n\n    if (!foundUser) {\n      return null;\n    }\n\n    const isPasswordMatching = await matchPassword(foundUser.password, loginDto.password);\n\n    if (!isPasswordMatching) {\n      return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...user } = foundUser;\n\n    return {\n      ...user,\n      access_token: this.jwtService.sign(user),\n    };\n  }\n\n  async register(createUserDto: CreateUserDto) {\n    const hashedPassword = await encrypt(createUserDto.password);\n\n    const user = {\n      ...createUserDto,\n      password: hashedPassword,\n    };\n\n    const newUser = await this.usersService.create(user);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n\n    return {\n      ...result,\n      access_token: this.jwtService.sign(result),\n    };\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    const updateUserDtoCopy = { ...updateUserDto };\n\n    if (updateUserDto.password) {\n      updateUserDtoCopy.password = await encrypt(updateUserDto.password);\n    }\n\n    return this.usersService.update(id, updateUserDtoCopy);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseEntity.html":{"url":"entities/BaseEntity.html","title":"entity - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/entities/base.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BaseEntity as Base,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class BaseEntity extends Base {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTodoDto.html":{"url":"classes/CreateTodoDto.html","title":"class - CreateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/create-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                due_date\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Description'})@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        due_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-06-29'})@IsDateString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'PENDING', enum: TodoStatusEnum})@IsEnum(TodoStatusEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Title'})@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDateString,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  IsUUID,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { TodoStatusEnum } from '../enums/todo-status.enum';\nimport { Transform } from 'class-transformer';\n\nexport class CreateTodoDto {\n  @ApiProperty({ example: 'Title' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  title: string;\n\n  @ApiProperty({ example: 'Description' })\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  description: string;\n\n  @ApiProperty({ example: '2024-06-29' })\n  @IsDateString()\n  @Transform(({ value }) => new Date(value))\n  due_date: Date;\n\n  @ApiProperty({\n    example: 'PENDING',\n    enum: TodoStatusEnum,\n  })\n  @IsEnum(TodoStatusEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  status: string;\n\n  @ApiHideProperty()\n  @IsUUID()\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                first_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                last_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@email.com'})@IsNotEmpty()@IsString()@IsEmail()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John'})@IsNotEmpty()@IsString()@MinLength(2)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe'})@IsNotEmpty()@IsString()@MinLength(2)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Password123@'})@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'USER', enum: RoleEnum})@IsEnum(RoleEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JohnDoe'})@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'John' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(2)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  first_name: string;\n\n  @ApiProperty({ example: 'Doe' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(2)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  last_name: string;\n\n  @ApiProperty({ example: 'JohnDoe' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  username: string;\n\n  @ApiProperty({ example: 'john.doe@email.com' })\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @Transform(({ value }) => value.trim().toLowerCase())\n  email: string;\n\n  @ApiProperty({ example: 'Password123@' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @IsStrongPassword()\n  password: string;\n\n  @ApiProperty({ example: 'USER', enum: RoleEnum })\n  @IsEnum(RoleEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseConfigModule.html":{"url":"modules/DatabaseConfigModule.html","title":"module - DatabaseConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/database-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) =>\n        ({\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USER'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_NAME'),\n          autoLoadEntities: true,\n          synchronize: configService.get('NODE_ENV') === 'development',\n          ssl: true,\n          logging: configService.get('NODE_ENV') === 'development',\n        }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { Controller, Get, UseGuards } from '@nestjs/common';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\n\n@ApiTags('Health Checks')\n@UseGuards(JwtGuard)\n@Roles(RoleEnum.ADMIN)\n@ApiBearerAuth()\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly db: TypeOrmHealthIndicator,\n    private readonly disk: DiskHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () =>\n        this.disk.checkStorage('storage', {\n          path: '/',\n          threshold: 250 * 1024 * 1024 * 1024,\n        }),\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n      () => this.memory.checkRSS('memory_rss', 300 * 1024 * 1024),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HealthController } from './health.controller';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      errorLogStyle: process.env.NODE_ENV === 'development' ? 'pretty' : 'json',\n    }),\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IsAuthorizedParams.html":{"url":"interfaces/IsAuthorizedParams.html","title":"interface - IsAuthorizedParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IsAuthorizedParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-control.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentRole\n                                        \n                                \n                                \n                                        \n                                            requiredRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentRole:         RoleEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoleEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requiredRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requiredRole:         RoleEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoleEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RoleEnum } from './enums/roles.enum';\n\ninterface IsAuthorizedParams {\n  currentRole: RoleEnum;\n  requiredRole: RoleEnum;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority: number = 1;\n\n  constructor() {\n    this.buildRoles([RoleEnum.GUEST, RoleEnum.USER, RoleEnum.ADMIN]);\n    this.buildRoles([RoleEnum.MODERATOR, RoleEnum.ADMIN]);\n  }\n\n  private buildRoles(roles: RoleEnum[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach(role => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n      if (priority && requiredPriority && priority >= requiredPriority) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalGuard.html":{"url":"injectables/LocalGuard.html","title":"injectable - LocalGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class LocalGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dto/login.dto';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  validate(username: string, password: string) {\n    const user = this.authService.validateUser({\n      username,\n      password,\n    } as LoginDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JohnDoe'})@IsString()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\n\nexport class LoginDto {\n  @ApiProperty({ example: 'JohnDoe' })\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => value.trim())\n  username: string;\n\n  @ApiProperty({ example: 'password' })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryTodoDto.html":{"url":"classes/QueryTodoDto.html","title":"class - QueryTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/query-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                due_date\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'Description'})@IsOptional()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/query-todo.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        due_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: '2024-06-29'})@IsOptional()@IsDateString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/query-todo.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'PENDING', enum: TodoStatusEnum})@IsOptional()@IsEnum(TodoStatusEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/query-todo.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'Title'})@IsOptional()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/query-todo.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { TodoStatusEnum } from '../enums/todo-status.enum';\nimport { Transform } from 'class-transformer';\n\nexport class QueryTodoDto {\n  @ApiProperty({ required: false, example: 'Title' })\n  @IsOptional()\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  title?: string;\n\n  @ApiProperty({ required: false, example: 'Description' })\n  @IsOptional()\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  description?: string;\n\n  @ApiProperty({ required: false, example: '2024-06-29' })\n  @IsOptional()\n  @IsDateString()\n  @Transform(({ value }) => new Date(value))\n  due_date?: Date;\n\n  @ApiProperty({\n    required: false,\n    example: 'PENDING',\n    enum: TodoStatusEnum,\n  })\n  @IsOptional()\n  @IsEnum(TodoStatusEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  status?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryUserDto.html":{"url":"classes/QueryUserDto.html","title":"class - QueryUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/query-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                first_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                last_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'john.doe@email.com'})@IsOptional()@IsString()@IsEmail()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'John'})@IsOptional()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'Doe'})@IsOptional()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'USER', enum: RoleEnum})@IsOptional()@IsEnum(RoleEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, example: 'JohnDoe'})@IsOptional()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/query-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Transform } from 'class-transformer';\n\nexport class QueryUserDto {\n  @ApiProperty({ required: false, example: 'John' })\n  @IsOptional()\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  first_name?: string;\n\n  @ApiProperty({ required: false, example: 'Doe' })\n  @IsOptional()\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  last_name?: string;\n\n  @ApiProperty({ required: false, example: 'JohnDoe' })\n  @IsOptional()\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  username?: string;\n\n  @ApiProperty({ required: false, example: 'john.doe@email.com' })\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  @Transform(({ value }) => value.trim().toLowerCase())\n  email?: string;\n\n  @ApiProperty({ required: false, example: 'USER', enum: RoleEnum })\n  @IsOptional()\n  @IsEnum(RoleEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestLoggerMiddleware.html":{"url":"injectables/RequestLoggerMiddleware.html","title":"injectable - RequestLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/request-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/middleware/request-logger.middleware.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middleware/request-logger.middleware.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class RequestLoggerMiddleware implements NestMiddleware {\n  constructor(private logger: Logger) {}\n\n  use(req: Request, res: Response, next: NextFunction) {\n    this.logger.log(`[${req.method}] ${req.originalUrl} - ${req.get('user-agent')} ${req.ip}`);\n\n    res.on('finish', () => {\n      const statusCode = res.statusCode;\n\n      statusCode;\n      if (statusCode >= 400 && statusCode = 500) {\n        this.logger.error(\n          `[${req.method}] ${req.url} - ${req.get('user-agent')} ${req.ip} - ${statusCode} ${res.statusMessage}`,\n        );\n      }\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessControlService: AccessContorlService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessControlService\n                                                  \n                                                        \n                                                                        AccessContorlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AccessContorlService } from '../access-control.service';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorators/roles.decorator';\nimport { RoleEnum } from '../enums/roles.enum';\n\nexport class TokenDto {\n  id: number;\n  role: RoleEnum;\n}\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private accessControlService: AccessContorlService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n\n    const { user } = request;\n\n    for (const role of requiredRoles) {\n      const result = this.accessControlService.isAuthorized({\n        requiredRole: role,\n        currentRole: user.role,\n      });\n\n      if (result) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['name'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/roles.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/roles.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, Unique } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Users } from '../../users/entities/users.entity';\n\n@Entity()\nexport class Roles extends BaseEntity {\n  @Column()\n  @Unique(['name'])\n  name: string;\n\n  @OneToMany(() => Users, user => user.role)\n  users: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TodoStatus.html":{"url":"entities/TodoStatus.html","title":"entity - TodoStatus","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TodoStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/entities/todo-status.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['name'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todos[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.status)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, Unique } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Todos } from './todo.entity';\n\n@Entity()\nexport class TodoStatus extends BaseEntity {\n  @Column()\n  @Unique(['name'])\n  name: string;\n\n  @Column()\n  description: string;\n\n  @OneToMany(() => Todos, todo => todo.status)\n  todos: Todos[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todos.html":{"url":"entities/Todos.html","title":"entity - Todos","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/entities/todo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                due_date\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        due_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'PENDING'})@ManyToOne(undefined, status => status.todos)@JoinColumn({name: 'status', referencedColumnName: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ManyToOne(undefined, user => user.todos, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { TodoStatus } from './todo-status.entity';\nimport { Users } from 'src/users/entities/users.entity';\n\n@Entity()\nexport class Todos extends BaseEntity {\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  due_date: Date;\n\n  @Column({ default: 'PENDING' })\n  @ManyToOne(() => TodoStatus, status => status.todos)\n  @JoinColumn({ name: 'status', referencedColumnName: 'name' })\n  status: string;\n\n  @Column()\n  @ManyToOne(() => Users, user => user.todos, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'user_id', referencedColumnName: 'id' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodosController.html":{"url":"controllers/TodosController.html","title":"controller - TodosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/todos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getTodoOwnership\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(request, createTodoDto: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: undefined, description: 'Todo created'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(request, query: QueryTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@UseGuards(RoleGuard)@ApiResponse({status: undefined, description: 'Todos found'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            QueryTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: undefined, description: 'Todo found'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodoOwnership\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodoOwnership(request, id)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: undefined, description: 'Todo removed'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(request, id: string, updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: undefined, description: 'Todo updated'})@ApiResponse({status: undefined, description: 'Unauthorized'})@ApiResponse({status: undefined, description: 'Forbidden'})@ApiResponse({status: undefined, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodoDto\n                                            \n                                                            UpdateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateTodoDto } from './dto/create-todo.dto';\nimport { FindOptionsWhere } from 'typeorm';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { QueryTodoDto } from './dto/query-todo.dto';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { RoleGuard } from 'src/auth/guards/roles.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { Todos } from './entities/todo.entity';\nimport { TodosService } from './todos.service';\nimport { UpdateTodoDto } from './dto/update-todo.dto';\n\n@ApiTags('Todos')\n@Controller('todos')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class TodosController {\n  constructor(private readonly todosService: TodosService) {}\n\n  async getTodoOwnership(request, id) {\n    const { user } = request;\n\n    const todo = await this.todosService.findOne(id);\n\n    if (!todo) {\n      throw new HttpException('Not Found', HttpStatus.NOT_FOUND);\n    }\n\n    if (todo.user_id !== user.id && user.role !== RoleEnum.MODERATOR) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n\n    return todo;\n  }\n\n  @Post()\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: HttpStatus.CREATED, description: 'Todo created' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  create(@Req() request, @Body() createTodoDto: CreateTodoDto) {\n    const { user } = request;\n\n    if (user.role !== RoleEnum.ADMIN && user.role !== RoleEnum.MODERATOR) {\n      createTodoDto.user_id = user.id;\n    }\n\n    return this.todosService.create(createTodoDto);\n  }\n\n  @Get()\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @UseGuards(RoleGuard)\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todos found' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  findAll(@Req() request, @Query() query: QueryTodoDto) {\n    const { user } = request;\n\n    const where: FindOptionsWhere = {\n      user_id: user.id,\n      ...query,\n    };\n\n    return this.todosService.findAll(where);\n  }\n\n  @Get(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo found' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Not Found' })\n  async findOne(@Req() request, @Param('id') id: string) {\n    const todo = await this.getTodoOwnership(request, id);\n\n    return todo;\n  }\n\n  @Patch(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo updated' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Not Found' })\n  async update(@Req() request, @Param('id') id: string, @Body() updateTodoDto: UpdateTodoDto) {\n    await this.getTodoOwnership(request, id);\n\n    return this.todosService.update(id, updateTodoDto);\n  }\n\n  @Delete(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: HttpStatus.OK, description: 'Todo removed' })\n  @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Unauthorized' })\n  @ApiResponse({ status: HttpStatus.FORBIDDEN, description: 'Forbidden' })\n  @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'Not Found' })\n  async remove(@Req() request, @Param('id') id: string) {\n    await this.getTodoOwnership(request, id);\n\n    return this.todosService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodosModule.html":{"url":"modules/TodosModule.html","title":"module - TodosModule","body":"\n                   \n\n\n\n\n    Modules\n    TodosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_providers\n\n\n\ncluster_TodosModule_imports\n\n\n\ncluster_TodosModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\n\n\nTodosService \n\nTodosService \n\nTodosService  -->\n\nTodosModule->TodosService \n\n\n\n\n\nTodosService\n\nTodosService\n\nTodosModule -->\n\nTodosService->TodosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todos/todos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TodosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TodosController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TodosService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from 'src/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { Todos } from './entities/todo.entity';\nimport { TodosController } from './todos.controller';\nimport { TodosService } from './todos.service';\nimport { TodoStatus } from './entities/todo-status.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todos, TodoStatus]), AuthModule],\n  controllers: [TodosController],\n  providers: [TodosService],\n  exports: [TodosService],\n})\nexport class TodosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodosService.html":{"url":"injectables/TodosService.html","title":"injectable - TodosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/todos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todosRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/todos/todos.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todosRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTodoDto: CreateTodoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(where: FindOptionsWhere | FindOptionsWhere[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTodoDto: UpdateTodoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodoDto\n                                            \n                                                            UpdateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindOptionsWhere, Repository } from 'typeorm';\nimport { CreateTodoDto } from './dto/create-todo.dto';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Todos } from './entities/todo.entity';\nimport { UpdateTodoDto } from './dto/update-todo.dto';\n\n@Injectable()\nexport class TodosService {\n  constructor(@InjectRepository(Todos) private todosRepository: Repository) {}\n\n  create(createTodoDto: CreateTodoDto): Promise {\n    return this.todosRepository.save(createTodoDto);\n  }\n\n  findAll(where: FindOptionsWhere | FindOptionsWhere[]): Promise {\n    return this.todosRepository.find({ where });\n  }\n\n  findOne(id: string): Promise {\n    return this.todosRepository.findOne({ where: { id } });\n  }\n\n  update(id: string, updateTodoDto: UpdateTodoDto): Promise {\n    return this.todosRepository.save({ id, ...updateTodoDto });\n  }\n\n  remove(id: string) {\n    return this.todosRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/guards/roles.guard.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AccessContorlService } from '../access-control.service';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorators/roles.decorator';\nimport { RoleEnum } from '../enums/roles.enum';\n\nexport class TokenDto {\n  id: number;\n  role: RoleEnum;\n}\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private accessControlService: AccessContorlService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    const request = context.switchToHttp().getRequest();\n\n    const { user } = request;\n\n    for (const role of requiredRoles) {\n      const result = this.accessControlService.isAuthorized({\n        requiredRole: role,\n        currentRole: user.role,\n      });\n\n      if (result) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoDto.html":{"url":"classes/UpdateTodoDto.html","title":"class - UpdateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/update-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateTodoDto } from './create-todo.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateTodoDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                first_name\n                            \n                            \n                                    \n                                last_name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                todos\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['email'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'USER'})@ManyToOne(undefined, role => role.users)@JoinColumn({name: 'role', referencedColumnName: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todos[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.user_id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['username'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToMany, Unique } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Roles } from '../../auth/entities/roles.entity';\nimport { Todos } from 'src/todos/entities/todo.entity';\n\n@Entity()\nexport class Users extends BaseEntity {\n  @Column()\n  first_name: string;\n\n  @Column()\n  last_name: string;\n\n  @Column()\n  @Unique(['username'])\n  username: string;\n\n  @Column()\n  @Unique(['email'])\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'USER' })\n  @ManyToOne(() => Roles, role => role.users)\n  @JoinColumn({ name: 'role', referencedColumnName: 'name' })\n  role: string;\n\n  @OneToMany(() => Todos, todo => todo.user_id)\n  todos: Todos[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Roles } from '../auth/entities/roles.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/users.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Roles])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(where: FindOptionsWhere | FindOptionsWhere[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindOptionsWhere, Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Users } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  create(createUserDto: CreateUserDto): Promise {\n    return this.usersRepository.save(createUserDto);\n  }\n\n  findAll(where: FindOptionsWhere | FindOptionsWhere[]): Promise {\n    return this.usersRepository.find({ where });\n  }\n\n  findOne(id: string): Promise {\n    return this.usersRepository.findOne({ where: { id } });\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise> {\n    const updatedUser = await this.usersRepository.save({\n      id,\n      ...updateUserDto,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...user } = updatedUser;\n\n    return user;\n  }\n\n  remove(id: string) {\n    return this.usersRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/todos/admin-todos.controller.ts\n            \n            controller\n            AdminTodosController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/admin/users/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/access-control.service.ts\n            \n            injectable\n            AccessContorlService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/access-control.service.ts\n            \n            interface\n            IsAuthorizedParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local.guard.ts\n            \n            injectable\n            LocalGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/entities/base.entity.ts\n            \n            entity\n            BaseEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            encrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            matchPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            devLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            instance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            instanceLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            prodLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/auth.middleware.ts\n            \n            injectable\n            AuthMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/request-logger.middleware.ts\n            \n            injectable\n            RequestLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/todos/dto/create-todo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/todos/dto/query-todo.dto.ts\n            \n            class\n            QueryTodoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/todos/dto/update-todo.dto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/entities/todo-status.entity.ts\n            \n            entity\n            TodoStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/entities/todo.entity.ts\n            \n            entity\n            Todos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/todos.controller.ts\n            \n            controller\n            TodosController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/todos/todos.service.ts\n            \n            injectable\n            TodosService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/query-user.dto.ts\n            \n            class\n            QueryUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @nestjs/throttler : ^5.2.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            helmet : ^7.1.0\n        \n            joi : ^17.13.3\n        \n            nest-winston : ^1.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            winston : ^3.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleEnum   (src/.../roles.enum.ts)\n                        \n                        \n                            TodoStatusEnum   (src/.../todo-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : MODERATOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 GUEST\n                            \n                        \n                        \n                            \n                                Value : GUEST\n                            \n                        \n            \n        \n\n    src/todos/enums/todo-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TodoStatusEnum\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN PROGRESS\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : COMPLETED\n                            \n                        \n                        \n                            \n                                 ON_HOLD\n                            \n                        \n                        \n                            \n                                Value : ON HOLD\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : CANCELLED\n                            \n                        \n                        \n                            \n                                 OVERDUE\n                            \n                        \n                        \n                            \n                                Value : OVERDUE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter App\nThis is a starter app for NestJS, a powerful Node.js framework. It provides authentication and authorization using Passport, along with general configurations for database, logging, and security.\nFeatures\n\nDatabase configuration\nAuthentication, authorization, RBAC\nSecurity (helmet, rate limiting, CORS)\nHealth checks\nAdmin routes\nLogging\nDocumentation (Swagger, compodoc)\nTesting (Jest)\nLinting (ESLint, Prettier)\n\nInstallation\n\nClone the repository: git clone https://github.com/BereDarius/nestjs-starter-app.git\nInstall dependencies: yarn install\nSet up the necessary environment variables:\n\n\nCreate a .env file in the root directory\n\nAdd the following variables:\nExample :# .env\n\nPORT=3000\nNODE_ENV=development\nJWT_SECRET=your_secret\nLOG_LEVEL=debug\n\nDB_TYPE=postgres\nDB_HOST=localhost\nDB_PORT=5432\nDB_USER=your_username\nDB_PASSWORD=your_password\nDB_NAME=your_database\n\n\nGenerate a self-signed certificate for HTTPS (optional, but recommended for production):\nExample :$ mkdir secretsExample :$ cd secretsExample :$ openssl genrsa -out private-key.pem 2048Example :$ openssl req -new -sha256 -key private-key.pem -out csr.pemExample :$ openssl x509 -req -in csr.pem -signkey private-key.pem -out public-certificate.pemExample :$ rm csr.pem\nStart the server: yarn start:dev\n\n\nUsage\nYou can access the API documentation at http://localhost:3000/api. The Swagger UI provides a user-friendly interface to test the endpoints.\nThere is also a separate admin route at http://localhost:3000/api/admin. This endpoint should be protected and only accessible to users with the admin role.\nAuthorization\nIn order to protect routes, you can use the @UseGuards(JwtGuard) decorator. This will ensure that only authenticated users can access the route.\nThis decorator can be used both at the controller level:\nExample :// users.controller.ts\n\nimport { Controller, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\n\n@UseGuards(JwtGuard)\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  // routes...\n}in which case all routes in the controller will be protected.\nOr at the method level:\nExample :// users.controller.ts\n\nimport { Controller, Get, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtGuard)\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  // other routes...\n}in which case only the specified route will be protected.\nRBAC (Role-Based Access Control)\nIn order to restrict access to certain routes based on the user's role, you can use the @Roles decorator together with the RoleEnum.\nThis decorator takes roles as arguments and checks if the user either has at least one of the specified roles or a role with higher priority.\nFor example, if a route is protected with @Roles(RoleEnum.ADMIN), only users with the admin role will be able to access it.\nBut if the route is protected with @Roles(RoleEnum.USER), both admin and user roles will be able to access it.\nExample :// users.controller.ts\n\nimport { Controller, Get, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtGuard)\n  @Roles(RoleEnum.ADMIN)\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  // other routes...\n}Same as for the @UseGuards decorator, the @Roles decorator can be used at the controller level or at the method level.\nSwagger\nIn order to register a new route in Swagger, you can use the decorators provided by the @nestjs/swagger package.\nIn the main.ts file, you can change the Swagger configuration for regular/admin routes:\nExample :// main.ts\n\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\nimport { AuthModule } from './auth/auth.module';\nimport { NestFactory } from '@nestjs/core';\nimport { TodosModule } from './todos/todos.module';\nimport { UsersModule } from './users/users.module';\n// ... other imports\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // ... other configurations\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('TODO App API')\n    .setDescription('Starter code for an API using NestJS')\n    .setVersion('1.0')\n    .addBearerAuth()\n    .setLicense('MIT', 'https://opensource.org/licenses/MIT')\n    .build();\n  const document = SwaggerModule.createDocument(app, swaggerConfig, {\n    include: [AuthModule, TodosModule, UsersModule],\n  });\n  SwaggerModule.setup('api', app, document);\n\n  const adminSwaggerConfig = new DocumentBuilder();\n  // ... admin configuration\n  const adminDocument = SwaggerModule.createDocument(app, adminSwaggerConfig, {\n    include: [AdminModule, HealthModule],\n  });\n  SwaggerModule.setup('api/admin', app, adminDocument);\n\n  await app.listen(3000);\n}\nbootstrap();An end-to-end example would look like this:\nExample :// create-user.dto.ts\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'john.doe' })\n  @IsString()\n  username: string;\n\n  @ApiProperty({ example: 'password' })\n  @IsString()\n  password: string;\n\n  // other properties...\n}\n\n// users.controller.ts\n\nimport { Controller, Get, Post, Body, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth } from '@nestjs/swagger';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { UsersService } from './users.service';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(JwtGuard) // when you have a protected route\n  @ApiBearerAuth() // don't forget to add this decorator; it lets Swagger know that the route is protected\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Post()\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  // other routes...\n}Compodoc\nIn order to generate documentation using Compodoc, you can run the following command:\nExample :$ yarn docContributing\nContributions are welcome! If you have any suggestions or improvements, feel free to open an issue or submit a pull request.\nLicense\nThis project is licensed under the MIT License. See the LICENSE file for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2024 Darius-Bogdan Bere\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_exports\n\n\n\ncluster_TodosModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAuthModule->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAccessContorlService \n\nAccessContorlService \n\nAccessContorlService  -->\n\nAuthModule->AccessContorlService \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAdminModule -->\n\nTodosModule->AdminModule\n\n\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nTodosService \n\nTodosService \n\nTodosService  -->\n\nTodosModule->TodosService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nDatabaseConfigModule\n\nDatabaseConfigModule\n\nAppModule -->\n\nDatabaseConfigModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nAccessContorlService\n\nAccessContorlService\n\nAuthModule -->\n\nAccessContorlService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTodosService\n\nTodosService\n\nTodosModule -->\n\nTodosService->TodosModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.3\n        \n            Description : NestJS API with TypeORM and JWT authentication\n        \n            License : MIT\n        \n            Author : Darius-Bogdan Bere\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            devLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            encrypt   (src/.../password-helpers.ts)\n                        \n                        \n                            instance   (src/.../winston.logger.ts)\n                        \n                        \n                            instanceLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            matchPassword   (src/.../password-helpers.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            prodLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../password-helpers.ts)\n                        \n                        \n                               (src/.../winston.logger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/logger/winston.logger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        devLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  level: process.env.LOG_LEVEL || 'info',\n  format: combine(\n    colorize({ all: true }),\n    timestamp({\n      format: 'YYYY-MM-DD hh:mm:ss A',\n    }),\n    align(),\n    printf(info => `[${info.timestamp}] ${info.level}: ${info.message}`),\n  ),\n  transports: [new transports.Console()],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLogger(instanceLogger)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        instanceLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV === 'production' ? prodLogger : devLogger\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prodLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  format: combine(timestamp(), errors({ stack: true }), json()),\n  transports: [\n    new transports.File({\n      filename: 'error.log',\n      level: 'error',\n    }),\n    new transports.File({\n      filename: 'combine.log',\n      level: 'info',\n    }),\n  ],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : format\n                    \n                \n\n\n        \n    \n\n    src/lib/password-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (plainTextPassword: string) => {\n  const salt = await genSalt(SALT_ROUNDS);\n  const hashedPassword = await hash(plainTextPassword, salt);\n  return hashedPassword;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (hashedPassword: string, plainTextPassword: string) => {\n  return await compare(plainTextPassword, hashedPassword);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: RoleEnum[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
