var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessContorlService.html",[0,0.604,1,1.696]],["body/injectables/AccessContorlService.html",[0,0.718,1,2.015,2,1.14,3,0.207,4,0.232,5,0.182,6,4.403,7,2.15,8,0.431,9,1.448,10,2.866,11,4.124,12,4.988,13,1.448,14,4.141,15,4.124,16,4.124,17,1.81,18,1.12,19,4.141,20,3.515,21,2.859,22,2.87,23,1.543,24,0.024,25,1.202,26,0.859,27,1.448,28,1.397,29,1.448,30,1.937,31,2.87,32,3.59,33,2.87,34,2.15,35,3.515,36,2.795,37,2.344,38,2.87,39,2.549,40,3.103,41,0.334,42,0.497,43,1.937,44,1.766,45,2.795,46,2.795,47,0.232,48,0.05,49,2.436,50,2.436,51,3.103,52,2.436,53,2.112,54,3.515,55,3.515,56,1.217,57,2.436,58,2.436,59,3.515,60,2.436,61,2.436,62,2.436,63,4.124,64,2.436,65,1.448,66,1.503,67,1.766,68,0.014,69,0.014]],["title/modules/AppConfigModule.html",[70,0.951,71,2.146]],["body/modules/AppConfigModule.html",[3,0.38,4,0.331,5,0.26,24,0.024,41,0.472,42,0.71,47,0.331,48,0.071,66,2.145,68,0.018,69,0.018,70,1.441,71,3.251,72,1.737,73,4.097,74,3.477,75,4.483,76,3.069,77,2.521,78,2.145,79,4.097,80,4.097,81,4.097,82,3.477,83,4.097,84,4.097,85,5.282,86,4.097,87,3.477,88,4.097,89,4.097,90,4.097,91,4.097,92,4.097,93,4.097,94,4.097,95,4.097,96,4.097,97,4.097,98,4.097,99,4.097,100,4.097,101,4.097,102,4.097,103,4.097,104,4.097,105,5.282,106,4.097,107,4.097,108,4.097,109,4.097]],["title/modules/AppModule.html",[70,0.951,110,2.353]],["body/modules/AppModule.html",[3,0.202,4,0.227,5,0.178,13,0.982,18,0.558,23,1.046,24,0.024,25,0.815,26,0.454,27,0.982,29,0.982,30,1.896,41,0.522,42,0.487,47,0.227,48,0.049,68,0.014,69,0.014,70,1.31,71,3.59,72,1.191,78,2.135,110,4.548,111,1.367,112,1.729,113,1.729,114,1.471,115,2.509,116,1.729,117,2.384,118,2.384,119,3.301,120,3.59,121,3.59,122,3.59,123,3.301,124,2.509,125,1.729,126,1.59,127,2.809,128,2.384,129,4.077,130,5.266,131,2.809,132,2.809,133,3.461,134,4.077,135,2.809,136,2.384,137,4.077,138,1.896,139,2.809,140,4.077,141,1.896,142,2.809,143,2.809,144,2.809,145,2.809,146,1.896,147,2.809,148,2.809,149,2.809,150,2.809,151,2.809,152,2.809,153,2.809,154,2.809,155,2.809,156,2.809,157,2.809,158,2.809,159,2.809,160,4.077,161,2.809,162,2.809]],["title/controllers/AuthController.html",[163,1.825,164,2.353]],["body/controllers/AuthController.html",[3,0.166,4,0.186,5,0.146,8,0.345,10,1.594,13,1.229,17,0.857,18,0.846,23,1.588,24,0.024,25,1.237,26,0.688,27,1.491,29,1.491,41,0.481,42,0.399,47,0.186,48,0.04,53,0.914,56,1.49,65,1.491,68,0.012,69,0.012,163,1.205,164,2.371,165,1.205,166,1.953,167,1.724,168,2.3,169,3.371,170,3.514,171,2.632,172,2.3,173,1.693,174,2.3,175,2.3,176,4.05,177,3.629,178,2.018,179,3.514,180,2.3,181,4.599,182,4.363,183,2.3,184,3.182,185,3.194,186,2.3,187,2.3,188,1.953,189,2.3,190,2.3,191,2.952,192,2.3,193,2.982,194,2.3,195,1.953,196,2.982,197,2.982,198,2.3,199,2.982,200,3.514,201,4.933,202,1.119,203,2.982,204,1.724,205,1.953,206,1.953,207,1.552,208,1.953,209,2.232,210,1.724,211,1.552,212,1.552,213,1.416,214,2.3,215,1.552,216,2.3,217,1.989,218,1.724,219,1.416,220,2.232,221,1.953,222,2.3,223,1.416,224,2.3,225,2.3,226,3.804,227,2.3,228,4.263,229,2.3,230,2.3,231,2.3,232,2.371,233,1.953,234,1.953,235,2.982,236,1.552,237,2.3,238,2.3,239,2.3,240,2.3,241,2.3,242,2.3,243,2.3,244,1.953,245,1.724,246,2.3]],["title/injectables/AuthMiddleware.html",[0,0.604,141,2.353]],["body/injectables/AuthMiddleware.html",[0,0.826,2,1.394,3,0.253,4,0.283,5,0.223,8,0.527,13,1.668,18,0.697,23,1.307,24,0.024,25,1.019,26,0.567,27,1.227,29,1.227,30,2.369,41,0.437,42,0.608,47,0.283,48,0.061,53,2.151,56,2.022,68,0.016,69,0.016,141,3.218,184,3.042,204,2.63,205,2.98,207,2.369,219,2.16,232,3.218,234,4.048,245,2.63,247,2.98,248,3.573,249,4.048,250,4.597,251,4.932,252,4.353,253,4.932,254,3.51,255,4.048,256,3.51,257,3.51,258,2.369,259,4.769,260,3.51,261,3.51,262,3.51,263,5.416,264,3.51,265,2.98,266,3.51,267,3.51,268,3.51,269,3.51,270,3.51,271,3.51,272,2.16,273,3.51]],["title/modules/AuthModule.html",[70,0.951,119,1.973]],["body/modules/AuthModule.html",[1,3.204,3,0.21,4,0.235,5,0.185,24,0.024,41,0.519,42,0.506,47,0.235,48,0.051,68,0.014,69,0.014,70,1.338,72,1.237,76,3.674,77,1.796,78,2.568,111,1.42,112,1.796,113,1.796,114,1.528,115,3.018,116,3.018,119,3.836,123,3.345,124,2.579,125,1.796,126,1.652,164,3.309,165,2.194,169,1.652,209,3.448,210,2.186,272,1.796,274,2.477,275,2.477,276,2.918,277,2.477,278,3.637,279,3.637,280,2.918,281,4.016,282,2.186,283,2.918,284,2.918,285,2.186,286,2.918,287,2.918,288,4.191,289,1.652,290,2.918,291,2.918,292,2.477,293,2.918,294,2.477,295,2.918,296,2.918,297,2.918,298,2.477]],["title/injectables/AuthService.html",[0,0.604,209,1.825]],["body/injectables/AuthService.html",[0,0.68,2,1.059,3,0.192,4,0.215,5,0.169,8,0.4,10,1.781,13,1.373,17,1.462,18,0.925,23,1.735,24,0.024,25,1.352,26,0.752,27,1.629,29,1.373,41,0.462,42,0.462,47,0.215,48,0.046,53,2.352,65,1.797,68,0.013,69,0.013,169,3.242,171,2.941,178,1.735,185,2.941,191,2.999,209,2.056,211,1.8,212,1.8,217,3.099,218,1.998,220,2.999,221,2.264,223,1.641,235,3.954,236,3.467,252,2.941,285,1.998,299,2.264,300,3.926,301,2.667,302,5.921,303,2.667,304,3.926,305,2.667,306,3.926,307,2.667,308,1.998,309,2.941,310,1.998,311,2.667,312,2.667,313,3.926,314,3.926,315,2.667,316,2.667,317,3.926,318,3.926,319,3.926,320,3.926,321,3.926,322,3.926,323,3.926,324,2.637,325,3.926,326,2.667,327,3.332,328,2.667,329,3.926,330,2.667,331,2.941,332,2.667]],["title/entities/BaseEntity.html",[333,1.384,334,1.825]],["body/entities/BaseEntity.html",[3,0.296,4,0.332,5,0.261,8,0.617,9,1.852,18,1.163,24,0.024,26,0.946,41,0.332,47,0.332,48,0.071,68,0.018,69,0.018,173,2.326,333,2.103,334,3.067,335,2.328,336,3.491,337,5.857,338,3.067,339,5.857,340,4.634,341,5.857,342,4.113,343,1.852,344,5.295,345,4.113,346,5.857,347,4.113,348,5.295,349,4.113,350,2.001,351,1.633]],["title/classes/CreateTodoDto.html",[48,0.06,352,1.973]],["body/classes/CreateTodoDto.html",[3,0.208,4,0.234,5,0.184,8,0.434,9,1.457,18,1.123,24,0.024,26,0.914,37,3.022,41,0.431,47,0.234,48,0.085,56,1.227,68,0.014,69,0.014,173,2.247,177,3.022,202,1.408,226,3.294,340,3.121,343,2.173,352,2.358,353,1.515,354,5.002,355,2.168,356,4.143,357,4.532,358,3.657,359,4,360,2.894,361,2.894,362,4.166,363,4.166,364,2.894,365,2.894,366,3.121,367,3.536,368,2.894,369,2.894,370,2.894,371,2.894,372,4.881,373,2.894,374,4.166,375,2.456,376,3.121,377,3.657,378,2.456,379,2.456,380,1.953,381,4.239,382,3.536,383,2.894,384,2.894,385,4.239,386,1.953,387,4,388,2.456,389,2.456,390,3.121,391,2.894,392,2.894,393,2.894,394,2.456]],["title/classes/CreateUserDto.html",[48,0.06,191,1.825]],["body/classes/CreateUserDto.html",[3,0.188,4,0.211,5,0.166,8,0.392,9,1.353,18,1.129,21,1.882,24,0.024,26,0.918,27,1.353,37,3.074,41,0.411,47,0.211,48,0.08,68,0.013,69,0.013,173,2.258,178,1.441,191,2.025,202,1.272,211,3.971,324,2.606,343,2.253,353,1.369,359,4.26,367,3.283,375,2.219,376,4.26,377,4.26,378,2.219,379,2.219,380,1.764,381,4.408,385,4.26,386,1.764,387,4.26,388,2.219,389,4.319,390,3.449,394,2.219,395,1.959,396,3.449,397,3.908,398,3.908,399,2.606,400,2.606,401,2.614,402,2.614,403,2.614,404,2.614,405,2.614,406,2.614,407,2.614,408,2.614,409,2.614,410,2.614,411,2.614,412,2.614,413,3.868,414,3.868,415,2.219,416,2.614,417,3.868,418,2.614,419,2.219,420,2.614,421,2.614,422,2.614,423,2.614,424,2.614]],["title/modules/DatabaseConfigModule.html",[70,0.951,120,2.146]],["body/modules/DatabaseConfigModule.html",[3,0.293,4,0.328,5,0.258,24,0.024,26,0.656,41,0.47,42,0.704,47,0.328,48,0.07,66,2.752,68,0.018,69,0.018,70,1.434,72,1.724,74,3.45,76,3.938,77,2.502,78,2.752,82,3.45,120,3.235,169,2.301,281,4.613,292,3.45,298,3.45,324,2.301,400,2.301,425,4.065,426,3.046,427,2.301,428,4.065,429,4.065,430,4.065,431,4.065,432,4.065,433,4.065,434,4.065,435,3.45,436,4.065,437,4.065,438,4.065,439,5.256,440,4.461,441,4.065,442,3.45]],["title/controllers/HealthController.html",[163,1.825,443,2.353]],["body/controllers/HealthController.html",[3,0.261,4,0.292,5,0.23,8,0.543,10,2.669,13,1.702,17,1.348,18,0.718,24,0.024,29,1.265,41,0.393,42,0.627,47,0.292,48,0.063,65,1.265,68,0.016,69,0.016,163,1.895,165,1.895,167,2.711,173,1.437,223,3.621,443,3.285,444,3.072,445,4.868,446,5.883,447,3.619,448,3.619,449,4.868,450,4.868,451,4.868,452,4.868,453,4.868,454,2.711,455,3.619,456,3.619,457,3.619,458,3.619,459,3.619,460,3.619,461,3.619,462,3.619,463,3.619,464,3.619,465,6.46,466,3.619,467,3.619,468,3.619,469,3.619]],["title/modules/HealthModule.html",[70,0.951,121,2.146]],["body/modules/HealthModule.html",[3,0.324,4,0.363,5,0.286,24,0.024,41,0.493,42,0.78,47,0.363,48,0.078,68,0.019,69,0.019,70,1.529,72,1.908,78,2.356,121,3.45,165,2.935,440,3.818,443,4.12,454,3.37,470,4.498,471,4.498,472,4.498,473,4.498,474,4.498,475,3.818,476,4.498,477,3.818]],["title/interfaces/IsAuthorizedParams.html",[32,2.353,44,2.146]],["body/interfaces/IsAuthorizedParams.html",[0,0.81,1,1.658,3,0.245,4,0.275,5,0.217,6,2.553,7,2.553,8,0.511,9,1.634,10,2.42,11,2.893,12,4.871,15,2.893,16,2.893,17,1.269,20,2.893,21,3.152,24,0.024,26,0.755,32,3.599,35,2.893,39,2.098,40,2.553,41,0.377,42,0.591,43,2.3,44,2.098,45,4.058,46,4.058,47,0.275,48,0.059,49,2.893,50,2.893,51,3.502,52,2.893,53,2.279,54,3.967,55,3.967,56,1.445,57,2.893,58,2.893,59,3.967,60,2.893,61,2.893,62,2.893,63,4.527,64,2.893,65,1.634,66,1.785,67,2.098,68,0.016,69,0.016,478,3.408]],["title/injectables/JwtGuard.html",[0,0.604,213,2.146]],["body/injectables/JwtGuard.html",[0,1.023,2,1.944,3,0.352,4,0.395,5,0.311,24,0.023,41,0.476,42,0.848,47,0.395,48,0.085,68,0.02,69,0.02,213,3.633,289,2.771,351,2.344,479,4.155,480,5.903,481,4.155]],["title/injectables/JwtStrategy.html",[0,0.604,278,2.146]],["body/injectables/JwtStrategy.html",[0,0.878,2,1.526,3,0.277,4,0.31,5,0.244,8,0.577,13,1.772,17,1.431,18,1.006,23,1.887,24,0.024,25,1.471,26,0.818,27,1.772,29,1.344,41,0.486,42,0.666,47,0.31,48,0.067,65,1.344,67,2.365,68,0.017,69,0.017,77,2.365,278,3.118,281,4.819,289,2.175,294,3.262,351,2.012,482,3.262,483,4.3,484,4.3,485,3.843,486,3.843,487,5.066,488,3.843,489,5.066,490,3.843,491,3.262,492,2.593,493,3.262,494,3.262,495,2.593,496,3.262,497,3.843,498,3.843,499,3.843,500,3.843]],["title/injectables/LocalGuard.html",[0,0.604,215,2.353]],["body/injectables/LocalGuard.html",[0,1.023,2,1.944,3,0.352,4,0.395,5,0.311,24,0.023,41,0.476,42,0.848,47,0.395,48,0.085,68,0.02,69,0.02,215,3.984,289,2.771,351,2.344,481,4.155,501,4.155,502,5.903]],["title/injectables/LocalStrategy.html",[0,0.604,279,2.146]],["body/injectables/LocalStrategy.html",[0,0.836,2,1.418,3,0.257,4,0.288,5,0.227,8,0.536,13,1.687,17,1.33,18,0.957,23,1.796,24,0.024,25,1.4,26,0.779,27,1.687,29,1.248,41,0.493,42,0.619,47,0.288,48,0.062,53,1.418,56,1.514,65,1.248,68,0.016,69,0.016,178,2.035,209,3.298,210,2.674,217,2.73,218,2.674,232,2.409,279,2.968,289,2.02,324,3.311,343,2.202,351,1.915,400,2.73,483,4.094,484,4.094,491,3.03,492,2.409,494,3.03,495,2.409,496,3.03,503,3.03,504,3.57,505,3.57,506,4.823,507,3.57,508,4.823,509,3.03,510,3.57]],["title/classes/LoginDto.html",[48,0.06,217,1.973]],["body/classes/LoginDto.html",[3,0.284,4,0.318,5,0.251,8,0.592,9,1.802,18,1.023,24,0.024,26,0.832,37,2.232,41,0.463,47,0.318,48,0.099,68,0.017,69,0.017,173,2.047,202,1.919,217,2.917,324,3.445,343,2.128,353,2.065,359,3.861,376,4.301,377,4.301,380,2.661,381,4.301,385,3.861,386,2.661,387,3.861,390,2.954,400,3.249,419,3.347,511,3.347,512,3.943,513,3.943,514,3.943,515,3.943]],["title/injectables/RequestLoggerMiddleware.html",[0,0.604,146,2.353]],["body/injectables/RequestLoggerMiddleware.html",[0,0.812,2,1.358,3,0.246,4,0.276,5,0.217,8,0.513,13,1.638,17,1.274,18,0.93,23,1.745,24,0.024,25,1.36,26,0.756,27,1.638,29,1.196,30,2.307,41,0.378,42,0.593,47,0.276,48,0.059,53,1.358,68,0.016,69,0.016,133,5.277,146,3.161,184,3.009,207,2.307,219,2.104,248,3.509,249,3.976,250,4.535,251,4.878,252,4.306,253,4.878,255,3.976,258,2.307,495,2.307,516,4.535,517,2.902,518,3.419,519,3.419,520,3.419,521,3.419,522,4.684,523,3.419,524,4.684,525,4.684,526,4.684,527,3.419,528,6.02,529,3.419,530,3.419,531,3.419,532,3.419,533,3.419,534,3.419]],["title/guards/RoleGuard.html",[535,2.612,536,2.146]],["body/guards/RoleGuard.html",[0,0.752,1,2.666,3,0.22,4,0.247,5,0.195,8,0.459,10,1.968,13,1.517,17,1.615,18,0.861,21,2.111,23,1.615,24,0.024,25,1.259,26,0.7,27,1.517,29,1.071,34,3.25,39,1.884,41,0.485,42,0.531,43,2.066,45,2.066,46,2.066,47,0.35,48,0.075,53,2.296,65,1.517,66,1.603,67,1.884,68,0.015,69,0.015,138,2.066,178,1.14,184,2.271,258,2.066,272,1.884,282,2.294,331,3.25,338,1.603,399,2.851,536,2.669,537,3.062,538,2.294,539,4.908,540,3.062,541,5.097,542,4.275,543,3.062,544,3.062,545,4.65,546,3.062,547,3.681,548,3.25,549,4.275,550,2.294,551,2.927,552,2.599,553,2.066,554,3.681,555,2.599,556,2.599,557,2.599,558,2.599,559,2.599,560,2.066]],["title/entities/Roles.html",[28,1.696,333,1.384]],["body/entities/Roles.html",[3,0.292,4,0.327,5,0.257,8,0.608,9,1.833,18,1.041,24,0.024,25,1.688,26,0.846,28,2.551,41,0.469,47,0.327,48,0.07,68,0.018,69,0.018,173,2.082,178,1.953,333,2.082,334,2.745,335,2.292,343,1.833,350,1.97,351,1.608,560,3.538,561,3.437,562,3.477,563,3.437,564,4.049,565,3.034,566,4.049,567,3.538,568,3.928,569,3.034,570,2.733,571,4.049,572,3.437]],["title/entities/TodoStatus.html",[333,1.384,573,2.146]],["body/entities/TodoStatus.html",[3,0.274,4,0.307,5,0.242,8,0.57,9,1.759,18,1.119,24,0.024,25,1.637,26,0.91,41,0.455,47,0.307,48,0.066,68,0.017,69,0.017,173,2.239,177,3.191,333,1.998,334,2.634,335,2.152,343,2.098,350,1.85,351,1.51,563,3.227,565,2.848,567,4.049,568,3.769,569,2.848,570,2.565,572,3.227,573,3.096,574,5.093,575,3.227,576,3.183,577,3.801,578,3.801,579,3.395,580,5.03,581,3.801,582,3.801]],["title/entities/Todos.html",[333,1.384,576,1.696]],["body/entities/Todos.html",[3,0.222,4,0.249,5,0.196,8,0.462,9,1.523,18,1.15,24,0.024,25,1.594,26,0.936,36,2.078,41,0.443,47,0.249,48,0.053,68,0.015,69,0.015,173,2.301,177,2.86,178,1.622,226,4.173,333,1.73,334,2.281,335,1.743,338,2.281,340,3.263,343,2.209,350,1.499,351,1.223,356,4.289,357,4.289,358,4.342,366,2.307,562,2.281,567,4.335,570,2.078,573,2.68,576,2.119,579,2.078,583,2.614,584,3.08,585,3.08,586,2.614,587,3.08,588,3.08,589,4.662,590,3.08,591,3.08,592,3.08,593,4.355,594,4.355,595,3.08,596,3.08,597,4.289,598,4.289,599,2.614,600,3.08,601,3.08,602,3.08]],["title/controllers/TodosController.html",[163,1.825,603,2.353]],["body/controllers/TodosController.html",[3,0.104,4,0.117,5,0.092,8,0.217,13,0.846,18,0.872,21,0.703,23,1.637,24,0.024,25,1.276,26,0.589,27,1.537,28,0.703,29,1.537,41,0.411,42,0.25,47,0.117,48,0.025,51,2.337,53,1.613,56,1.025,65,1.632,68,0.008,69,0.008,163,0.756,165,0.756,167,1.082,169,3.126,173,1.613,176,4.155,177,3.773,178,1.162,181,4.46,182,3.448,184,3.003,185,2.734,188,2.052,193,2.052,195,3.448,196,4.582,197,3.962,199,2.052,201,5.179,202,0.703,203,2.648,204,1.082,206,2.052,207,1.632,208,1.226,213,0.889,223,0.889,226,4.077,232,1.632,233,1.226,236,2.463,244,1.226,245,3.812,338,3.049,343,1.779,352,2.642,415,1.226,495,0.974,536,0.889,560,2.966,576,1.518,579,3.803,603,1.632,604,1.226,605,1.488,606,2.052,607,1.812,608,2.418,609,2.052,610,2.337,611,1.444,612,1.444,613,3.649,614,1.444,615,1.444,616,1.444,617,1.444,618,1.444,619,1.444,620,1.444,621,1.444,622,3.12,623,4.667,624,1.444,625,2.418,626,1.444,627,1.444,628,1.444,629,1.444,630,1.444,631,1.444,632,3.013,633,1.444,634,1.444,635,1.444,636,1.444,637,1.444,638,1.444,639,1.082,640,1.812,641,1.444,642,1.444,643,1.444,644,1.766,645,1.226,646,1.226,647,1.444,648,1.444,649,1.444,650,1.226,651,2.418,652,4.895,653,4.063,654,1.444,655,1.444,656,1.444,657,1.444,658,1.444,659,1.444,660,1.444,661,1.444,662,1.444,663,1.444,664,3.12,665,3.12,666,1.444,667,1.444,668,1.444,669,1.444,670,1.444,671,1.444,672,1.444]],["title/modules/TodosModule.html",[70,0.951,122,2.146]],["body/modules/TodosModule.html",[3,0.261,4,0.292,5,0.23,24,0.024,41,0.521,42,0.627,47,0.292,48,0.063,68,0.016,69,0.016,70,1.501,72,1.535,78,2.549,111,1.761,112,2.227,113,2.227,114,1.895,115,3.385,116,3.385,119,3.579,122,4.095,124,2.996,125,2.227,126,2.048,165,2.549,426,2.711,427,2.048,573,2.996,576,1.761,599,3.072,603,3.712,644,3.868,645,3.072,673,3.072,674,3.072,675,3.072,676,3.619,677,3.619,678,3.619,679,3.072,680,3.619,681,3.619,682,3.619]],["title/injectables/TodosService.html",[0,0.604,644,1.973]],["body/injectables/TodosService.html",[0,0.684,2,1.067,3,0.193,4,0.217,5,0.171,8,0.403,10,1.219,13,1.38,17,1.47,18,1.14,23,2.139,24,0.024,25,1.667,26,0.927,27,2.008,29,1.921,41,0.463,42,0.466,47,0.217,48,0.047,65,2.008,68,0.013,69,0.013,338,3.007,343,2.266,350,1.308,352,3.109,358,2.013,427,1.521,576,1.308,605,2.43,606,3.351,607,2.958,609,3.351,610,2.958,632,3.748,639,2.013,640,2.958,644,2.234,646,2.281,679,2.281,683,2.281,684,2.687,685,3.863,686,2.687,687,3.948,688,3.948,689,2.687,690,3.948,691,4.679,692,2.687,693,4.679,694,3.948,695,2.687,696,3.948,697,2.687,698,3.351,699,2.687,700,2.281,701,2.687,702,2.687,703,3.948,704,2.687,705,2.687,706,2.687]],["title/classes/TokenDto.html",[48,0.06,553,2.353]],["body/classes/TokenDto.html",[0,0.787,1,2.211,3,0.235,4,0.264,5,0.208,8,0.491,9,1.589,10,2.061,17,1.218,18,0.902,21,2.54,24,0.024,26,0.733,34,2.451,39,2.796,41,0.495,42,0.567,43,2.207,45,2.207,46,2.207,47,0.367,48,0.079,53,2.353,65,1.589,66,1.713,67,2.013,68,0.015,69,0.015,138,2.207,178,1.218,184,2.379,258,2.207,272,2.013,282,2.451,331,3.403,338,2.733,353,1.713,399,3.354,536,2.013,538,2.451,539,4.43,541,4.43,542,2.776,545,3.856,547,2.776,548,2.451,549,3.856,550,2.451,551,3.066,552,2.776,553,3.066,554,3.856,555,2.776,556,2.776,557,2.776,558,2.776,559,2.776,560,2.207,707,3.271,708,3.271]],["title/classes/UpdateTodoDto.html",[48,0.06,632,2.146]],["body/classes/UpdateTodoDto.html",[3,0.351,4,0.393,5,0.31,24,0.023,41,0.475,47,0.393,48,0.084,68,0.02,69,0.02,202,2.371,351,2.338,352,2.758,353,2.552,355,3.651,605,2.999,632,3.623,640,3.651,709,4.136,710,5.886,711,4.136]],["title/classes/UpdateUserDto.html",[48,0.06,712,2.353]],["body/classes/UpdateUserDto.html",[3,0.351,4,0.393,5,0.31,24,0.023,41,0.475,47,0.393,48,0.084,68,0.02,69,0.02,191,2.552,202,2.371,212,3.288,351,2.338,353,2.552,395,3.651,605,2.999,711,4.136,712,3.972,713,4.136,714,5.886]],["title/entities/Users.html",[333,1.384,562,1.825]],["body/entities/Users.html",[3,0.214,4,0.239,5,0.189,8,0.445,9,1.483,18,1.214,24,0.024,25,1.437,26,0.988,28,2.064,36,2.002,41,0.436,47,0.239,48,0.051,68,0.014,69,0.014,173,2.43,178,1.105,324,2.802,333,1.684,334,2.221,335,1.679,343,2.31,350,1.444,351,1.178,396,3.708,397,4.201,398,4.201,399,3.463,400,2.802,562,2.221,565,2.223,567,4.36,568,3.178,569,2.223,570,2.002,576,2.977,579,2.862,586,2.519,589,3.6,597,3.6,598,3.6,650,3.6,715,2.519,716,2.967,717,2.967,718,2.967,719,2.967,720,2.967,721,2.967,722,2.967,723,2.967,724,2.967,725,2.967,726,2.967,727,2.519,728,2.967,729,2.967,730,2.967,731,2.967]],["title/modules/UsersModule.html",[70,0.951,123,1.973]],["body/modules/UsersModule.html",[3,0.285,4,0.319,5,0.251,24,0.024,28,2.514,41,0.51,42,0.686,47,0.319,48,0.069,68,0.017,69,0.017,70,1.569,72,1.679,78,2.073,111,1.926,112,2.436,113,2.436,114,2.073,115,3.539,116,3.539,123,3.738,124,3.179,125,2.436,126,2.24,220,3.627,426,2.966,427,2.24,562,2.073,727,3.36,732,3.36,733,3.36,734,3.36,735,3.958,736,3.36,737,3.958,738,3.958]],["title/injectables/UsersService.html",[0,0.604,220,1.825]],["body/injectables/UsersService.html",[0,0.761,2,1.238,3,0.224,4,0.251,5,0.198,8,0.468,10,1.414,13,1.536,17,1.636,18,1.096,23,2.056,24,0.024,25,1.603,26,0.891,27,1.931,29,1.778,41,0.47,42,0.54,47,0.251,48,0.054,65,1.778,68,0.015,69,0.015,191,3.318,212,2.103,220,2.3,223,1.918,338,2.3,343,2.112,350,1.516,396,2.335,400,1.764,427,1.764,548,4.524,562,1.632,605,2.703,607,3.29,610,3.29,639,2.335,685,4.136,698,3.727,700,2.645,712,3.726,736,2.645,739,2.645,740,3.116,741,3.116,742,4.391,743,4.391,744,3.116,745,4.391,746,3.116,747,5.085,748,3.116,749,3.116,750,3.116,751,3.116,752,3.116]],["title/coverage.html",[753,4.029]],["body/coverage.html",[0,1.066,1,1.173,5,0.153,6,2.728,7,2.728,24,0.024,26,0.389,28,1.772,32,1.627,44,1.484,48,0.096,56,1.022,68,0.012,69,0.012,70,0.658,114,1.262,141,1.627,146,1.627,163,2.297,164,1.627,166,2.046,191,1.262,209,1.262,211,1.627,213,1.484,215,1.627,217,1.365,220,1.262,247,2.046,278,1.484,279,1.484,299,2.046,308,1.806,309,1.806,310,3.287,333,2.084,334,1.262,336,2.046,352,1.365,354,2.046,355,2.728,395,2.728,443,1.627,444,2.046,479,2.046,482,2.046,501,2.046,503,2.046,511,2.046,516,2.046,517,2.046,535,1.806,536,1.484,538,2.728,551,1.627,553,1.627,561,2.046,562,1.262,573,1.484,574,2.046,575,2.046,576,1.173,583,2.046,603,1.627,604,2.046,632,1.484,644,1.365,683,2.046,709,2.046,712,1.627,713,2.046,715,2.046,739,2.046,753,2.046,754,2.046,755,2.411,756,2.411,757,7.047,758,3.641,759,5.728,760,3.641,761,3.09,762,6.25,763,6.762,764,3.641,765,3.724,766,2.046,767,4.454,768,2.046,769,2.046,770,2.046,771,2.046,772,2.728,773,2.411,774,4.387,775,2.411,776,2.411,777,2.411]],["title/dependencies.html",[111,2.039,778,2.476]],["body/dependencies.html",[24,0.024,42,0.659,48,0.087,68,0.017,69,0.017,75,3.227,77,2.339,111,1.85,136,3.227,138,2.565,202,1.85,219,2.339,285,2.848,289,2.152,350,1.85,380,2.565,386,2.565,427,2.152,454,2.848,492,3.805,493,3.227,509,3.227,550,2.848,779,5.638,780,3.801,781,3.801,782,3.801,783,3.801,784,3.801,785,3.801,786,3.801,787,3.801,788,3.801,789,3.801,790,3.801,791,3.801,792,3.801,793,3.801,794,3.801,795,3.801,796,3.801,797,3.801,798,3.801,799,3.801,800,3.801,801,5.03,802,3.801,803,3.801,804,3.801,805,3.801,806,3.801,807,3.801,808,3.801,809,3.801,810,3.801,811,3.801,812,3.801,813,3.801]],["title/miscellaneous/enumerations.html",[814,1.651,815,3.556]],["body/miscellaneous/enumerations.html",[8,0.65,21,2.664,24,0.024,37,3.926,68,0.019,69,0.019,178,2.039,366,4.101,382,4.646,814,2.452,815,3.677,816,4.332,817,4.332,818,5.474,819,4.332,820,5.474,821,5.474,822,5.474,823,4.332,824,4.332,825,4.332,826,5.474,827,4.332,828,4.332,829,5.474,830,5.474]],["title/miscellaneous/functions.html",[814,1.651,831,3.556]],["body/miscellaneous/functions.html",[8,0.798,24,0.021,68,0.021,69,0.021,114,3.436,772,3.982,814,3.008,831,4.511,832,4.511]],["title/index.html",[8,0.438,833,2.476,834,2.476]],["body/index.html",[5,0.237,24,0.017,56,1.583,68,0.017,69,0.017,111,1.817,128,3.169,171,2.798,178,1.391,184,1.955,272,2.298,399,2.113,435,4.743,442,4.219,492,3.355,685,2.798,835,4.971,836,5.588,837,4.971,838,3.734,839,3.734,840,3.734,841,3.734,842,4.971,843,4.971,844,3.734,845,3.734,846,3.734,847,3.734,848,4.971,849,3.734,850,3.734,851,3.734,852,3.734,853,3.734,854,3.734,855,4.971,856,3.734,857,3.734,858,3.734,859,3.734,860,4.971,861,4.971,862,3.169,863,3.734,864,3.734,865,3.734,866,3.734,867,3.734,868,2.798,869,4.971,870,3.734,871,3.734,872,3.734,873,3.734,874,3.734,875,3.734,876,3.734,877,3.734,878,3.734,879,3.734,880,3.734,881,3.734,882,3.734,883,3.734,884,3.169,885,3.734,886,3.734,887,3.734,888,3.734,889,3.771,890,3.734,891,3.734,892,3.734,893,3.169,894,3.734,895,3.734,896,3.734]],["title/license.html",[833,2.476,834,2.476,889,1.968]],["body/license.html",[24,0.017,68,0.017,69,0.017,126,2.144,219,2.331,248,3.76,754,3.215,862,3.215,884,3.215,889,2.556,893,3.215,897,5.018,898,3.788,899,3.788,900,3.788,901,3.788,902,3.788,903,5.018,904,6.715,905,3.788,906,3.788,907,3.788,908,5.628,909,3.788,910,5.018,911,3.788,912,3.788,913,3.788,914,3.788,915,3.788,916,3.788,917,3.788,918,3.788,919,3.788,920,5.018,921,3.788,922,3.788,923,3.788,924,3.788,925,3.788,926,3.788,927,3.788,928,5.018,929,5.018,930,5.018,931,3.788,932,3.788,933,3.788,934,3.788,935,3.788,936,3.788,937,3.788,938,3.788,939,3.788,940,3.788,941,3.788,942,3.788,943,3.788,944,3.788,945,3.788,946,3.788,947,3.788,948,3.788,949,3.788,950,3.788,951,3.788,952,3.788,953,3.788,954,3.788,955,3.788,956,3.788,957,3.788,958,3.788]],["title/modules.html",[72,2.013]],["body/modules.html",[24,0.02,68,0.02,69,0.02,71,2.905,72,2.002,110,3.185,119,2.671,120,2.905,121,2.905,122,2.905,123,2.671,959,6.238,960,6.238,961,6.869,962,6.499,963,6.499,964,6.499]],["title/overview.html",[965,4.029]],["body/overview.html",[1,3.032,2,1.256,24,0.024,40,3.325,44,1.947,68,0.015,69,0.015,70,0.863,71,3.155,72,1.341,110,4.575,111,1.539,112,1.947,113,1.947,114,1.656,115,1.947,116,1.947,117,2.685,118,2.685,119,3.88,120,3.155,121,3.155,122,3.914,123,3.527,124,2.731,125,1.947,126,1.79,165,1.656,209,3.263,220,3.263,265,2.685,274,2.685,275,2.685,277,2.685,278,3.155,279,3.155,335,1.79,353,1.656,535,2.37,644,3.527,673,2.685,674,2.685,675,2.685,732,2.685,733,2.685,734,2.685,965,2.685,966,3.163,967,3.163,968,2.685,969,3.163]],["title/properties.html",[9,1.465,778,2.476]],["body/properties.html",[9,1.831,24,0.023,68,0.021,69,0.021,177,2.963,889,3.533,970,5.235,971,5.235,972,5.235,973,5.235]],["title/miscellaneous/variables.html",[814,1.651,868,3.139]],["body/miscellaneous/variables.html",[3,0.291,8,0.417,21,1.353,24,0.024,26,0.899,28,1.969,36,4.297,37,3.604,39,1.711,53,1.607,56,2.023,65,1.415,66,2.119,68,0.014,69,0.014,70,1.104,87,2.359,169,2.29,236,3.219,308,3.031,309,3.031,310,2.082,327,4.448,343,1.832,399,2.7,475,2.359,477,2.359,551,2.73,761,2.359,765,4.448,766,3.434,767,2.359,768,4.049,769,3.434,770,3.434,771,4.049,772,2.082,814,1.573,832,2.359,868,2.082,968,2.359,974,5.568,975,4.771,976,4.046,977,4.046,978,4.771,979,2.779,980,5.24,981,2.779,982,2.779,983,2.779,984,2.779,985,2.779,986,2.779,987,2.779,988,2.779,989,2.779,990,2.779,991,2.779,992,2.779,993,4.046,994,2.779,995,2.779,996,2.779,997,2.779,998,2.779,999,4.046,1000,4.046,1001,2.779,1002,2.779,1003,2.779,1004,4.046,1005,4.046,1006,2.779,1007,2.779,1008,2.779,1009,2.779]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":971,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["06",{"_index":363,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["1",{"_index":40,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"overview.html":{}}}],["1.0.0",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":968,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["1024",{"_index":465,"title":{},"body":{"controllers/HealthController.html":{}}}],["150",{"_index":467,"title":{},"body":{"controllers/HealthController.html":{}}}],["17.13.3",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{}}}],["200",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["201",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["2024",{"_index":362,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["250",{"_index":464,"title":{},"body":{"controllers/HealthController.html":{}}}],["29",{"_index":391,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["29'})@isdatestring()@transform",{"_index":364,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["3",{"_index":966,"title":{},"body":{"overview.html":{}}}],["3.13.0",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":469,"title":{},"body":{"controllers/HealthController.html":{}}}],["4.0.1",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":530,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["401",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["403",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["404",{"_index":623,"title":{},"body":{"controllers/TodosController.html":{}}}],["5",{"_index":967,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":531,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["6",{"_index":969,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":265,"title":{},"body":{"injectables/AuthMiddleware.html":{},"overview.html":{}}}],["7.1.0",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["8.12.0",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":927,"title":{},"body":{"license.html":{}}}],["access",{"_index":272,"title":{},"body":{"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["access_token",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontorlservice",{"_index":1,"title":{"injectables/AccessContorlService.html":{}},"body":{"injectables/AccessContorlService.html":{},"modules/AuthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{},"overview.html":{}}}],["accesscontrolservice",{"_index":542,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["action",{"_index":953,"title":{},"body":{"license.html":{}}}],["admin",{"_index":820,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":525,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["align",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":845,"title":{},"body":{"index.html":{}}}],["already",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["and/or",{"_index":918,"title":{},"body":{"license.html":{}}}],["apibearerauth",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["apibody",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":381,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["apiproperty({example",{"_index":359,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["apiresponse",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["app",{"_index":837,"title":{},"body":{"index.html":{}}}],["app.git",{"_index":859,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":71,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["applied",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":957,"title":{},"body":{"license.html":{}}}],["array",{"_index":35,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["associated",{"_index":905,"title":{},"body":{"license.html":{}}}],["async",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseConfigModule.html":{},"controllers/TodosController.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/entities/roles.entity",{"_index":727,"title":{},"body":{"entities/Users.html":{},"modules/UsersModule.html":{}}}],["authcontroller",{"_index":164,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":842,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":481,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/LocalGuard.html":{}}}],["authguard('jwt",{"_index":480,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('local",{"_index":502,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["authheader",{"_index":259,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authheader.indexof('bearer",{"_index":262,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authheader.substring(bearerindex",{"_index":264,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["authmiddleware",{"_index":141,"title":{"injectables/AuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["authmodule",{"_index":119,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":973,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":843,"title":{},"body":{"index.html":{}}}],["authors",{"_index":946,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":209,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":437,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["available",{"_index":960,"title":{},"body":{"modules.html":{}}}],["await",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":348,"title":{},"body":{"entities/BaseEntity.html":{}}}],["based",{"_index":877,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":334,"title":{"entities/BaseEntity.html":{}},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"coverage.html":{}}}],["bcrypt",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["bearerindex",{"_index":261,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["body",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["boolean",{"_index":34,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["bootstrap",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":961,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":962,"title":{},"body":{"modules.html":{}}}],["buildroles",{"_index":14,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["buildroles(roles",{"_index":20,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["cache",{"_index":109,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["canactivate",{"_index":539,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["canactivate(context",{"_index":544,"title":{},"body":{"guards/RoleGuard.html":{}}}],["cancelled",{"_index":829,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cascade",{"_index":602,"title":{},"body":{"entities/Todos.html":{}}}],["cascade'})@joincolumn({name",{"_index":595,"title":{},"body":{"entities/Todos.html":{}}}],["catch",{"_index":269,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["charge",{"_index":900,"title":{},"body":{"license.html":{}}}],["check",{"_index":446,"title":{},"body":{"controllers/HealthController.html":{}}}],["claim",{"_index":949,"title":{},"body":{"license.html":{}}}],["class",{"_index":48,"title":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":353,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clone",{"_index":855,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_todosmodule",{"_index":673,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_exports",{"_index":674,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_todosmodule_imports",{"_index":676,"title":{},"body":{"modules/TodosModule.html":{}}}],["cluster_todosmodule_providers",{"_index":675,"title":{},"body":{"modules/TodosModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":732,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":733,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":734,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["colorize",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":567,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["column()@manytoone(undefined",{"_index":592,"title":{},"body":{"entities/Todos.html":{}}}],["column()@unique(['email",{"_index":716,"title":{},"body":{"entities/Users.html":{}}}],["column()@unique(['name",{"_index":563,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{}}}],["column()@unique(['username",{"_index":725,"title":{},"body":{"entities/Users.html":{}}}],["column({default",{"_index":586,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["combine",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combine(timestamp",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["combine.log",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compare(plaintextpassword",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["completed",{"_index":826,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compression",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":926,"title":{},"body":{"license.html":{}}}],["config.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["config.module.ts",{"_index":74,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["config/app",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.ts",{"_index":863,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":76,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["configmodule.forroot",{"_index":79,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":431,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_name",{"_index":436,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_password",{"_index":434,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_port",{"_index":432,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('db_user",{"_index":433,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configservice.get('jwt_secret",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":439,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["configuration",{"_index":851,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":847,"title":{},"body":{"index.html":{}}}],["configure",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["configure(consumer",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["connection",{"_index":862,"title":{},"body":{"index.html":{},"license.html":{}}}],["const",{"_index":53,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":504,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(logger",{"_index":518,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["constructor(private",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"controllers/TodosController.html":{}}}],["constructor(reflector",{"_index":540,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(todosrepository",{"_index":684,"title":{},"body":{"injectables/TodosService.html":{}}}],["constructor(usersrepository",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(authmiddleware",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(requestloggermiddleware).forroutes",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":547,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["context.getclass",{"_index":557,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["context.gethandler",{"_index":556,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["context.switchtohttp().getrequest",{"_index":558,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["contract",{"_index":954,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":878,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":879,"title":{},"body":{"index.html":{}}}],["control.service",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["control.service.ts",{"_index":7,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["control.service.ts:11",{"_index":38,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:12",{"_index":19,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:19",{"_index":22,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:28",{"_index":33,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["controller",{"_index":163,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":455,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('todos",{"_index":647,"title":{},"body":{"controllers/TodosController.html":{}}}],["controllers",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"overview.html":{}}}],["cookie",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["copies",{"_index":920,"title":{},"body":{"license.html":{}}}],["copy",{"_index":903,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":928,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":753,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":605,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["create(@req",{"_index":655,"title":{},"body":{"controllers/TodosController.html":{}}}],["create(createtododto",{"_index":688,"title":{},"body":{"injectables/TodosService.html":{}}}],["create(createuserdto",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(request",{"_index":611,"title":{},"body":{"controllers/TodosController.html":{}}}],["created",{"_index":654,"title":{},"body":{"controllers/TodosController.html":{}}}],["created'})@apiresponse({status",{"_index":614,"title":{},"body":{"controllers/TodosController.html":{}}}],["created_at",{"_index":337,"title":{},"body":{"entities/BaseEntity.html":{}}}],["createdatecolumn",{"_index":341,"title":{},"body":{"entities/BaseEntity.html":{}}}],["createlogger(instancelogger",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtododto",{"_index":352,"title":{"classes/CreateTodoDto.html":{}},"body":{"classes/CreateTodoDto.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["createtododto.user_id",{"_index":656,"title":{},"body":{"controllers/TodosController.html":{}}}],["createuserdto",{"_index":191,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":874,"title":{},"body":{"index.html":{}}}],["currentrole",{"_index":45,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["damages",{"_index":950,"title":{},"body":{"license.html":{}}}],["database",{"_index":435,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"index.html":{}}}],["databaseconfigmodule",{"_index":120,"title":{"modules/DatabaseConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":340,"title":{},"body":{"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"entities/Todos.html":{}}}],["date(value",{"_index":392,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["db",{"_index":456,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_host",{"_index":100,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_name",{"_index":108,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_password",{"_index":106,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_port",{"_index":102,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["db_user",{"_index":104,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["dd",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":907,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":958,"title":{},"body":{"license.html":{}}}],["debug",{"_index":97,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["declarations",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"entities/Users.html":{}}}],["decorators/roles.decorator",{"_index":552,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["default",{"_index":36,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/Todos.html":{},"entities/Users.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":89,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["default('info",{"_index":99,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["defined",{"_index":18,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":636,"title":{},"body":{"controllers/TodosController.html":{}}}],["delete(':id",{"_index":669,"title":{},"body":{"controllers/TodosController.html":{}}}],["delete(':id')@roles(roleenum.user",{"_index":628,"title":{},"body":{"controllers/TodosController.html":{}}}],["dependencies",{"_index":111,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"properties.html":{}}}],["description'})@isstring()@transform",{"_index":360,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["development",{"_index":440,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{}}}],["devlogger",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["disk",{"_index":457,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":449,"title":{},"body":{"controllers/HealthController.html":{}}}],["distribute",{"_index":916,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":754,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doe",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doe'})@isnotempty()@isstring()@minlength(2)@maxlength(20)@transform",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dto/create",{"_index":639,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["dto/update",{"_index":646,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{}}}],["due_date",{"_index":356,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todos.html":{}}}],["e",{"_index":270,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["email",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["encrypt",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["encrypt(createuserdto.password",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":335,"title":{},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/todo",{"_index":681,"title":{},"body":{"modules/TodosModule.html":{}}}],["entities/todo.entity",{"_index":679,"title":{},"body":{"modules/TodosModule.html":{},"injectables/TodosService.html":{}}}],["entities/users.entity",{"_index":736,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":333,"title":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{},"coverage.html":{}}}],["enum",{"_index":367,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["enumerations",{"_index":815,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/roles.enum",{"_index":43,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["enums/todo",{"_index":383,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["environment",{"_index":867,"title":{},"body":{"index.html":{}}}],["error",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error.log",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorlogstyle",{"_index":474,"title":{},"body":{"modules/HealthModule.html":{}}}],["errors",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eslint",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["event",{"_index":945,"title":{},"body":{"license.html":{}}}],["example",{"_index":387,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["executioncontext",{"_index":545,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["exists",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":47,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":351,"title":{},"body":{"entities/BaseEntity.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{}}}],["extractjwt",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":67,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["features",{"_index":849,"title":{},"body":{"index.html":{}}}],["feel",{"_index":883,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":906,"title":{},"body":{"license.html":{}}}],["findall",{"_index":606,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{}}}],["findall(@req",{"_index":659,"title":{},"body":{"controllers/TodosController.html":{}}}],["findall(request",{"_index":616,"title":{},"body":{"controllers/TodosController.html":{}}}],["findall(userid",{"_index":690,"title":{},"body":{"injectables/TodosService.html":{}}}],["findone",{"_index":607,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["findone(@req",{"_index":663,"title":{},"body":{"controllers/TodosController.html":{}}}],["findone(id",{"_index":694,"title":{},"body":{"injectables/TodosService.html":{}}}],["findone(request",{"_index":620,"title":{},"body":{"controllers/TodosController.html":{}}}],["findone(usernameoremail",{"_index":745,"title":{},"body":{"injectables/UsersService.html":{}}}],["first_name",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Users.html":{}}}],["fitness",{"_index":941,"title":{},"body":{"license.html":{}}}],["following",{"_index":925,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["forbidden'})@apiresponse({status",{"_index":622,"title":{},"body":{"controllers/TodosController.html":{}}}],["format",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["found'})@apiresponse({status",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["founduser",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["founduser.password",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":840,"title":{},"body":{"index.html":{}}}],["free",{"_index":884,"title":{},"body":{"index.html":{},"license.html":{}}}],["function",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":831,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":923,"title":{},"body":{"license.html":{}}}],["general",{"_index":846,"title":{},"body":{"index.html":{}}}],["gensalt(salt_rounds",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":662,"title":{},"body":{"controllers/TodosController.html":{}}}],["get(':id')@roles(roleenum.user",{"_index":621,"title":{},"body":{"controllers/TodosController.html":{}}}],["get('me",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me')@useguards(jwtguard)@apibearerauth()@apiresponse({status",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@healthcheck",{"_index":447,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@roles(roleenum.user",{"_index":617,"title":{},"body":{"controllers/TodosController.html":{}}}],["getting",{"_index":833,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettodoownership",{"_index":608,"title":{},"body":{"controllers/TodosController.html":{}}}],["gettodoownership(request",{"_index":625,"title":{},"body":{"controllers/TodosController.html":{}}}],["git",{"_index":856,"title":{},"body":{"index.html":{}}}],["granted",{"_index":899,"title":{},"body":{"license.html":{}}}],["graph",{"_index":959,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":535,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":537,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/jwt.guard",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local.guard",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["guest",{"_index":822,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hash(plaintextpassword",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["health",{"_index":445,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":471,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":450,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":451,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":443,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":121,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["helmet",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["helpers",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["helpers.ts",{"_index":765,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":898,"title":{},"body":{"license.html":{}}}],["hh:mm:ss",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hierarchies",{"_index":11,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy",{"_index":54,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(currentrole",{"_index":62,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(requiredrole",{"_index":64,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.set(role",{"_index":58,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hold",{"_index":828,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["holders",{"_index":947,"title":{},"body":{"license.html":{}}}],["host",{"_index":430,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["http",{"_index":95,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["httpexception",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"controllers/TodosController.html":{}}}],["httpexception('access",{"_index":273,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["httpexception('forbidden",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["httpexception('invalid",{"_index":271,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["httpexception('not",{"_index":649,"title":{},"body":{"controllers/TodosController.html":{}}}],["httpexception('user",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/your",{"_index":857,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{}}}],["httpstatus.conflict",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.forbidden",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{}}}],["id",{"_index":338,"title":{},"body":{"entities/BaseEntity.html":{},"guards/RoleGuard.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":258,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["implied",{"_index":937,"title":{},"body":{"license.html":{}}}],["import",{"_index":41,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":78,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}}}],["improvements",{"_index":882,"title":{},"body":{"index.html":{}}}],["in'})@apiresponse({status",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["in_progress",{"_index":824,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["included",{"_index":931,"title":{},"body":{"license.html":{}}}],["including",{"_index":910,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["info.level",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info.message",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info.timestamp",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["information",{"_index":896,"title":{},"body":{"index.html":{}}}],["inject",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":700,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(todos",{"_index":701,"title":{},"body":{"injectables/TodosService.html":{}}}],["injectrepository(users",{"_index":749,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":860,"title":{},"body":{"index.html":{}}}],["installation",{"_index":854,"title":{},"body":{"index.html":{}}}],["instance",{"_index":769,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["instancelogger",{"_index":770,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":44,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":478,"title":{},"body":{"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized",{"_index":16,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized(undefined",{"_index":31,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["isauthorizedparams",{"_index":32,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["isdatestring",{"_index":374,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["isemail",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":375,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum(roleenum",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(todostatusenum",{"_index":393,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["isnotempty",{"_index":376,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["ispasswordmatching",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":377,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isstrongpassword",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issue",{"_index":886,"title":{},"body":{"index.html":{}}}],["isuuid",{"_index":372,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["john",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john'})@isnotempty()@isstring()@minlength(2)@maxlength(20)@transform",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@email.com",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@email.com'})@isnotempty()@isstring()@isemail()@transform",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["johndoe'})@isnotempty()@isstring()@minlength(5)@maxlength(20)@transform",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe'})@isstring()@isnotempty()@transform",{"_index":514,"title":{},"body":{"classes/LoginDto.html":{}}}],["joi",{"_index":75,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["joi.number().default(5432",{"_index":103,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().port().default(3000",{"_index":83,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":81,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string",{"_index":85,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('localhost",{"_index":101,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('password",{"_index":107,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('postgres",{"_index":105,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required().default('secret",{"_index":91,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joincolumn",{"_index":597,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["json",{"_index":477,"title":{},"body":{"modules/HealthModule.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":257,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["jwt",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_secret",{"_index":90,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwtfromrequest",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":213,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/TodosController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":278,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":936,"title":{},"body":{"license.html":{}}}],["last_name",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Users.html":{}}}],["legend",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["level",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liability",{"_index":951,"title":{},"body":{"license.html":{}}}],["liable",{"_index":948,"title":{},"body":{"license.html":{}}}],["license",{"_index":889,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":891,"title":{},"body":{"index.html":{}}}],["limit",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["limitation",{"_index":911,"title":{},"body":{"license.html":{}}}],["limited",{"_index":938,"title":{},"body":{"license.html":{}}}],["line",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["local",{"_index":509,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localguard",{"_index":215,"title":{"injectables/LocalGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":279,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":873,"title":{},"body":{"index.html":{}}}],["log_level",{"_index":92,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["logged",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["logger.log('authmiddleware",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.log('requestloggermiddleware",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":517,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:5",{"_index":519,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["logger.middleware.ts:8",{"_index":520,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["logging",{"_index":442,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"index.html":{}}}],["login",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":217,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@apiresponse({status",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["manytoone",{"_index":598,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["map",{"_index":55,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["matching",{"_index":69,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":378,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":389,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["me(@req",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(request",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["measures",{"_index":853,"title":{},"body":{"index.html":{}}}],["memory",{"_index":458,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":452,"title":{},"body":{"controllers/HealthController.html":{}}}],["merchantability",{"_index":940,"title":{},"body":{"license.html":{}}}],["merge",{"_index":914,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["middleware",{"_index":850,"title":{},"body":{"index.html":{}}}],["middleware/auth.middleware",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/request",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":379,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":388,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":814,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":893,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["moderator",{"_index":821,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["modify",{"_index":913,"title":{},"body":{"license.html":{}}}],["module",{"_index":70,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":72,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"modules/HealthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":895,"title":{},"body":{"index.html":{}}}],["name",{"_index":25,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":866,"title":{},"body":{"index.html":{}}}],["nest",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["nestjs",{"_index":835,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":77,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"controllers/TodosController.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":454,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":427,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":255,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["new",{"_index":56,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateTodoDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LocalStrategy.html":{},"controllers/TodosController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":252,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["nextfunction",{"_index":253,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["node.js",{"_index":839,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":84,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["noninfringement",{"_index":944,"title":{},"body":{"license.html":{}}}],["notice",{"_index":929,"title":{},"body":{"license.html":{}}}],["npm",{"_index":861,"title":{},"body":{"index.html":{}}}],["null",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":39,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":549,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["obtaining",{"_index":902,"title":{},"body":{"license.html":{}}}],["on_hold",{"_index":827,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ondelete",{"_index":594,"title":{},"body":{"entities/Todos.html":{}}}],["onetomany",{"_index":568,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["onetomany(undefined",{"_index":565,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["open",{"_index":885,"title":{},"body":{"index.html":{}}}],["optional",{"_index":27,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":956,"title":{},"body":{"license.html":{}}}],["out",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overdue",{"_index":830,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overview",{"_index":965,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":778,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":637,"title":{},"body":{"controllers/TodosController.html":{}}}],["param('id",{"_index":664,"title":{},"body":{"controllers/TodosController.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":711,"title":{},"body":{"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createtododto",{"_index":710,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["partialtype(createuserdto",{"_index":714,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["particular",{"_index":942,"title":{},"body":{"license.html":{}}}],["passport",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportmodule",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Users.html":{}}}],["password'})@isstring()@isnotempty",{"_index":512,"title":{},"body":{"classes/LoginDto.html":{}}}],["password123",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123@'})@isnotempty()@isstring()@minlength(8)@maxlength(20)@isstrongpassword",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":638,"title":{},"body":{"controllers/TodosController.html":{}}}],["patch(':id",{"_index":666,"title":{},"body":{"controllers/TodosController.html":{}}}],["patch(':id')@roles(roleenum.user",{"_index":633,"title":{},"body":{"controllers/TodosController.html":{}}}],["path",{"_index":462,"title":{},"body":{"controllers/HealthController.html":{}}}],["payload",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":366,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todos.html":{},"miscellaneous/enumerations.html":{}}}],["pending'})@manytoone(undefined",{"_index":587,"title":{},"body":{"entities/Todos.html":{}}}],["permission",{"_index":897,"title":{},"body":{"license.html":{}}}],["permit",{"_index":921,"title":{},"body":{"license.html":{}}}],["person",{"_index":901,"title":{},"body":{"license.html":{}}}],["persons",{"_index":922,"title":{},"body":{"license.html":{}}}],["pg",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["plaintextpassword",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":82,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["portions",{"_index":933,"title":{},"body":{"license.html":{}}}],["post",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["post('login",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(localguard)@apibody({type",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@roles(roleenum.user",{"_index":612,"title":{},"body":{"controllers/TodosController.html":{}}}],["postgres",{"_index":429,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["powerful",{"_index":838,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{}}}],["pretty",{"_index":476,"title":{},"body":{"modules/HealthModule.html":{}}}],["primarygeneratedcolumn",{"_index":349,"title":{},"body":{"entities/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":344,"title":{},"body":{"entities/BaseEntity.html":{}}}],["printf((info",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["priority",{"_index":12,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":268,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["process.env.log_level",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":475,"title":{},"body":{"modules/HealthModule.html":{},"miscellaneous/variables.html":{}}}],["prodlogger",{"_index":771,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":87,"title":{},"body":{"modules/AppConfigModule.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":825,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["project",{"_index":890,"title":{},"body":{"index.html":{}}}],["promise",{"_index":548,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/LoginDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"properties.html":{}}}],["protected",{"_index":875,"title":{},"body":{"index.html":{}}}],["provide",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":934,"title":{},"body":{"license.html":{}}}],["providers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":841,"title":{},"body":{"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["publish",{"_index":915,"title":{},"body":{"license.html":{}}}],["pull",{"_index":888,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":943,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"controllers/TodosController.html":{},"injectables/UsersService.html":{}}}],["referencedcolumnname",{"_index":589,"title":{},"body":{"entities/Todos.html":{},"entities/Users.html":{}}}],["reflect",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":541,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["register",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["register(@req",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(createuserdto",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(request",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered'})@apiresponse({status",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["remove",{"_index":609,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{}}}],["remove(@req",{"_index":671,"title":{},"body":{"controllers/TodosController.html":{}}}],["remove(id",{"_index":696,"title":{},"body":{"injectables/TodosService.html":{}}}],["remove(request",{"_index":627,"title":{},"body":{"controllers/TodosController.html":{}}}],["removed",{"_index":670,"title":{},"body":{"controllers/TodosController.html":{}}}],["removed'})@apiresponse({status",{"_index":629,"title":{},"body":{"controllers/TodosController.html":{}}}],["repository",{"_index":685,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"controllers/TodosController.html":{}}}],["req.get('user",{"_index":524,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.headers.authorization",{"_index":260,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["req.ip",{"_index":526,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.method",{"_index":522,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.originalurl",{"_index":523,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["req.url",{"_index":533,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["request",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["request.user",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestloggermiddleware",{"_index":146,"title":{"injectables/RequestLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["requiredpriority",{"_index":63,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredrole",{"_index":46,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["requiredroles",{"_index":554,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["res",{"_index":250,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["res.on('finish",{"_index":527,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["res.statuscode",{"_index":529,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["res.statusmessage",{"_index":534,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["reset",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":251,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["restriction",{"_index":909,"title":{},"body":{"license.html":{}}}],["result",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["results",{"_index":68,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":65,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":912,"title":{},"body":{"license.html":{}}}],["role",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role.users",{"_index":731,"title":{},"body":{"entities/Users.html":{}}}],["role.users)@joincolumn({name",{"_index":722,"title":{},"body":{"entities/Users.html":{}}}],["role_key",{"_index":551,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleenum",{"_index":21,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CreateUserDto.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roleenum.admin",{"_index":51,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/TodosController.html":{}}}],["roleenum.moderator",{"_index":652,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.moderator)@apiresponse({status",{"_index":613,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.moderator)@useguards(roleguard)@apiresponse({status",{"_index":618,"title":{},"body":{"controllers/TodosController.html":{}}}],["roleenum.user",{"_index":50,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["roleenum})@isenum(roleenum)@transform",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["roleguard",{"_index":536,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["roles",{"_index":28,"title":{"entities/Roles.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/Roles.html":{},"controllers/TodosController.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(roleenum.user",{"_index":653,"title":{},"body":{"controllers/TodosController.html":{}}}],["roles.foreach((role",{"_index":57,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["routes",{"_index":876,"title":{},"body":{"index.html":{}}}],["run",{"_index":871,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":550,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"dependencies.html":{}}}],["salt",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt_rounds",{"_index":766,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":848,"title":{},"body":{"index.html":{}}}],["see",{"_index":894,"title":{},"body":{"index.html":{}}}],["sell",{"_index":919,"title":{},"body":{"license.html":{}}}],["server",{"_index":870,"title":{},"body":{"index.html":{}}}],["set",{"_index":864,"title":{},"body":{"index.html":{}}}],["setmetadata(role_key",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":852,"title":{},"body":{"index.html":{}}}],["shall",{"_index":930,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{}}}],["silly",{"_index":98,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["software",{"_index":904,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDto.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":832,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../password",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":816,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../todo",{"_index":817,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../winston.logger.ts",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:37",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/access",{"_index":6,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":678,"title":{},"body":{"modules/TodosModule.html":{}}}],["src/auth/auth.module.ts",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":643,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":761,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":511,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":515,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":513,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/entities/roles.entity.ts",{"_index":561,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/auth/entities/roles.entity.ts:12",{"_index":566,"title":{},"body":{"entities/Roles.html":{}}}],["src/auth/entities/roles.entity.ts:9",{"_index":564,"title":{},"body":{"entities/Roles.html":{}}}],["src/auth/enums/roles.enum",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/TodosController.html":{}}}],["src/auth/enums/roles.enum.ts",{"_index":819,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guards/jwt.guard",{"_index":641,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":479,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local.guard.ts",{"_index":501,"title":{},"body":{"injectables/LocalGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":642,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":538,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:10",{"_index":708,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":543,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/roles.guard.ts:20",{"_index":546,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":707,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":503,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:13",{"_index":507,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":505,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/app",{"_index":73,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/config/database",{"_index":425,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["src/config/entities/base.entity",{"_index":570,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"entities/Users.html":{}}}],["src/config/entities/base.entity.ts",{"_index":336,"title":{},"body":{"entities/BaseEntity.html":{},"coverage.html":{}}}],["src/config/entities/base.entity.ts:12",{"_index":345,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/config/entities/base.entity.ts:15",{"_index":342,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/config/entities/base.entity.ts:18",{"_index":347,"title":{},"body":{"entities/BaseEntity.html":{}}}],["src/health/health.controller.ts",{"_index":444,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:21",{"_index":448,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":470,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/lib/password",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logger/winston.logger.ts",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":772,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/middleware/auth.middleware.ts",{"_index":247,"title":{},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["src/middleware/auth.middleware.ts:12",{"_index":254,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/middleware/request",{"_index":516,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{},"coverage.html":{}}}],["src/todos/dto/create",{"_index":354,"title":{},"body":{"classes/CreateTodoDto.html":{},"coverage.html":{}}}],["src/todos/dto/update",{"_index":709,"title":{},"body":{"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["src/todos/entities/todo",{"_index":574,"title":{},"body":{"entities/TodoStatus.html":{},"coverage.html":{}}}],["src/todos/entities/todo.entity",{"_index":728,"title":{},"body":{"entities/Users.html":{}}}],["src/todos/entities/todo.entity.ts",{"_index":583,"title":{},"body":{"entities/Todos.html":{},"coverage.html":{}}}],["src/todos/entities/todo.entity.ts:12",{"_index":584,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:15",{"_index":585,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:20",{"_index":590,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:25",{"_index":596,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/entities/todo.entity.ts:9",{"_index":591,"title":{},"body":{"entities/Todos.html":{}}}],["src/todos/enums/todo",{"_index":823,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/todos/todos.controller.ts",{"_index":604,"title":{},"body":{"controllers/TodosController.html":{},"coverage.html":{}}}],["src/todos/todos.controller.ts:115",{"_index":630,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:28",{"_index":626,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:55",{"_index":615,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:71",{"_index":619,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:87",{"_index":624,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.controller.ts:99",{"_index":635,"title":{},"body":{"controllers/TodosController.html":{}}}],["src/todos/todos.module.ts",{"_index":677,"title":{},"body":{"modules/TodosModule.html":{}}}],["src/todos/todos.service.ts",{"_index":683,"title":{},"body":{"injectables/TodosService.html":{},"coverage.html":{}}}],["src/todos/todos.service.ts:14",{"_index":689,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:18",{"_index":692,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:26",{"_index":695,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:30",{"_index":699,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:34",{"_index":697,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/todos/todos.service.ts:9",{"_index":686,"title":{},"body":{"injectables/TodosService.html":{}}}],["src/users/dto/create",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":713,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":600,"title":{},"body":{"entities/Todos.html":{}}}],["src/users/entities/users.entity.ts",{"_index":715,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entities/users.entity.ts:16",{"_index":718,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":719,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":726,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":717,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:30",{"_index":720,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:35",{"_index":723,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":724,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.module",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":735,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":746,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":748,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":441,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["stack",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":869,"title":{},"body":{"index.html":{}}}],["started",{"_index":834,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":836,"title":{},"body":{"index.html":{}}}],["statements",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTodoDto.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{}}}],["status.entity",{"_index":599,"title":{},"body":{"entities/Todos.html":{},"modules/TodosModule.html":{}}}],["status.entity.ts",{"_index":575,"title":{},"body":{"entities/TodoStatus.html":{},"coverage.html":{}}}],["status.entity.ts:12",{"_index":577,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.entity.ts:15",{"_index":581,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.entity.ts:9",{"_index":578,"title":{},"body":{"entities/TodoStatus.html":{}}}],["status.enum",{"_index":384,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["status.enum.ts",{"_index":818,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status.todos",{"_index":601,"title":{},"body":{"entities/Todos.html":{}}}],["status.todos)@joincolumn({name",{"_index":588,"title":{},"body":{"entities/Todos.html":{}}}],["statuscode",{"_index":528,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["strategies/jwt.strategy",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":343,"title":{},"body":{"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":924,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":917,"title":{},"body":{"license.html":{}}}],["submit",{"_index":887,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":932,"title":{},"body":{"license.html":{}}}],["suggestions",{"_index":881,"title":{},"body":{"index.html":{}}}],["super",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":963,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":964,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":438,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["table",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["terminusmodule",{"_index":472,"title":{},"body":{"modules/HealthModule.html":{}}}],["terminusmodule.forroot",{"_index":473,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":88,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["this.accesscontrolservice.isauthorized",{"_index":559,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["this.authservice.register(createuserdto",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":510,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.buildroles([roleenum.guest",{"_index":49,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.buildroles([roleenum.moderator",{"_index":52,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.db.pingcheck('database",{"_index":460,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage('storage",{"_index":461,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.gettodoownership(request",{"_index":665,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.health.check",{"_index":459,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.hierarchies",{"_index":61,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.hierarchies.push(hierarchy",{"_index":60,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.jwtservice.sign(result",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(user",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":532,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["this.logger.log",{"_index":521,"title":{},"body":{"injectables/RequestLoggerMiddleware.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":466,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":468,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.priority",{"_index":59,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.reflector.getallandoverride",{"_index":555,"title":{},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{}}}],["this.todosrepository.delete",{"_index":706,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.find",{"_index":703,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.findone",{"_index":704,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.save",{"_index":705,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosrepository.save(createtododto",{"_index":702,"title":{},"body":{"injectables/TodosService.html":{}}}],["this.todosservice.create(createtododto",{"_index":657,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.todosservice.findall(undefined",{"_index":660,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.todosservice.findall(user.id",{"_index":661,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.todosservice.findone(id",{"_index":648,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.todosservice.remove(id",{"_index":672,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.todosservice.update(id",{"_index":668,"title":{},"body":{"controllers/TodosController.html":{}}}],["this.usersrepository.findone",{"_index":750,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save",{"_index":752,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(createuserdto",{"_index":751,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(user",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(createuserdto.username",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.findone(logindto.username",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["threshold",{"_index":463,"title":{},"body":{"controllers/HealthController.html":{}}}],["throttlerguard",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/LocalStrategy.html":{},"controllers/TodosController.html":{}}}],["timestamp",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":357,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todos.html":{}}}],["title'})@isnotempty()@isstring()@minlength(5)@maxlength(20)@transform",{"_index":370,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo",{"_index":579,"title":{},"body":{"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"entities/Users.html":{}}}],["todo.dto",{"_index":640,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{}}}],["todo.dto.ts",{"_index":355,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["todo.dto.ts:21",{"_index":371,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:26",{"_index":361,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:31",{"_index":365,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:39",{"_index":369,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.dto.ts:42",{"_index":373,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["todo.entity",{"_index":582,"title":{},"body":{"entities/TodoStatus.html":{}}}],["todo.status",{"_index":580,"title":{},"body":{"entities/TodoStatus.html":{}}}],["todo.user_id",{"_index":650,"title":{},"body":{"controllers/TodosController.html":{},"entities/Users.html":{}}}],["todos",{"_index":576,"title":{"entities/Todos.html":{}},"body":{"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"coverage.html":{}}}],["todos.controller",{"_index":680,"title":{},"body":{"modules/TodosModule.html":{}}}],["todos.service",{"_index":645,"title":{},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{}}}],["todos/todos.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["todoscontroller",{"_index":603,"title":{"controllers/TodosController.html":{}},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{},"coverage.html":{}}}],["todosmodule",{"_index":122,"title":{"modules/TodosModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TodosModule.html":{},"modules.html":{},"overview.html":{}}}],["todosrepository",{"_index":687,"title":{},"body":{"injectables/TodosService.html":{}}}],["todosservice",{"_index":644,"title":{"injectables/TodosService.html":{}},"body":{"controllers/TodosController.html":{},"modules/TodosModule.html":{},"injectables/TodosService.html":{},"coverage.html":{},"overview.html":{}}}],["todostatus",{"_index":573,"title":{"entities/TodoStatus.html":{}},"body":{"entities/TodoStatus.html":{},"entities/Todos.html":{},"modules/TodosModule.html":{},"coverage.html":{}}}],["todostatusenum",{"_index":382,"title":{},"body":{"classes/CreateTodoDto.html":{},"miscellaneous/enumerations.html":{}}}],["todostatusenum})@isenum(todostatusenum)@transform",{"_index":368,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["token",{"_index":263,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["tokendto",{"_index":553,"title":{"classes/TokenDto.html":{}},"body":{"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["tort",{"_index":955,"title":{},"body":{"license.html":{}}}],["transform",{"_index":385,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["transformer",{"_index":386,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["transports",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.console",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.file",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":66,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppConfigModule.html":{},"modules/DatabaseConfigModule.html":{},"interfaces/IsAuthorizedParams.html":{},"guards/RoleGuard.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":266,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["ttl",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":26,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthService.html":{},"entities/BaseEntity.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/RequestLoggerMiddleware.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":350,"title":{},"body":{"entities/BaseEntity.html":{},"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Todos.html":{},"injectables/TodosService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":453,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":426,"title":{},"body":{"modules/DatabaseConfigModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([todos",{"_index":682,"title":{},"body":{"modules/TodosModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":738,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":428,"title":{},"body":{"modules/DatabaseConfigModule.html":{}}}],["typescript",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorized",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["unauthorizedexception",{"_index":508,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":691,"title":{},"body":{"injectables/TodosService.html":{}}}],["under",{"_index":892,"title":{},"body":{"index.html":{}}}],["unique",{"_index":569,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{},"entities/Users.html":{}}}],["unique(['email",{"_index":730,"title":{},"body":{"entities/Users.html":{}}}],["unique(['name",{"_index":572,"title":{},"body":{"entities/Roles.html":{},"entities/TodoStatus.html":{}}}],["unique(['username",{"_index":729,"title":{},"body":{"entities/Users.html":{}}}],["unknown",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodosController.html":{}}}],["unlicensed",{"_index":972,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":865,"title":{},"body":{"index.html":{}}}],["update",{"_index":610,"title":{},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":698,"title":{},"body":{"injectables/TodosService.html":{},"injectables/UsersService.html":{}}}],["update(request",{"_index":631,"title":{},"body":{"controllers/TodosController.html":{}}}],["updated",{"_index":667,"title":{},"body":{"controllers/TodosController.html":{}}}],["updated'})@apiresponse({status",{"_index":634,"title":{},"body":{"controllers/TodosController.html":{}}}],["updated_at",{"_index":339,"title":{},"body":{"entities/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":346,"title":{},"body":{"entities/BaseEntity.html":{}}}],["updatetododto",{"_index":632,"title":{"classes/UpdateTodoDto.html":{}},"body":{"controllers/TodosController.html":{},"injectables/TodosService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":712,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usage",{"_index":872,"title":{},"body":{"index.html":{}}}],["use",{"_index":248,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{},"license.html":{}}}],["use(req",{"_index":249,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["useclass",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseConfigModule.html":{}}}],["useguards",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["useguards(jwtguard",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodosController.html":{}}}],["useguards(localguard",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard",{"_index":658,"title":{},"body":{"controllers/TodosController.html":{}}}],["user",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"guards/RoleGuard.html":{},"entities/Roles.html":{},"entities/Todos.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{},"entities/Users.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["user'})@manytoone(undefined",{"_index":721,"title":{},"body":{"entities/Users.html":{}}}],["user.dto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:21",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:57",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":651,"title":{},"body":{"controllers/TodosController.html":{}}}],["user.role",{"_index":560,"title":{},"body":{"guards/RoleGuard.html":{},"entities/Roles.html":{},"controllers/TodosController.html":{},"classes/TokenDto.html":{}}}],["user.todos",{"_index":593,"title":{},"body":{"entities/Todos.html":{}}}],["user_id",{"_index":358,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todos.html":{},"injectables/TodosService.html":{}}}],["userid",{"_index":693,"title":{},"body":{"injectables/TodosService.html":{}}}],["username",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/DatabaseConfigModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["username/nestjs",{"_index":858,"title":{},"body":{"index.html":{}}}],["usernameoremail",{"_index":747,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":562,"title":{"entities/Users.html":{}},"body":{"entities/Roles.html":{},"entities/Todos.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.service",{"_index":737,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/entities/users.entity",{"_index":571,"title":{},"body":{"entities/Roles.html":{}}}],["users/users.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":123,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":220,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":844,"title":{},"body":{"index.html":{}}}],["valid('development",{"_index":86,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["valid('error",{"_index":93,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validate",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":506,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateuser",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationschema",{"_index":80,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":380,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["value",{"_index":37,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":390,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["value.trim().tolowercase",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["value.trim().touppercase",{"_index":394,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/CreateUserDto.html":{}}}],["variable",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":868,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["verbose",{"_index":96,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["verify",{"_index":256,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["verify(token",{"_index":267,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["version",{"_index":970,"title":{},"body":{"properties.html":{}}}],["void",{"_index":30,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"injectables/RequestLoggerMiddleware.html":{}}}],["warn",{"_index":94,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["warranties",{"_index":939,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":935,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":880,"title":{},"body":{"index.html":{}}}],["whether",{"_index":952,"title":{},"body":{"license.html":{}}}],["winston",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["without",{"_index":908,"title":{},"body":{"license.html":{}}}],["yyyy",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodosModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessContorlService.html":{"url":"injectables/AccessContorlService.html","title":"injectable - AccessContorlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessContorlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hierarchies\n                            \n                            \n                                    Private\n                                priority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildRoles\n                            \n                            \n                                    Public\n                                isAuthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/access-control.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildRoles(roles: RoleEnum[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/access-control.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                            RoleEnum[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthorized\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthorized(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/access-control.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hierarchies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-control.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/auth/access-control.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RoleEnum } from './enums/roles.enum';\n\ninterface IsAuthorizedParams {\n  currentRole: RoleEnum;\n  requiredRole: RoleEnum;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority: number = 1;\n\n  constructor() {\n    this.buildRoles([RoleEnum.GUEST, RoleEnum.USER, RoleEnum.ADMIN]);\n    this.buildRoles([RoleEnum.MODERATOR, RoleEnum.ADMIN]);\n  }\n\n  private buildRoles(roles: RoleEnum[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n      if (priority && requiredPriority && priority >= requiredPriority) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/app-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        PORT: Joi.number().port().default(3000),\n        NODE_ENV: Joi.string()\n          .valid('development', 'production', 'test')\n          .default('development'),\n        JWT_SECRET: Joi.string().required().default('secret'),\n        LOG_LEVEL: Joi.string()\n          .valid('error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly')\n          .default('info'),\n\n        DB_HOST: Joi.string().required().default('localhost'),\n        DB_PORT: Joi.number().default(5432),\n        DB_USER: Joi.string().required().default('postgres'),\n        DB_PASSWORD: Joi.string().required().default('password'),\n        DB_NAME: Joi.string().required().default('postgres'),\n      }),\n      cache: true,\n    }),\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseConfigModule\n\nDatabaseConfigModule\n\nAppModule -->\n\nDatabaseConfigModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nTodosModule\n\nTodosModule\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseConfigModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            TodosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, MiddlewareConsumer, Module } from '@nestjs/common';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppConfigModule } from './config/app-config.module';\nimport { AuthMiddleware } from './middleware/auth.middleware';\nimport { AuthModule } from './auth/auth.module';\nimport { DatabaseConfigModule } from './config/database-config.module';\nimport { HealthModule } from './health/health.module';\nimport { RequestLoggerMiddleware } from './middleware/request-logger.middleware';\nimport { TodosModule } from './todos/todos.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([\n      {\n        ttl: 60000,\n        limit: 1000,\n      },\n    ]),\n    AppConfigModule,\n    DatabaseConfigModule,\n    AuthModule,\n    UsersModule,\n    TodosModule,\n    HealthModule,\n  ],\n  providers: [\n    Logger,\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(RequestLoggerMiddleware).forRoutes('*');\n    Logger.log('RequestLoggerMiddleware applied');\n\n    consumer.apply(AuthMiddleware);\n    Logger.log('AuthMiddleware applied');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                me\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(LocalGuard)@ApiBody({type: LoginDto})@ApiResponse({status: 200, description: 'User logged in'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                        \n                    me(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@UseGuards(JwtGuard)@ApiBearerAuth()@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(request, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'User registered'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiBody, ApiResponse } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { JwtGuard } from './guards/jwt.guard';\nimport { LocalGuard } from './guards/local.guard';\nimport { LoginDto } from './dto/login.dto';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly usersService: UsersService,\n    private authService: AuthService,\n  ) {}\n\n  @Post('login')\n  @UseGuards(LocalGuard)\n  @ApiBody({ type: LoginDto })\n  @ApiResponse({\n    status: 200,\n    description: 'User logged in',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(@Req() request) {\n    return request.user;\n  }\n\n  @Post('register')\n  @ApiResponse({\n    status: 201,\n    description: 'User registered',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  async register(@Req() request, @Body() createUserDto: CreateUserDto) {\n    if (request.user) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n\n    const foundUser = await this.usersService.findOne(createUserDto.username);\n\n    if (foundUser) {\n      throw new HttpException('User already exists', HttpStatus.CONFLICT);\n    }\n\n    return this.authService.register(createUserDto);\n  }\n\n  @Get('me')\n  @UseGuards(JwtGuard)\n  @ApiBearerAuth()\n  @ApiResponse({\n    status: 200,\n    description: 'User found',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async me(@Req() request: Request) {\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middleware/auth.middleware.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestMiddleware,\n} from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader) {\n      const bearerIndex = authHeader.indexOf('Bearer');\n      const token = authHeader.substring(bearerIndex + 7);\n\n      try {\n        verify(token, process.env.JWT_SECRET);\n      } catch (e) {\n        throw new HttpException('Invalid access token', HttpStatus.FORBIDDEN);\n      }\n\n      next();\n    } else {\n      throw new HttpException('Access token not found', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAccessContorlService \n\nAccessContorlService \n\nAccessContorlService  -->\n\nAuthModule->AccessContorlService \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAccessContorlService\n\nAccessContorlService\n\nAuthModule -->\n\nAccessContorlService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessContorlService\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccessContorlService\n                        \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AccessContorlService } from './access-control.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    ConfigModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '1h' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, AccessContorlService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, AccessContorlService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { encrypt, matchPassword } from 'src/lib/password-helpers';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto) {\n    const foundUser = await this.usersService.findOne(loginDto.username);\n\n    if (!foundUser) {\n      return null;\n    }\n\n    const isPasswordMatching = await matchPassword(\n      foundUser.password,\n      loginDto.password,\n    );\n\n    if (!isPasswordMatching) {\n      return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...user } = foundUser;\n\n    return {\n      ...user,\n      access_token: this.jwtService.sign(user),\n    };\n  }\n\n  async register(createUserDto: CreateUserDto) {\n    const hashedPassword = await encrypt(createUserDto.password);\n\n    const user = {\n      ...createUserDto,\n      password: hashedPassword,\n    };\n\n    const newUser = await this.usersService.create(user);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = newUser;\n\n    return {\n      ...result,\n      access_token: this.jwtService.sign(result),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BaseEntity.html":{"url":"entities/BaseEntity.html","title":"entity - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/entities/base.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/config/entities/base.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BaseEntity as Base,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class BaseEntity extends Base {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTodoDto.html":{"url":"classes/CreateTodoDto.html","title":"class - CreateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/create-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                due_date\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Description'})@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        due_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-06-29'})@IsDateString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'PENDING', enum: TodoStatusEnum})@IsEnum(TodoStatusEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Title'})@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/dto/create-todo.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDateString,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  IsUUID,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { TodoStatusEnum } from '../enums/todo-status.enum';\nimport { Transform } from 'class-transformer';\n\nexport class CreateTodoDto {\n  @ApiProperty({ example: 'Title' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  title: string;\n\n  @ApiProperty({ example: 'Description' })\n  @IsString()\n  @Transform(({ value }) => value.trim())\n  description: string;\n\n  @ApiProperty({ example: '2024-06-29' })\n  @IsDateString()\n  @Transform(({ value }) => new Date(value))\n  due_date: Date;\n\n  @ApiProperty({\n    example: 'PENDING',\n    enum: TodoStatusEnum,\n  })\n  @IsEnum(TodoStatusEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  status: string;\n\n  @IsUUID()\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                first_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                last_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@email.com'})@IsNotEmpty()@IsString()@IsEmail()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John'})@IsNotEmpty()@IsString()@MinLength(2)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe'})@IsNotEmpty()@IsString()@MinLength(2)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Password123@'})@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'USER', enum: RoleEnum})@IsEnum(RoleEnum)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JohnDoe'})@IsNotEmpty()@IsString()@MinLength(5)@MaxLength(20)@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  IsStrongPassword,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { Transform } from 'class-transformer';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'John' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(2)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  first_name: string;\n\n  @ApiProperty({ example: 'Doe' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(2)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  last_name: string;\n\n  @ApiProperty({ example: 'JohnDoe' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(5)\n  @MaxLength(20)\n  @Transform(({ value }) => value.trim())\n  username: string;\n\n  @ApiProperty({ example: 'john.doe@email.com' })\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  @Transform(({ value }) => value.trim().toLowerCase())\n  email: string;\n\n  @ApiProperty({ example: 'Password123@' })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @IsStrongPassword()\n  password: string;\n\n  @ApiProperty({ example: 'USER', enum: RoleEnum })\n  @IsEnum(RoleEnum)\n  @Transform(({ value }) => value.trim().toUpperCase())\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseConfigModule.html":{"url":"modules/DatabaseConfigModule.html","title":"module - DatabaseConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/database-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USER'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        autoLoadEntities: true,\n        synchronize: configService.get('NODE_ENV') === 'development',\n        ssl: true,\n        logging: configService.get('NODE_ENV') === 'development',\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly db: TypeOrmHealthIndicator,\n    private readonly disk: DiskHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () =>\n        this.disk.checkStorage('storage', {\n          path: '/',\n          threshold: 250 * 1024 * 1024 * 1024,\n        }),\n      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),\n      () => this.memory.checkRSS('memory_rss', 300 * 1024 * 1024),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HealthController } from './health.controller';\nimport { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [\n    TerminusModule.forRoot({\n      errorLogStyle: process.env.NODE_ENV === 'development' ? 'pretty' : 'json',\n    }),\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IsAuthorizedParams.html":{"url":"interfaces/IsAuthorizedParams.html","title":"interface - IsAuthorizedParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IsAuthorizedParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/access-control.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentRole\n                                        \n                                \n                                \n                                        \n                                            requiredRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentRole:         RoleEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoleEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requiredRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requiredRole:         RoleEnum\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RoleEnum\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RoleEnum } from './enums/roles.enum';\n\ninterface IsAuthorizedParams {\n  currentRole: RoleEnum;\n  requiredRole: RoleEnum;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority: number = 1;\n\n  constructor() {\n    this.buildRoles([RoleEnum.GUEST, RoleEnum.USER, RoleEnum.ADMIN]);\n    this.buildRoles([RoleEnum.MODERATOR, RoleEnum.ADMIN]);\n  }\n\n  private buildRoles(roles: RoleEnum[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n      if (priority && requiredPriority && priority >= requiredPriority) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalGuard.html":{"url":"injectables/LocalGuard.html","title":"injectable - LocalGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class LocalGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { LoginDto } from '../dto/login.dto';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  validate(username: string, password: string) {\n    const user = this.authService.validateUser({\n      username,\n      password,\n    } as LoginDto);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JohnDoe'})@IsString()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\n\nexport class LoginDto {\n  @ApiProperty({ example: 'JohnDoe' })\n  @IsString()\n  @IsNotEmpty()\n  @Transform(({ value }) => value.trim())\n  username: string;\n\n  @ApiProperty({ example: 'password' })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RequestLoggerMiddleware.html":{"url":"injectables/RequestLoggerMiddleware.html","title":"injectable - RequestLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RequestLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/request-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/middleware/request-logger.middleware.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middleware/request-logger.middleware.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class RequestLoggerMiddleware implements NestMiddleware {\n  constructor(private logger: Logger) {}\n\n  use(req: Request, res: Response, next: NextFunction) {\n    this.logger.log(\n      `[${req.method}] ${req.originalUrl} - ${req.get('user-agent')} ${req.ip}`,\n    );\n\n    res.on('finish', () => {\n      const statusCode = res.statusCode;\n\n      statusCode;\n      if (statusCode >= 400 && statusCode = 500) {\n        this.logger.error(\n          `[${req.method}] ${req.url} - ${req.get('user-agent')} ${req.ip} - ${statusCode} ${res.statusMessage}`,\n        );\n      }\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessControlService: AccessContorlService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessControlService\n                                                  \n                                                        \n                                                                        AccessContorlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AccessContorlService } from '../access-control.service';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorators/roles.decorator';\nimport { RoleEnum } from '../enums/roles.enum';\n\nexport class TokenDto {\n  id: number;\n  role: RoleEnum;\n}\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private accessControlService: AccessContorlService,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLE_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    const request = context.switchToHttp().getRequest();\n\n    const { user } = request;\n\n    for (const role of requiredRoles) {\n      const result = this.accessControlService.isAuthorized({\n        requiredRole: role,\n        currentRole: user.role,\n      });\n\n      if (result) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['name'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/roles.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/roles.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, Unique } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Users } from '../../users/entities/users.entity';\n\n@Entity()\nexport class Roles extends BaseEntity {\n  @Column()\n  @Unique(['name'])\n  name: string;\n\n  @OneToMany(() => Users, (user) => user.role)\n  users: Users[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TodoStatus.html":{"url":"entities/TodoStatus.html","title":"entity - TodoStatus","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TodoStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/entities/todo-status.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['name'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todos[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.status)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo-status.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, Unique } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Todos } from './todo.entity';\n\n@Entity()\nexport class TodoStatus extends BaseEntity {\n  @Column()\n  @Unique(['name'])\n  name: string;\n\n  @Column()\n  description: string;\n\n  @OneToMany(() => Todos, (todo) => todo.status)\n  todos: Todos[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todos.html":{"url":"entities/Todos.html","title":"entity - Todos","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/entities/todo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                due_date\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        due_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'PENDING'})@ManyToOne(undefined, status => status.todos)@JoinColumn({name: 'status', referencedColumnName: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ManyToOne(undefined, user => user.todos, {onDelete: 'CASCADE'})@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todos/entities/todo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { TodoStatus } from './todo-status.entity';\nimport { Users } from 'src/users/entities/users.entity';\n\n@Entity()\nexport class Todos extends BaseEntity {\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  due_date: Date;\n\n  @Column({ default: 'PENDING' })\n  @ManyToOne(() => TodoStatus, (status) => status.todos)\n  @JoinColumn({ name: 'status', referencedColumnName: 'name' })\n  status: string;\n\n  @Column()\n  @ManyToOne(() => Users, (user) => user.todos, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'user_id', referencedColumnName: 'id' })\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodosController.html":{"url":"controllers/TodosController.html","title":"controller - TodosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/todos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getTodoOwnership\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(request, createTodoDto: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: 201, description: 'Todo created'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@UseGuards(RoleGuard)@ApiResponse({status: 200, description: 'Todos found'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: 200, description: 'Todo found'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})@ApiResponse({status: 404, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodoOwnership\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodoOwnership(request, id)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: 200, description: 'Todo removed'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})@ApiResponse({status: 404, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(request, id: string, updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@Roles(RoleEnum.USER, RoleEnum.MODERATOR)@ApiResponse({status: 200, description: 'Todo updated'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 403, description: 'Forbidden'})@ApiResponse({status: 404, description: 'Not Found'})\n                \n            \n\n                    \n                        \n                            Defined in src/todos/todos.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodoDto\n                                            \n                                                            UpdateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { CreateTodoDto } from './dto/create-todo.dto';\nimport { JwtGuard } from 'src/auth/guards/jwt.guard';\nimport { RoleEnum } from 'src/auth/enums/roles.enum';\nimport { RoleGuard } from 'src/auth/guards/roles.guard';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { TodosService } from './todos.service';\nimport { UpdateTodoDto } from './dto/update-todo.dto';\n\n@Controller('todos')\n@UseGuards(JwtGuard)\n@ApiBearerAuth()\nexport class TodosController {\n  constructor(private readonly todosService: TodosService) {}\n\n  async getTodoOwnership(request, id) {\n    const { user } = request;\n\n    const todo = await this.todosService.findOne(id);\n\n    if (!todo) {\n      throw new HttpException('Not Found', 404);\n    }\n\n    if (\n      todo.user_id !== user.id &&\n      (user.role !== RoleEnum.ADMIN || user.role !== RoleEnum.MODERATOR)\n    ) {\n      throw new HttpException('Forbidden', 403);\n    }\n\n    return todo;\n  }\n\n  @Post()\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({\n    status: 201,\n    description: 'Todo created',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  create(@Req() request, @Body() createTodoDto: CreateTodoDto) {\n    const { user } = request;\n\n    if (user.role !== RoleEnum.ADMIN && user.role !== RoleEnum.MODERATOR) {\n      createTodoDto.user_id = user.id;\n    }\n\n    return this.todosService.create(createTodoDto);\n  }\n\n  @Get()\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @UseGuards(RoleGuard)\n  @ApiResponse({ status: 200, description: 'Todos found' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  findAll(@Req() request) {\n    const { user } = request;\n\n    if (user.role === RoleEnum.ADMIN || user.role === RoleEnum.MODERATOR) {\n      return this.todosService.findAll(undefined);\n    }\n\n    return this.todosService.findAll(user.id);\n  }\n\n  @Get(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: 200, description: 'Todo found' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  @ApiResponse({ status: 404, description: 'Not Found' })\n  async findOne(@Req() request, @Param('id') id: string) {\n    const todo = await this.getTodoOwnership(request, id);\n\n    return todo;\n  }\n\n  @Patch(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: 200, description: 'Todo updated' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  @ApiResponse({ status: 404, description: 'Not Found' })\n  async update(\n    @Req() request,\n    @Param('id') id: string,\n    @Body() updateTodoDto: UpdateTodoDto,\n  ) {\n    await this.getTodoOwnership(request, id);\n\n    return this.todosService.update(id, updateTodoDto);\n  }\n\n  @Delete(':id')\n  @Roles(RoleEnum.USER, RoleEnum.MODERATOR)\n  @ApiResponse({ status: 200, description: 'Todo removed' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden' })\n  @ApiResponse({ status: 404, description: 'Not Found' })\n  async remove(@Req() request, @Param('id') id: string) {\n    await this.getTodoOwnership(request, id);\n\n    return this.todosService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodosModule.html":{"url":"modules/TodosModule.html","title":"module - TodosModule","body":"\n                   \n\n\n\n\n    Modules\n    TodosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_exports\n\n\n\ncluster_TodosModule_providers\n\n\n\ncluster_TodosModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\n\n\nTodosService \n\nTodosService \n\nTodosService  -->\n\nTodosModule->TodosService \n\n\n\n\n\nTodosService\n\nTodosService\n\nTodosModule -->\n\nTodosService->TodosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todos/todos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TodosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TodosController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TodosService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from 'src/auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { Todos } from './entities/todo.entity';\nimport { TodosController } from './todos.controller';\nimport { TodosService } from './todos.service';\nimport { TodoStatus } from './entities/todo-status.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todos, TodoStatus]), AuthModule],\n  controllers: [TodosController],\n  providers: [TodosService],\n  exports: [TodosService],\n})\nexport class TodosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodosService.html":{"url":"injectables/TodosService.html","title":"injectable - TodosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/todos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todosRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/todos/todos.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todosRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTodoDto: CreateTodoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTodoDto\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateTodoDto: UpdateTodoDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/todos/todos.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTodoDto\n                                            \n                                                            UpdateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateTodoDto } from './dto/create-todo.dto';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Todos } from './entities/todo.entity';\nimport { UpdateTodoDto } from './dto/update-todo.dto';\n\n@Injectable()\nexport class TodosService {\n  constructor(\n    @InjectRepository(Todos) private todosRepository: Repository,\n  ) {}\n\n  create(createTodoDto: CreateTodoDto) {\n    return this.todosRepository.save(createTodoDto);\n  }\n\n  findAll(userId: string | undefined) {\n    if (userId) {\n      return this.todosRepository.find({ where: { user_id: userId } });\n    }\n\n    return this.todosRepository.find();\n  }\n\n  findOne(id: string) {\n    return this.todosRepository.findOne({ where: { id } });\n  }\n\n  update(id: string, updateTodoDto: UpdateTodoDto) {\n    return this.todosRepository.save({ id, ...updateTodoDto });\n  }\n\n  remove(id: string) {\n    return this.todosRepository.delete({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEnum\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/guards/roles.guard.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AccessContorlService } from '../access-control.service';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorators/roles.decorator';\nimport { RoleEnum } from '../enums/roles.enum';\n\nexport class TokenDto {\n  id: number;\n  role: RoleEnum;\n}\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private accessControlService: AccessContorlService,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLE_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    const request = context.switchToHttp().getRequest();\n\n    const { user } = request;\n\n    for (const role of requiredRoles) {\n      const result = this.accessControlService.isAuthorized({\n        requiredRole: role,\n        currentRole: user.role,\n      });\n\n      if (result) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoDto.html":{"url":"classes/UpdateTodoDto.html","title":"class - UpdateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todos/dto/update-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateTodoDto } from './create-todo.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateTodoDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                first_name\n                            \n                            \n                                    \n                                last_name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                todos\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['email'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'USER'})@ManyToOne(undefined, role => role.users)@JoinColumn({name: 'role', referencedColumnName: 'name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todos[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.user_id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Unique(['username'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  Unique,\n} from 'typeorm';\nimport { BaseEntity } from 'src/config/entities/base.entity';\nimport { Roles } from '../../auth/entities/roles.entity';\nimport { Todos } from 'src/todos/entities/todo.entity';\n\n@Entity()\nexport class Users extends BaseEntity {\n  @Column()\n  first_name: string;\n\n  @Column()\n  last_name: string;\n\n  @Column()\n  @Unique(['username'])\n  username: string;\n\n  @Column()\n  @Unique(['email'])\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: 'USER' })\n  @ManyToOne(() => Roles, (role) => role.users)\n  @JoinColumn({ name: 'role', referencedColumnName: 'name' })\n  role: string;\n\n  @OneToMany(() => Todos, (todo) => todo.user_id)\n  todos: Todos[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Roles } from '../auth/entities/roles.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/users.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users, Roles])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(usernameOrEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                usernameOrEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from './dto/create-user.dto';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  findOne(usernameOrEmail: string): Promise {\n    return this.usersRepository.findOne({\n      where: [{ username: usernameOrEmail }, { email: usernameOrEmail }],\n    });\n  }\n\n  create(createUserDto: CreateUserDto): Promise {\n    return this.usersRepository.save(createUserDto);\n  }\n\n  update(id: string, updateUserDto: CreateUserDto): Promise {\n    return this.usersRepository.save({ id, ...updateUserDto });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/access-control.service.ts\n            \n            injectable\n            AccessContorlService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/access-control.service.ts\n            \n            interface\n            IsAuthorizedParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local.guard.ts\n            \n            injectable\n            LocalGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/entities/base.entity.ts\n            \n            entity\n            BaseEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            encrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            matchPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/password-helpers.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            devLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            instance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            instanceLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            prodLogger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/winston.logger.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/auth.middleware.ts\n            \n            injectable\n            AuthMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/request-logger.middleware.ts\n            \n            injectable\n            RequestLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/todos/dto/create-todo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/todos/dto/update-todo.dto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/entities/todo-status.entity.ts\n            \n            entity\n            TodoStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/entities/todo.entity.ts\n            \n            entity\n            Todos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todos/todos.controller.ts\n            \n            controller\n            TodosController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/todos/todos.service.ts\n            \n            injectable\n            TodosService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @nestjs/throttler : ^5.2.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            helmet : ^7.1.0\n        \n            joi : ^17.13.3\n        \n            nest-winston : ^1.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            winston : ^3.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleEnum   (src/.../roles.enum.ts)\n                        \n                        \n                            TodoStatusEnum   (src/.../todo-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : MODERATOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 GUEST\n                            \n                        \n                        \n                            \n                                Value : GUEST\n                            \n                        \n            \n        \n\n    src/todos/enums/todo-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TodoStatusEnum\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN PROGRESS\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : COMPLETED\n                            \n                        \n                        \n                            \n                                 ON_HOLD\n                            \n                        \n                        \n                            \n                                Value : ON HOLD\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : CANCELLED\n                            \n                        \n                        \n                            \n                                 OVERDUE\n                            \n                        \n                        \n                            \n                                Value : OVERDUE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS Starter App\nThis is a starter app for NestJS, a powerful Node.js framework. It provides authentication and authorization using Passport, along with general configurations for database, logging, and security.\nFeatures\n\nPassport authentication\nAuthorization middleware\nDatabase configuration\nLogging setup\nSecurity measures\n\nInstallation\n\nClone the repository: git clone https://github.com/your-username/nestjs-starter-app.git\nInstall dependencies: npm install\nConfigure the database connection in config/database.ts\nSet up the necessary environment variables\nStart the server: npm run start\n\nUsage\n\nRegister a new user\nLog in with your credentials\nAccess protected routes based on your role\n\nContributing\nContributions are welcome! If you have any suggestions or improvements, feel free to open an issue or submit a pull request.\nLicense\nThis project is licensed under the MIT License. See the LICENSE file for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TodosModule\n\n\n\ncluster_TodosModule_exports\n\n\n\ncluster_TodosModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTodosModule\n\nTodosModule\n\nTodosModule -->\n\nAuthModule->TodosModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAccessContorlService \n\nAccessContorlService \n\nAccessContorlService  -->\n\nAuthModule->AccessContorlService \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseConfigModule\n\nDatabaseConfigModule\n\nAppModule -->\n\nDatabaseConfigModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nTodosModule->AppModule\n\n\n\n\n\nTodosService \n\nTodosService \n\nTodosService  -->\n\nTodosModule->TodosService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAccessContorlService\n\nAccessContorlService\n\nAuthModule -->\n\nAccessContorlService->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTodosService\n\nTodosService\n\nTodosModule -->\n\nTodosService->TodosModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            devLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            encrypt   (src/.../password-helpers.ts)\n                        \n                        \n                            instance   (src/.../winston.logger.ts)\n                        \n                        \n                            instanceLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            matchPassword   (src/.../password-helpers.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            prodLogger   (src/.../winston.logger.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../password-helpers.ts)\n                        \n                        \n                               (src/.../winston.logger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/logger/winston.logger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        devLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  level: process.env.LOG_LEVEL || 'info',\n  format: combine(\n    colorize({ all: true }),\n    timestamp({\n      format: 'YYYY-MM-DD hh:mm:ss A',\n    }),\n    align(),\n    printf((info) => `[${info.timestamp}] ${info.level}: ${info.message}`),\n  ),\n  transports: [new transports.Console()],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLogger(instanceLogger)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        instanceLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV === 'production' ? prodLogger : devLogger\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prodLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  format: combine(timestamp(), errors({ stack: true }), json()),\n  transports: [\n    new transports.File({\n      filename: 'error.log',\n      level: 'error',\n    }),\n    new transports.File({\n      filename: 'combine.log',\n      level: 'info',\n    }),\n  ],\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : format\n                    \n                \n\n\n        \n    \n\n    src/lib/password-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (plainTextPassword: string) => {\n  const salt = await genSalt(SALT_ROUNDS);\n  const hashedPassword = await hash(plainTextPassword, salt);\n  return hashedPassword;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  hashedPassword: string,\n  plainTextPassword: string,\n) => {\n  return await compare(plainTextPassword, hashedPassword);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: RoleEnum[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
